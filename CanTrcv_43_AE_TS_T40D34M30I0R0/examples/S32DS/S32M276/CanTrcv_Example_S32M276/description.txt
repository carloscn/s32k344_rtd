1. Example Description
        This is a simple application to show the functionality of CANTRCV Driver:
        - Switching transceiver modes
        - Checking transmision and reception between 2 Can nodes:
            - Node A: FLEXCAN_0 is connected to AE_CAN_PHY(on-package).
            - Node B: FLEXCAN_1 is connected to an external transceiver on the board(TJA1462A).
        
    1.1 The application software functionality
        - Using Mcu_InitClock to initialize the clock sources, the clock tree and to configures the clock gating of the peripherals.
        - Using Port_Init to initialize pins for LPSPI interface, pins for FLEXCAN_0, FLEXCAN_1.
        - Using Spi_Init for configuration: baudrate, chip select,... of LPSPI.
        - Initialize configuration's structure of AE through Ae_Init.
        - Using CanTrcv_Init to initialize AE_CAN_PHY.
        - CanTrcv_SetOpMode to set the operation mode for Can PHY Transceiver.
        - Send a message from node B to node A.
        
2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - EVB board: XS32M2XXCVB-Q064 PCB 53099 RevX1 SCH RevA.
            - Silicon: P32M276CH MKHS 0P73G CTZA2305A
        2.1.2 Connections
            Switch following jumpers to select M276 chip:
                J187.2 to J187.3
                J105.2 to J105.3
                J104.2 to J104.3
                J82.2 to J82.3
                J89.2 to J89.3
                J126.2 to J126.3
                J127.2 to J127.3

            Switch following jumpers to select Can Transceiver chip:
                J175.2 to J175.3
                J98.2 to J98.3
                J106.2 to J106.3
                J170.2 to J170.3

            J138.3 to J138.4 to connect PTC3(FLEXCAN1_TX) to TXD of TJA1462A
            J138.7 to J138.8 to connect PTC2(FLEXCAN1_RX) to RXD of TJA1462A
            J220 to GND to switch TJA1462A to NORMAL mode(exit from STANDBY mode)
            J181.1 to J131(S32M2xx_CANH) to connect CAN_H of TJA1462A to CAN_H of AE_CAN_PHY
            J181.2 to J141(S32M2xx_CANL) to connect CAN_L of TJA1462A to CAN_L of AE_CAN_PHY
            
            Note:
                FLEXCAN_0 TX/RX pins are automatically connected to TXD/RXD of AE_CAN_PHY in chip package.
        2.1.3 Debugger
            The debugger must be connected to JTAG Cortex Debug connector.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.
         
3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse. 
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.2 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:
        
        Configuration Name                                  Description
        -------------------------------                     -----------------------
        CanTrcv_Example_S32M276_Debug_FLASH_PNE             Debug the FLASH configuration using PE Micro Debugger
        
        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.