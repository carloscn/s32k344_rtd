/*!
    @page cdd_i2s_example_group CDD_I2s Transfer
    @brief Example application showing CDD_I2s usage

    ## Application description ##
    _____
    This application demonstrates the usage of the I2s Driver over Flexio and Sai hardware Ip.
    The application includes a S32DS project that configures the Mcu, Mcl, Port and Platform drivers.
    The application software functionality:
    - Mcu_Init, Mcu_InitClock, Mcu_SetMode
        Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
    - OsIf_Init
        Initialize the OsIf for I2s internal delay.
    - Platform_Init
        Initialize the interrupt controller and to apply the interrupt configuration according to the Platform configuration.
    - Platform_SetIrq
        Enables interrupt request of Flexio and Dma.
    - Platform_InstallIrqHandler
        Install the ISR for the Flexio and Dma.
    - Port_Init
        Initialize Port pins for 2 Flexio Channels according to Master and Slave Channels
    - Mcl_Init
        Initialize Mcl driver to configure Flexio hardware
    - I2s_Init
        Initialization of I2s driver.
        I2s over Flexio Master uses Interrupt mode
        I2s over Sai Slave uses Interrupt mode
    - I2s_AsyncTransmit/I2s_SyncTransmit for transferring data
        Master sends data, Slave receives data      
    - I2s_GetStatus
        Gets the status of an I2S Channels.
    - The application will verify in the received data corresponds with the sent data and update the status flag bStatus accordingly.
    - I2s_DeInit
        De-initialization of I2s modules to reset values

    ## Prerequisites ##  
    _____
    To run the example you will need to have the following items:
    - S32K3XX board
    - 1 Power adapter for the board
    - PnE Debugger

    ## Boards supported ##
    _____
    The following boards are supported by this application:
    - XS32K3X4EVB-Q127 PCB 51972 RevA  SCH RevA1 Silicon: P32K344EHVPBS 1P55A CTZX2128B
    - XS32K3XXCVB-Q257 PCB 47020 RevA1 SCH RevX2 Silicon: P32K344EHVPBS 1P55A CTZX2128B

    ## Hardware Wiring ##
    _____
    - The debugger must be connected to JTAG Cortex Debug connector J205 20-pin connector

    PIN FUNCTION                                  |  S32K3X4EVB-Q127  |   S32K3X4EVB-Q257
    ----------------------------------------------|-------------------|------------------
    FlexIO D5  Master RX  - SAI1_D0    Slave TX   | J2.19 - J3.30     | J352.19 - P3.23
    FlexIO D3  Master TX  - SAI1_D0    Slave RX   | J2.16 - J3.30     | J352.16 - P3.23
    FlexIO D8  Master SCK - SAI1_BCLK  Slave SCK  | J2.1  - J38.6     | J352.4  - P3.25
    FlexIO D25 Master WS  - SAI1_SYNC  Slave WS   | J2.4  - J3.11     | J352.1  - P3.29

    ## How to run ##
    ______
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b I2s_Flexio_example_S32K358. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the S32 configuration ####
    The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
    The initial configuration will have the same settings as the default example settings. 
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b I2s_Flexio_example_S32K358).
    Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Clocks, Peripherals, etc.). Clicking on any one of those will generate all the components.
    Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    Limitations:
			-for the S32K3X4EVB-Q257 the node "McuLMENEnable"(Last Mile Regulator Enable) must be disabled to avoid failure at Mcu_Init() call -----> This results in a warning at generation step.
			-for the S32K3X4EVB-Q172 the node "McuLMENEnable"(Last Mile Regulator Enable) can be activated to avoid the warning at generation step.
	#### 3. Building the project ####
    Select the configuration to be built \b RAM (Debug_RAM) or FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be two debug configurations for this project:
     Configuration Name                               | Description
     -------------------------------------------------|------------
     \b I2s_Flexio_example_S32K344_Debug_FLASH_PNE    | Debug the FLASH configuration using GDB PEMicro

    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
*/