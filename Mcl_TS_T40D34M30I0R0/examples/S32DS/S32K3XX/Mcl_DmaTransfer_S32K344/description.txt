1. Example Description
    This application demonstrates the usage of the Mcl Driver.
    The application includes a S32CT project that configures the Mcu and Platform drivers.
    1.1 The application software functionality
            - Mcu_Init, Mcu_InitClock, Mcu_SetMode
                    Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
                    The clock configuration that is used will enable and use the PLL as source clock.
            - Platform_Init
                    Initialize the interrupt controller and to apply the interrupt configuration according to the Platform configuration.
            - Platform_InstallIrqHandler
                    Install the ISR for the DMA Logic Channel 0, Logic Channel 1 and Logic Channel 2.
            - Mcl_Init
                    Initialize the Mcl Driver: Initialize the DMA Logic Instance and DMA Logic Channel 0, Logic Channel 1 and Logic Channel 2.
                    Logic Channel 0 is configured in S32CT to run in Normal Transfer Mode.
                    Logic Channel 1 is configured in S32CT to run in Scatter/Gather Mode.
                    Logic Channel 2 is configured runtime to run in Normal Transfer Mode.
            - Mcl_SetDmaChannelTransferList
                    Configures at runtime, the selected Logic Channel, with Normal Transfer Mode Source Address and Destination Address parameters.
            - Mcl_SetDmaChannelScatterGatherList
                    Configures at runtime, the selected Logic Element of the selected Logic Channel, with Scatter/Gather Mode Source Address and Destination Address parameters.
            - Mcl_SetDmaChannelCommand
                    Sets specific command for the selected Logic Channel.
            - Mcl_CacheInvalidateByAddr
                    Invalidates the specified buffer in Cache. The buffer shall be 32 bytes aligned.
			- Validation Point 
					Status = True (Verify that the Mcl/Dma result returned corresponds to the expected value)

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
        - S32K3X4EVB-Q257 47827 PCB RevX1 SCH RevA. Silicon: P32K344EHVMMS 0P55A CTSK2038A
        - S32K3X4EVB-Q172 51972 PCB RevA SCH RevA. Silicon: P32K344EHVPBS 1P55A CTZX2128B
        2.1.2 Connections
        - Powered board through power Adapter 12V
        2.1.3 Debugger
        The Lauterbach debugger must be connected to:
        - S32K3X4EVB-Q257 47827 PCB JTAG : J55  Cortex Debug connector.
        - S32K3X4EVB-Q172 51972 PCB JTAG : J40  Cortex Debug connector.
    2.2 Software installation
        Make sure that all RTD plugins are already installed in the S32DS plugins directory
3. How to run
    3.1 Importing the project into the workspace
        After opening S32 Design Studio, go to \b File -> \b Import... ->\b Existing Projects into Workspace -> \b Browse... directory to "*\*\dev\drivers\AutoSAR\mcl\test_mcl\specific\S32K3XX\examples\S32DS\Mcl_Example_CT"  check the checkbox of "Mcl_Example_CT" check the checkbox "Copy projects into workspace" => \b Finish
        The project should now be copied into you current workspace.
        Wait for the S32 Configuration was initialized and ready.
    3.2 Generating the S32 configuration
        The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
        The initial configuration will have the same settings as the default example settings.
        Right click on the current project, then click "S32 Configuration Tool" choose "Open Peripherals".
        Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
        Make the desired changes (if any) then click "Update Code".
    3.3 Building the project
                Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
                Use Project > Build to build the project.
                Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file should be created.
    3.4 Running the project
                Go to Run and select Debug Configurations. There will be a debug configuration for this project:

                Configuration Name                                Description
                -------------------------------     			  -----------------------
		Mcl_DmaTransfer_S32K344_debug_flash_pemicro      Debug the FLASH configuration using PEmicro probe

                Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
                Use the controls to control the program flow.

4. Note:
    - When run the example with chip A: P32K344EHVMMS 0P55A CTSK2038A and Pne Debugger, user need to write 1 to clear ERR bit in CH0_ES register directly by hand on S32DS tool after call Mcl_Init function.
