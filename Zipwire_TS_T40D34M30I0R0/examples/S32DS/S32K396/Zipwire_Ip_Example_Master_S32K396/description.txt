1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers that are included in this release.
    The application includes an S32CT project that configures the BaseNXP, Zipwire, Clock, IntCtrl and Siul2 IPs.
    1.1 The aplication software functionality
            - Clock_Ip_InitClock
                Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
            - Clock_Ip_DistributePll
                The clock configuration that is used will enable and use the PLL as source clock.
            - Siul2_Port_Ip_Init
                To configure the LFAST Clock pin.
            - IntCtrl_Ip_Init
                To configure interrupt for SIPI.
            - Zipwire_Ip_Init
                Initialize the Zipwire driver
            - Verify that the Zipwire Init works properly.
                !Note: In order for ZIPWIRE examples to work properly, both Zipwire_Example_Master and Zipwire_Example_Slave must be run in parallel
2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - Mini-module: XS32K396-BGA-DC PCB 54614 RevX1 SCH RevA.
            - Motherboard: X-S32X-MB version A PCB 54935 RevX1 SCH RevA
            - Silicon: P32K396EHMJBS OP40E QAD2222F
        2.1.2 Connections
            Powered board through power Adapter 12V
        2.1.3 Debugger
            - The GDB PEMicro debugger must be connected to J20 JTAG Cortex Debug connector.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.

3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built:FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.2 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:

        Configuration Name                              Description
        ----------------------------------------        -----------------------
        Zipwire_Ip_Example_Master/Slave_S32K396_debug_flash_pemicro      Debug the FLASH configuration using PEmicro probe

        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.
