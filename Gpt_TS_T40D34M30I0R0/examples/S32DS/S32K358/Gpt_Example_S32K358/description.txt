1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers that are included in this code drop. It is not part of the production code deliverables.
    The application includes an Design Studio project that configures the Dio, Gpt, Mcu, Platform, Port drivers.
    1.1 The application software functionality
            - Port_Init
                    Initialize the pins used by the application using the Port driver.
            - Mcu_Init, Mcu_InitClock, Mcu_SetMode
                    Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
            - Platform_Init
                    Initialize the interrupt controller and to apply the interrupt configuration according to the Platform configuration.
            - Platform_InstallIrqHandler
                    Install the ISR for the PIT timer used by the Gpt driver
            - Gpt_Init, Gpt_StartTimer, Gpt_EnableNotification
                    Initialize the Gpt driver, start the selected channel and enable its notification.
            - After the initialization the channel will start counting, the notification will be generated and a 'while(1) loop' will run to blink a LED.
                    The 'while(1) loop' will toggle the PTD2 gpio pin after each event generated by the notification using Dio driver (Dio_WriteChannel).

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - Daughter Board: XS32K3X8CVB-Q289 PCB 53108 RevX3 SCH RevA1
            - Motherboard: X-S32K3XXX-MB PCB 47386 RevA SCH RevA
            - Silicon: E5 sample, P32K358GVS 0P14E CTZF2233B
        2.2.2 Connections
            A wire connection is required between the following:
                - J281.4 to J281.3 (located on motherboard) to connect PTD2 gpio pin to D78 user LED
        2.2.3 Debugger
            The debugger must be connected to J205 20-Pin ARM Standard JTAG Connector.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.

3. Building the example application

    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Clocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be build: RAM (Debug_RAM), or FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:

        Configuration Name                  Description
        -------------------------------     -----------------------
        $(example)_debug_ram_pemicro        Debug the RAM configuration using PEmicro probe
        $(example)_debug_flash_pemicro      Debug the FLASH configuration using PEmicro probe

        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.