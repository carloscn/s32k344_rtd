<?xml version='1.0'?>
<datamodel version="3.0"
           xmlns="http://www.tresos.de/_projects/DataModel2/08/root.xsd"
           xmlns:a="http://www.tresos.de/_projects/DataModel2/08/attribute.xsd"
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd"
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">
<!--
*   @file    Mcu.xdm
*   @version 3.0.0
*
*   @brief   AUTOSAR Mcu - Tresos Studio plugin schema file
*   @details This file contains the schema configuration for and Mcu Tresos Studio plugin.
-->
<!--
====================================================================================================
*   Project              : RTD AUTOSAR 4.7
*   Platform             : CORTEXM
*   Peripheral           : 
*   Dependencies         : none
*
*   Autosar Version      : 4.7.0
*   Autosar Revision     : ASR_REL_4_7_REV_0000
*   Autosar Conf.Variant :
*   SW Version           : 3.0.0
*   Build Version        : S32K3_RTD_3_0_0_D2303_ASR_REL_4_7_REV_0000_20230331

*   Copyright 2020 - 2023 NXP Semiconductors
====================================================================================================
-->
    <d:ctr type="AUTOSAR" factory="autosar"
        xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd"
        xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd"
        xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd" >
        <d:lst type="TOP-LEVEL-PACKAGES">
            <!-- /** @implements  Mcu_Object */ -->
            <d:ctr name="TS_T40D34M30I0R0" type="AR-PACKAGE">
                <a:a name="UUID" value="ECUC:5fe16860-10a9-42e8-ba32-129de4bf6ac3"/>
                <d:lst type="ELEMENTS">
                    <d:chc name="Mcu" type="AR-ELEMENT" value="MODULE-DEF">
                        <v:ctr type="MODULE-DEF">
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:<html>
                                        Configuration of the MicroController Unit (MCU) module.
                                    </html>]]>
                                </a:v>
                            </a:a>
                            <a:a name="LOWER-MULTIPLICITY" value="1" />
                            <a:a name="UPPER-MULTIPLICITY" value="1" />
                            <a:a name="RELEASE" value="asc:4.7"/>
                            <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                                <ad:ADMIN-DATA>
                                    <ad:LANGUAGE>EN</ad:LANGUAGE>
                                    <ad:DOC-REVISIONS>
                                        <ad:DOC-REVISION>
                                            <ad:REVISION-LABEL>3.0.0</ad:REVISION-LABEL>
                                            <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                                            <ad:DATE>2010-12-03</ad:DATE>
                                        </ad:DOC-REVISION>
                                    </ad:DOC-REVISIONS>
                                </ad:ADMIN-DATA>
                            </a:a>
                            <d:ref type="REFINED_MODULE_DEF" value="ASPath:/AUTOSAR/EcucDefs/Mcu"/>
                            <a:a name="POSTBUILDVARIANTSUPPORT" value="true"/>
                            <a:a name="UUID" value="ECUC:b510368b-ff12-4d58-aaad-a5e9c1cb3e2b"/>

                            <v:var name="POST_BUILD_VARIANT_USED" type="BOOLEAN">
                                <a:a name="DESC"
                                     value="Indicates whether a module implementation has or plans to have (i.e., introduced at link or post-build time) new post-build variation points."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="LABEL" value="Post Build Variant Used"/>
                                <a:a name="ORIGIN" value="EB"/>
                                <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                <a:da name="DEFAULT" value="false"/>
                                <a:da name="READONLY" value="false"/>
                                <a:da name="TOOLTIP"
                                    value="Indicates whether a module implementation has or plans to have (i.e., introduced at link or post-build time) new post-build variation points."/>
                            </v:var>

                            <!-- /** @implements  IMPLEMENTATION_CONFIG_VARIANT_Object */ -->
                            <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                                <a:a name="LABEL" value="Config Variant"/>
                                <a:a name="UUID" value="ECUC:e2d81221-d902-4f85-bd93-578fada9dc3f"/>
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            VariantPreCompile: Only precompile time configuration parameters. Only one set of parameters. <br />
                                            VariantPostBuild: Mix of precompile and postbuild time configuration parameters. Only one set of parameters. <br />
                                            VariantPostBuildSelectable: Mix of precompile and postbuild time configuration parameters. More sets of parameters. <br />
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:da name="DEFAULT" value="VariantPostBuild"/>
                                <a:da name="RANGE">
                                    <a:v>VariantPostBuild</a:v>
                                    <a:v>VariantPreCompile</a:v>
                                </a:da>
                            </v:var>

                            <!-- /** @implements  McuGeneralConfiguration_Object */ -->
                            <v:ctr name="McuGeneralConfiguration" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            This container contains the general configuration for the MCU driver.
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:b91249b0-4a29-496c-86b9-4cf3ec281e92"/>


                                <!-- /** @implements McuDevErrorDetect_Object */ -->
                                <v:var name="McuDevErrorDetect" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Pre-processor switch for enabling the default error detection and reporting to the DET.  <br />
                                                The switch McuDevErrorDetect shall switch the Default Error Tracer (Det) detection and notification ON or OFF.  <br />
                                                The detection of default errors is configurable (ON/OFF) at precompile time. <br />
                                                #define MCU_DEV_ERROR_DETECT (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Default Error Detect"/>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:564e05d8-8922-4a7d-b112-ebfa5e67d2d8"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>


                                <!-- /** @implements McuVersionInfoApi_Object */ -->
                                <v:var name="McuVersionInfoApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Pre-processor switch to enable/disable the API to read out the modules version information. <br />
                                                #define MCU_VERSION_INFO_API (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="LABEL" value="Version Info API"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:7ea93c38-3acb-4571-a374-c6c67d6746b1"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuGetRamStateApi_Object */ -->
                                <v:var name="McuGetRamStateApi" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu Get Ram State API" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Pre-processor switch to enable/disable the API Mcu_GetRamState. <br />
                                                #define MCU_GET_RAM_STATE_API (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:0ca12151-32c7-4f1f-a161-9c18ae70acb1"/>
                                    <a:da name="DEFAULT" value="false" />
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                                <!-- /** @implements McuInitClock_Object */ -->
                                <v:var name="McuInitClock" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu Init Clock API" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                If this parameter is set to FALSE, the clock initialization has to be disabled from the MCU driver. This concept applies when there are some write once clock registers and a bootloader is present. If this parameter is set to TRUE, the MCU driver is responsible with the clock initialization. <br />
                                                #define MCU_INIT_CLOCK (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:0f51cb81-7dcd-4510-a24d-317bc194aaed"/>
                                    <a:da name="DEFAULT" value="true"/>
                                </v:var>

                                <!-- /** @implements McuNoPll_Object */ -->
                                <v:var name="McuNoPll" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu No PLL" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameter shall be set True, if the H/W does not have a PLL or the PLL circuitry is enabled after the power on without S/W intervention. In this case MCU_DistributePllClock has to be disabled and  MCU_GetPllStatus has to return MCU_PLL_STATUS_UNDEFINED. Otherwise this parameters has to be set False. <br />
                                                #define MCU_NO_PLL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:6d9b74b1-4bf5-4cea-820d-53f6326975fd"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuEnterLowPowerMode_Object */ -->
                                <v:var name="McuEnterLowPowerMode" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                If this parameter has been configured to 'TRUE', the function 'Mcu_SetMode()' shall not be impacted and behave as specified. <br />
                                                If this parameter has been configured to 'FALSE', the function 'Mcu_SetMode()' shall not perform the transition to any low power modes as are 'STOP' or 'HALT' or any other mode, where the core stops execution. <br />
                                                #define MCU_ENTER_LOW_POWER_MODE (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Enter Low-Power Mode" />
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:4121632d-b60e-4d48-8e66-480991dbde5d"/>
                                    <a:da name="DEFAULT" value="true"/>
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                                <v:var name="McuTimeout" type="INTEGER">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameter represents the maximum number of loops for blocking functionality. <br />
                                                The maximum time needed for a MC_ME transition from DRUN to DRUN with keeping PLL running is 3 ms. <br />
                                                Please take this into consideration when choosing the value for this parameter. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:3b8b947e-d4c1-492b-b866-c8d140d0866f"/>
                                    <a:da name="DEFAULT" value="50000"/>
                                    <a:a name="LABEL" value="Mcu Loops TimeOut"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=1"/>
                                        <a:tst expr="&lt;=4294967295"/>
                                    </a:da>
                                </v:var>

                                <!-- @implements McuEnableUserModeSupport_Object -->
                                <v:var name="McuEnableUserModeSupport" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                When this parameter is enabled, the MDL module will adapt to run from User Mode, with the following measures: <br />
                                                a) configuring REG_PROT for ABC1, ABC2 IPs so that the registers under protection can be accessed from user mode by setting UAA bit in REG_PROT_GCR to 1 <br />
                                                b) using 'call trusted function' stubs for all internal function calls that access registers requiring supervisor mode. <br />
                                                c) other module specific measures <br />
                                                for more information, please see chapter 5.7 User Mode Support in IM  <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Enable User Mode Support"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:fdf29f79-dbae-4cd2-abf2-c0941851a05e"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuPerformResetApi_Object */ -->
                                <v:var name="McuPerformResetApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Pre-processor switch to enable/disable the use the Mcu_PerformReset() API. <br />
                                                OFF - Mcu_PerformReset() API is not used. <br />
                                                ON - Mcu_PerformReset() API is used. <br />
                                                #define MCU_PERFORM_RESET_API (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="LABEL" value="Mcu Perform Reset API"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:8c6ec070-2607-49d0-96f1-35d02c4a62ef"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <v:var name="McuCalloutBeforePerformReset" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if you want a callout function, called by MCU right before Mcu_PerformReset(). <br />
                                                This parameter is available for configuration only if "McuPerformResetApi" is ON. <br />
                                                #define MCU_RESET_CALLOUT_USED (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cb72d9bd132"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:a name="EDITABLE" type="XPath">
                                        <a:tst expr="node:fallback(../McuPerformResetApi, 'true') = 'true'"/>
                                    </a:a>
                                </v:var>

                                <!-- /** @implements McuPerformResetCallout_Object */ -->
                                <v:var name="McuPerformResetCallout" type="FUNCTION-NAME">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Function name of callout. <br />
                                                The field is editable only if "McuCalloutBeforePerformReset" is ON. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:025e1b74-4c6e-4a1a-aef0-c03a979bbd0a"/>
                                    <a:da name="DEFAULT" value="NULL_PTR"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(
                                                      node:fallback(../McuCalloutBeforePerformReset, 'true') = 'true' and
                                                      node:fallback(../McuPerformResetApi, 'true') = 'true'
                                                     ) and
                                                     (  (node:fallback(., '') = 'NULL') or
                                                        (node:fallback(., '') = 'Null') or
                                                        (node:fallback(., '') = 'false') or
                                                        (node:fallback(., '') = 'FALSE') or
                                                        (node:fallback(., '') = 'null') or
                                                        (node:fallback(., '') = 'null_ptr') or
                                                        (node:fallback(., '') = 'Null_Ptr') or
                                                        (node:fallback(., '') = 'NULL_PTR')
                                                     )"
                                            true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="(normalize-space(node:fallback(., '')) = '&quot;NULL_PTR&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL_PTR') or
                                                     (normalize-space(node:fallback(., '')) = '&quot;NULL&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL') or
                                                     (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                           false="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                    </a:da>
                                    <a:da name="EDITABLE" type="XPath">
                                        <a:tst expr="node:fallback(../McuCalloutBeforePerformReset, 'true') = 'true' and node:fallback(../McuPerformResetApi, 'true') = 'true'"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuPmcNotification" type="FUNCTION-NAME">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Function pointer to callback function.<br />
                                                This notification will be called by the driver before entering in Standby Mode,
                                                after the Lastmile Regulator is disabled. <br />
                                                This node is not supported on S32K312 derivatives <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:d762bbe9-6025-4f80-a407-2d308a2f3231"/>
                                    <a:da name="DEFAULT" value="NULL_PTR"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMEN')" />
                                    </a:a>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:fallback(../McuEnterLowPowerMode, 'false') = 'false'"
                                            true="McuEnterLowPowerMode must be ENABLED in order to be able to configure a PMC notification callback."/>
                                        <a:tst expr="(
                                                        (normalize-space(node:fallback(., '')) = 'NULL') or
                                                        (normalize-space(node:fallback(., '')) = 'Null') or
                                                        (normalize-space(node:fallback(., '')) = 'false') or
                                                        (normalize-space(node:fallback(., '')) = 'FALSE') or
                                                        (normalize-space(node:fallback(., '')) = 'null') or
                                                        (normalize-space(node:fallback(., '')) = 'null_ptr') or
                                                        (normalize-space(node:fallback(., '')) = 'Null_Ptr') or
                                                        (normalize-space(node:fallback(., '')) = 'NULL_PTR')
                                                     )"
                                            true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="(normalize-space(node:fallback(., '')) = '&quot;NULL_PTR&quot;') or
                                                     (normalize-space(node:fallback(., '')) = '&quot;NULL&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL') or
                                                     (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                           false="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuCmuNotification" type="FUNCTION-NAME">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Function pointer to callback function. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:d762bbe9-6025-4f80-a407-2c680a2d3231"/>
                                    <a:da name="DEFAULT" value="NULL_PTR"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(
                                                        (normalize-space(node:fallback(., '')) = 'NULL') or
                                                        (normalize-space(node:fallback(., '')) = 'Null') or
                                                        (normalize-space(node:fallback(., '')) = 'false') or
                                                        (normalize-space(node:fallback(., '')) = 'FALSE') or
                                                        (normalize-space(node:fallback(., '')) = 'null') or
                                                        (normalize-space(node:fallback(., '')) = 'null_ptr') or
                                                        (normalize-space(node:fallback(., '')) = 'Null_Ptr') or
                                                        (normalize-space(node:fallback(., '')) = 'NULL_PTR')
                                                     )"
                                            true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="(normalize-space(node:fallback(., '')) = '&quot;NULL_PTR&quot;') or
                                                     (normalize-space(node:fallback(., '')) = '&quot;NULL&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL') or
                                                     (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                           false="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuAlternateResetIsrUsed" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if you have any reset source demoted to IRQ (i.e. at least one McuModuleConfiguration/McuResetConfig/*/McuDisableReset = 'true'). <br />
                                                #define MCU_RESET_ALTERNATE_ISR_USED (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cb32d9db116"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                                <v:var name="McuCmuErrorIsrUsed" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if clock source failure notifications are enabled (i.e. McuModuleConfiguration/McuClockSrcFailureNotification = 'ENABLED'). <br />
                                                #define MCU_CMU_ERROR_ISR_USED (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cb32ad9c116"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                                <v:var name="McuVoltageErrorIsrUsed" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if under-voltage or over-voltage monitoring IRQs are enabled in the McuPowerControl container. <br />
                                                #define POWER_IP_VOLTAGE_ERROR_ISR_USED (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cb34ad2c325"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuErrorIsrNotification_Object */ -->
                                <v:var name="McuErrorIsrNotification" type="FUNCTION-NAME">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Function name of callout. This function will be called by the error ISR. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:17291a1c-163b-4343-87d0-f1ed80367f5b"/>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:da name="DEFAULT" value="NULL_PTR"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(  (node:fallback(., '') = 'NULL') or
                                                        (node:fallback(., '') = 'Null') or
                                                        (node:fallback(., '') = 'false') or
                                                        (node:fallback(., '') = 'FALSE') or
                                                        (node:fallback(., '') = 'null') or
                                                        (node:fallback(., '') = 'null_ptr') or
                                                        (node:fallback(., '') = 'Null_Ptr') or
                                                        (node:fallback(., '') = 'NULL_PTR')
                                                     )"
                                            true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="(normalize-space(node:fallback(., '')) = '&quot;NULL_PTR&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL_PTR') or
                                                     (normalize-space(node:fallback(., '')) = '&quot;NULL&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL') or
                                                     (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                           false="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                    </a:da>
                                </v:var>

                                <!-- /** @implements McuDisableRgmInit_Object */ -->
                                <v:var name="McuDisableRgmInit" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu Disable Reset Generation Module Initialization" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                If this parameter is set to TRUE, the Reset Generation Module (MC_RGM) initialization will be disabled in the MCU driver. <p/>
                                                If this parameter is set to FALSE, the MCU driver is responsible for the Reset Generation Module (MC_RGM) initialization. <p/>
                                                #define POWER_IP_DISABLE_RGM_INIT (STD_ON)/(STD_OFF) will be generated in Power_Ip_Cfg_Defines.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:884f320d-7ba4-479e-a4c9-67dcb82e2bee"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuDisablePmcInit_Object */ -->
                                <v:var name="McuDisablePmcInit" type="BOOLEAN">
                                    <a:a name="LABEL" value="Mcu Disable Power Management Controller Initialization" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                If this parameter is set to TRUE, the Power Management Controller (PMC) initialization will be disabled in the MCU driver. <p/>
                                                If this parameter is set to FALSE, the MCU driver is responsible for the Power Management Controller (PMC) initialization. <p/>
                                                #define POWER_IP_DISABLE_PMC_INIT (STD_ON)/(STD_OFF) will be generated in Power_Ip_Cfg_Defines.h file.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:884f320d-7ba4-479e-a4c9-ec6da82ecb27"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <!-- /** @implements McuDisableRamWaitStatesConfig_Object */ -->
                                <v:var name="McuDisableRamWaitStatesConfig" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if you want the PRAMC configuration to be bypassed.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Disable Ram Wait States Config"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:133a1136-9fb7-40ee-be19-8599edfef487"/>
                                    <a:da name="DEFAULT" value="true"/>
                                </v:var>

                                <v:var name="McuDisableFlashWaitStatesConfig" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if you want the Flash configuration from RAM to be bypassed.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Disable Flash Wait States Config"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:133a1136-9fb7-40ee-beae-85f9decaf487"/>
                                    <a:da name="DEFAULT" value="true"/>
                                </v:var>

                                <!-- /** @implements McuPrepareMemoryConfig_Object */ -->
                                <v:var name="McuPrepareMemoryConfig" type="FUNCTION-NAME">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Function name of a callout that will be called before and after configuring
                                                the PRAM controller. It will have a parameter that will specify if it is
                                                the entry or the exit point of the controllers configuration.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Memory Configuration Notification"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:17291a1c-163b-4ec3-87d0-f1ed80312f5b"/>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:da name="DEFAULT" value="NULL_PTR"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(  (node:fallback(., '') = 'NULL') or
                                                        (node:fallback(., '') = 'Null') or
                                                        (node:fallback(., '') = 'false') or
                                                        (node:fallback(., '') = 'FALSE') or
                                                        (node:fallback(., '') = 'null') or
                                                        (node:fallback(., '') = 'null_ptr') or
                                                        (node:fallback(., '') = 'Null_Ptr') or
                                                        (node:fallback(., '') = 'NULL_PTR')
                                                     )"
                                            true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="(normalize-space(node:fallback(., '')) = '&quot;NULL_PTR&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL_PTR') or
                                                     (normalize-space(node:fallback(., '')) = '&quot;NULL&quot;') or
                                                     (normalize-space(node:fallback(., '')) = 'NULL') or
                                                     (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                           false="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                        <a:tst expr="((node:fallback(../McuDisableRamWaitStatesConfig, 'false') = 'true') and (node:fallback(../McuDisableFlashWaitStatesConfig, 'false') = 'true'))"
                                               true="This notification cannot be configured as long as both FLASH and RAM configuration are disabled (i.e. McuDisableRamWaitStatesConfig = 'true' and McuDisableFlashWaitStatesConfig = 'true')."/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuTimeoutMethod" type="ENUMERATION">
                                    <a:a name="LABEL" value="Mcu Timeout Method"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:
                                                <html>
                                                    <p>McuTimeoutMethod</p>
                                                    <p>Configures the timeout method.</p>
                                                    <p>Based on this selection a certain timeout method from OsIf will be used in the driver.</p>
                                                    <p>Note: If OSIF_COUNTER_SYSTEM or OSIF_COUNTER_CUSTOM are selected make sure the corresponding timer is enabled in OsIf General configuration. </p>
                                                    Note: Implementation Specific Parameter. <p/>
                                                </html>
                                            ]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:859399b9-f6b8-45e1-9897-07dd73e76cc4"/>
                                    <a:a name="DEFAULT" value="OSIF_COUNTER_DUMMY"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:refs('ASPathDataOfSchema:/TS_T40D34M30I0R0/BaseNXP/OsIfGeneral/OsIfUseCustomTimer') = 'false' and node:fallback(.,'OSIF_COUNTER_DUMMY') = 'OSIF_COUNTER_CUSTOM'" true="Custom Timer is not enabled in OsIf (OsIfGeneral/OsIfUseCustomTimer checkbox)"/>
                                        <a:tst expr="node:refs('ASPathDataOfSchema:/TS_T40D34M30I0R0/BaseNXP/OsIfGeneral/OsIfUseSystemTimer') = 'false' and node:fallback(.,'OSIF_COUNTER_DUMMY') = 'OSIF_COUNTER_SYSTEM'" true="System Timer is not enabled in OsIf (OsIfGeneral/OsIfUseSystemTimer checkbox)"/>
                                    </a:da>
                                    <a:da name="RANGE">
                                        <a:v>OSIF_COUNTER_DUMMY</a:v>
                                        <a:v>OSIF_COUNTER_SYSTEM</a:v>
                                        <a:v>OSIF_COUNTER_CUSTOM</a:v>
                                    </a:da>
                                </v:var>

                                <v:var name="McuRegisterValuesOptimization" type="ENUMERATION">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Check this if register values of CMUs, PCFS will be generated by configuration tool.<br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Register Values Optimization"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:133a1136-9fb7-40ee-be19-8599edfef486"/>

                                    <a:da name="DEFAULT" value="DISABLED"/>
                                    <a:da name="RANGE">
                                        <a:v>ENABLED</a:v>
                                        <a:v>DISABLED</a:v>
                                    </a:da>
                                    <a:da name="WARNING" type="XPath">
                                    <a:tst expr="
                                    (
                                       node:containsValue(../../McuModuleConfiguration/McuClockSettingConfig/*/McuFXOSC/McuFxoscUnderMcuControl, 'true') = 'true' or
                                       node:containsValue(../../McuModuleConfiguration/McuClockSettingConfig/*/McuSXOSC/McuSxoscUnderMcuControl, 'true') = 'true' or
                                       node:fallback(., 'ENABLED') = 'ENABLED'
                                    )"
                                    false="External oscillators from all configurations are not under mcu control, it's recommended to optimize register values."
                                    />
                                    </a:da>
                                </v:var>
                                <!-- /** @implements McuEcucPartitionRef_Object */ -->
                                <v:lst name="McuEcucPartitionRef" type="">
                                  <v:ref name="McuEcucPartitionRef" type="REFERENCE">
                                    <a:a name="DESC">
                                     <a:v>
                                        <![CDATA[EN:
                                            <html>
                                                Maps the MCU driver to zero or multiple ECUC partitions to make the
                                                modules API available in this partition. <p/>
                                                Tags: atp.Status=draft<p/>
                                                Note: Implementation Specific Parameter.<p/>
                                            </html>
                                        ]]>
                                     </a:v>
                                    </a:a>
                                    <a:a name="LABEL" value="McuEcucPartitionRef" />
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="ECU"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                                    <a:a name="UUID" value="ECUC:f8d45bee-2afd-48db-a0ef-f1cf3d47cd8b"/>
                                    <a:a name="INVALID" type="XPath">
                                      <a:tst expr="node:empty(.)"
                                             true="Field is empty (Suggestion: Select an EcucPartition reference)."/>
                                      <a:tst expr="not(node:refvalid(.))"
                                             true="Invalid EcucPartition reference (Suggestion: Select an EcucPartition reference)."/>
                                    </a:a>
                                    <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPartitionCollection/EcucPartition"/>
                                  </v:ref>
                                </v:lst>

                                <v:ctr name="McuControlledClocksConfiguration" type="IDENTIFIABLE">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This container contains pre-compile options for all the clock sources under MCU control. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="UUID" value="ECUC:2634afa2-e3c1-4e96-bf1c-e1c2d16761db"/>

                                    <v:var name="McuFxoscUnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if FXOSC is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuFXOSC/McuFxoscUnderMcuControl = 'true'). <br />
                                                    #define MCU_FXOSC_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="FXOSC Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cd7a5d2c325"/>
                                        <a:da name="DEFAULT" value="true"/>
                                    </v:var>

                                    <v:var name="McuSxoscUnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if SXOSC is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuSXOSC/McuSxoscUnderMcuControl = 'true'). <br />
                                                    #define MCU_SXOSC_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="SXOSC Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cd7a5d8c714"/>
                                        <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.SXOSC.Supported')"/>
                                        <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.XOSC.List'), 'SXOSC')" />
                                        </a:a>
                                    </v:var>

                                    <v:var name="McuFircUnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if FIRC is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuFIRC/McuFircUnderMcuControl = 'true'). <br />
                                                    #define MCU_FIRC_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="FIRC Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cd7e6cd8714"/>
                                        <a:da name="DEFAULT" value="true"/>
                                    </v:var>

                                    <v:var name="McuSircUnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if SIRC is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuSIRC/McuSircUnderMcuControl = 'true'). <br />
                                                    #define MCU_SIRC_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="SIRC Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cd2f6cc8714"/>
                                        <a:da name="DEFAULT" value="true"/>
                                    </v:var>

                                    <v:var name="McuPll0UnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if PLL is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuPll_0/McuPLLUnderMcuControl = 'true'). <br />
                                                    #define MCU_PLL0_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="PLL Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:c269a078-8a40-4311-b499-1d44b9d4ca98"/>
                                        <a:da name="DEFAULT" value="true"/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="
                                                (
                                                    (node:fallback(., 'false') = 'true') and
                                                    (node:fallback(../../McuNoPll, 'true') = 'true')
                                                )"
                                                   true="PLL cannot be under MCU control if McuNoPll is enabled (i.e. McuGeneralConfiguration/McuNoPll = 'true')."/>
                                        </a:da>
                                    </v:var>
                                    <v:var name="McuPll1UnderMcuControl" type="BOOLEAN">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Check this if PLLAUX is under MCU control in any of the Mcu Clock Setting Configurations
                                                    (i.e. at least one McuClockSettingConfig/*/McuPll_1/McuPLLUnderMcuControl = 'true'). <br />
                                                    #define MCU_PLL1_UNDER_MCU_CONTROL (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="PLLAUX Under MCU Control"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:fa43da28-01e8-4ca1-aeca-2cd7e6cd8165"/>
                                        <a:da name="DEFAULT" value="true"/>
                                        <a:a name="VISIBLE" type="XPath">
                                            <a:tst expr="contains(ecu:get('MCU.PLL.List'), 'PLL_1')" />
                                        </a:a>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="
                                                (
                                                    (node:fallback(., 'false') = 'true') and
                                                    (node:fallback(../../McuNoPll, 'true') = 'true') and
                                                    (contains(ecu:get('MCU.PLL.List'), 'PLL_1'))
                                                )"
                                                   true="PLLAUX cannot be under MCU control if McuNoPll is enabled (i.e. McuGeneralConfiguration/McuNoPll = 'true')."/>
                                        </a:da>
                                    </v:var>
                                </v:ctr>
                            </v:ctr>

                            <v:ctr name="McuDebugConfiguration" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            This container contains option for non-ASR APIs used for debug or extra-implementation. <br />
                                            Note: Implementation Specific Parameter.
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:2634afa2-e3c1-4e96-bf1c-e1c2d61861fc"/>

                                <!-- /** @implements McuDisableDemReportErrorStatus_Object */ -->
                                <v:var name="McuDisableDemReportErrorStatus" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for reporting the Dem Error. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Disable Production Error Reporting"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:fdf29f79-dbae-4cd7-bbf7-c0941851a05e"/>
                                    <a:da name="DEFAULT" value="true"/>
                                </v:var>

                                <v:var name="McuGetSystemStateApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for System state information: Mcu_GetSystem_State(). <br />
                                                Information extracted from SSCM hw IP. <br />
                                                Note: Implementation Specific Parameter. <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get System State API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:90ecc49c-a22b-4391-9a58-8d5fcdcd4fc7"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuGetPowerModeStateApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for MC_ME state: Mcu_GetPowerMode_State(). <br />
                                                Get information regarding current power mode, enabled clocks, etc (content of ME_GS register). <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get PowerMode State API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:a43c3aa1-3bd9-4a8e-aefc-bddf5d9508db"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuGetPowerDomainApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for MC_PCU state: Mcu_GetPowerDomain_Status(). <br />
                                                Get information from PCU_STAT register. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get Power Domain State API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:6e3cba6f-d704-4fea-9611-fc001713d1da"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuSscmGetMemConfigApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_SscmGetMemConfig(). <br />
                                                Get information from SSCM_MEMCONFIG register. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Sscm Get MemConfig API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:1358731c-e26e-4134-b80d-a08d078c51a4"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuSscmGetStatusApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_SscmGetStatus(). <br />
                                                Get information from SSCM_STATUS register. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Sscm Get Status API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:f7bb3084-cf7b-40e5-b705-8781f2ac9b85"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuSscmGetUoptApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_SscmGetUopt(). <br />
                                                Get information from SSCM_UOPT register. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Sscm Get Uopt API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:279ac3de-275b-44b3-af21-5718275e277d"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="true"/>
                                </v:var>

                                <v:var name="McuGetMidrStructureApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_GetMidrStructure(). <br />
                                                Get information from SIUL2 MIDRn registers. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get MIDRn API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:3b7d0da5-6a6c-4c9f-bfbb-7bead7870b5f"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>

                                <v:var name="McuDisableCmuApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for disabling the clock monitoring unit. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Disable CMU API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:a42a1cde-ec51-44ba-9d88-0c5142cbb5fc"/>
                                    <a:da name="DEFAULT" value="true"/>
                                </v:var>

                                <v:var name="McuEmiosConfigureGprenApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_EmiosConfigureGpren(). <br />
                                                Changes the GPREN bit of the EMIOS_MCR register of an addressed eMIOS instance. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Emios Configure GPREN API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:11d5f12b-197e-471b-9ee2-c9af2af5ffb1"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                                <v:var name="McuGetClockFrequencyApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_GetClockFrequency(). <br />
                                                Return the frequency of a given clock. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Get Clock Frequency API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:11d5f12b-197e-471b-9ee2-c9af2af5ff32"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="false"/>
                                </v:var>

                                <v:var name="McuPmcAeConfigApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_PmcAeConfig(). <br />
                                                Configure the Power Management Controller AE. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu PMC_AE Config API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:11d5f12b-198e-471b-9ee2-c9af2af5ff32"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="false"/>
                                    <a:da name="VISIBLE" type="XPath">
                                        <a:tst  expr="(ecu:get('MCU.PMC.AE.SUPPORT') = 'true')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuAecResetConfigApi" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enable/Disable the API for Mcu_AecResetConfig(). <br />
                                                Configure the reset generator AEC. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu AEC Reset Config API"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:11d5f12b-198e-471b-9ee2-c9af2af5ff33"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="READONLY" value="false"/>
                                    <a:da name="VISIBLE" type="XPath">
                                        <a:tst  expr="(ecu:get('MCU.AEC.RSTGENCFG.SUPPORT') = 'true')"/>
                                    </a:da>
                                </v:var>

                            </v:ctr>

                            <v:ctr name="McuCoreControlConfiguration" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            This configuration holds global control over the partition specific core control features.<br />
                                            This container is implementation specific.<br />
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:5f440d84-b54c-4ec9-acff-64b302aef45c"/>

                                <v:var name="McuCoreBootAddressControl" type="BOOLEAN">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Global ENABLE / DISABLE of the code that writes the PRTNm_COREn_ADDR registers. <br />
                                                These registers give the boot addresses for the cores in their corresponding partitions. <br />
                                                If this check box is ON, the registers will be written during each Mcu_SetMode() call. <br />
                                                #define MCU_CONFIGURE_CADDRN (STD_ON)/(STD_OFF) will be generated in Mcu_Cfg.h file. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Core Boot Address Control"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:f959e43f-7aa1-4623-b5dd-b4868f2944fd"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>
                            </v:ctr>

                            <!-- /** @implements  McuPublishedInformation_Object */ -->
                            <v:ctr name="McuPublishedInformation" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            Container holding all MCU specific published information parameters. <br />
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:2c646e7d-747c-457d-8b7b-26fb61c052e2"/>
                                <v:lst name="McuResetReasonConf" type="MAP">
                                    <a:da name="MIN" value="1"/>

                                    <!-- /** @implements  McuResetReasonConf_Object */ -->
                                    <v:ctr name="McuResetReasonConf" type="IDENTIFIABLE">
                                        <a:a name="REQUIRES-INDEX" value="true"/>
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the different type of reset reason that can be retrieved from Mcu_GetResetReason Api. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:247f42f0-055a-404e-aba2-130d0887fffc"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>

                                        <!-- /** @implements McuResetReason_Object */ -->
                                        <v:var name="McuResetReason" type="INTEGER_LABEL">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        The parameter represents the different type of reset that a Micro supports. This parameter is referenced by the parameter EcuMResetReason in the ECU State manager module. <br />
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SCOPE" value="ECU"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:b58895cf-c4c7-4d07-a0be-7180c8b57a5e"/>
                                            <a:da name="DEFAULT" type="XPath" expr="string(text:split('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31')[var:set('idx',position()) and
                                                                                    normalize-space(text:split('MCU_POWER_ON_RESET MCU_FCCU_FTR_RESET MCU_STCU_URF_RESET MCU_MC_RGM_FRE_RESET MCU_FXOSC_FAIL_RESET MCU_PLL_LOL_RESET MCU_CORE_CLK_FAIL_RESET MCU_AIPS_PLAT_CLK_FAIL_RESET MCU_HSE_CLK_FAIL_RESET MCU_SYS_DIV_FAIL_RESET MCU_CM7_CORE_CLK_FAIL_RESET MCU_HSE_TMPR_RST_RESET MCU_HSE_SNVS_RST_RESET MCU_SW_DEST_RESET MCU_DEBUG_DEST_RESET MCU_F_EXR_RESET MCU_FCCU_RST_RESET MCU_ST_DONE_RESET MCU_SWT0_RST_RESET MCU_SWT1_RST_RESET MCU_SWT2_RST_RESET MCU_JTAG_RST_RESET MCU_SWT3_RST_RESET MCU_PLL_AUX_RESET MCU_HSE_SWT_RST_RESET MCU_HSE_BOOT_RST_RESET MCU_SW_FUNC_RESET MCU_DEBUG_FUNC_RESET MCU_WAKEUP_REASON MCU_NO_RESET_REASON MCU_MULTIPLE_RESET_REASON MCU_RESET_UNDEFINED')[position() = $idx]) = node:when((node:fallback(node:current()/.., 'EPD_MODE') = 'EPD_MODE'), 'MCU_POWER_ON_RESET', string(name(node:fallback(node:current()/.., ''))))])"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=255"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                        </v:var>
                                    </v:ctr>
                                </v:lst>
                            </v:ctr>

                            <!-- /** @implements CommonPublishedInformation_Object */ -->
                            <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            Common container, aggregated by all modules.
                                            It contains published information about vendor and versions.
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:acb0123b-4400-4cf6-9048-3b802ed2c755"/>

                                <v:var name="ArReleaseMajorVersion" type="INTEGER_LABEL">
                                    <a:a name="LABEL" value="Ar Release Major Version" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Major version number of AUTOSAR specification on which the appropriate implementation is based on.  <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:1a61b436-b723-47b1-8f4d-b568b3c77bce"/>
                                    <a:da name="DEFAULT" value="4"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=4"/>
                                        <a:tst expr="&lt;=4"/>
                                    </a:da>
                                </v:var>

                                <v:var name="ArReleaseMinorVersion" type="INTEGER_LABEL">
                                    <a:a name="LABEL" value="Ar Release Minor Version" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Minor version number of AUTOSAR specification on which the appropriate implementation is based on.  <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:6b04c7cc-fcf4-40d5-b589-579f3b690bca"/>
                                    <a:da name="DEFAULT" value="7"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=7"/>
                                        <a:tst expr="&lt;=7"/>
                                    </a:da>
                                </v:var>

                                <v:var name="ArReleaseRevisionVersion" type="INTEGER_LABEL">
                                    <a:a name="LABEL" value="Ar Release Revision Version" />
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Revision version number of AUTOSAR specification on which the appropriate implementation is based on.  <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:856eb3f2-36bf-4d6f-b404-6a873fbbe0e7"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=0"/>
                                        <a:tst expr="&lt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="ModuleId" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Module ID of this module from Module List.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:c8d8c033-3334-459e-b45c-705a3ff4787d"/>
                                    <a:da name="DEFAULT" value="101"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=101"/>
                                        <a:tst expr="&lt;=101"/>
                                    </a:da>
                                </v:var>

                                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Major version number of the vendor specific implementation of the module. The numbering is vendor specific.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:9dd0879c-f26b-4ea9-bf0e-013bfa0f3584"/>
                                    <a:da name="DEFAULT" value="3"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=3"/>
                                        <a:tst expr="&lt;=3"/>
                                    </a:da>
                                </v:var>

                                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:18ede1df-ceac-4080-a4c8-1eb4cf4cd276"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=0"/>
                                        <a:tst expr="&lt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:f5563407-a9bd-4cae-810d-cf4327c59a88"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=0"/>
                                        <a:tst expr="&lt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="VendorApiInfix" type="STRING_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                             In driver modules which can be instantiated several times on a single ECU, BSW00347 requires that the name of APIs is extended by the VendorId and a vendor specific name.
                                               This parameter is used to specify the vendor specific name. In total, the Implementation specific name is generated as follows:
                                               &lt;ModuleName&gt;_&gt;VendorId&gt;_&lt;VendorApiInfix&gt;&lt;Api name from SWS&gt;.
                                               E.g. assuming that the VendorId of the implementor is 123 and the implementer chose a VendorApiInfix of "v11r456" a api name
                                               Can_Write defined in the SWS will translate to Can_123_v11r456Write.
                                               This parameter is mandatory for all modules with upper multiplicity &gt;
                                               1. It shall not be used for modules with upper multiplicity =1.
                                               Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:dd6060f6-7040-4479-a64c-802197581a72"/>
                                    <a:da name="DEFAULT" value=""/>
                                </v:var>

                                <v:var name="VendorId" type="INTEGER_LABEL">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list.
                                                Note: Implementation Specific Parameter
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                                        <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:ccb6488d-97c2-478c-bcc7-3146549af0ef"/>
                                    <a:da name="DEFAULT" value="43"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&gt;=43"/>
                                        <a:tst expr="&lt;=43"/>
                                    </a:da>
                                </v:var>
                            </v:ctr>


                            <!-- /** @implements McuModuleConfiguration_Object */ -->
                            <v:ctr name="McuModuleConfiguration" type="IDENTIFIABLE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:<html>
                                            This container contains the configuration for the MCU driver.
                                        </html>]]>
                                    </a:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:cd185304-074e-4397-8451-4704f1dc38fc"/>

                                <!-- /** @implements McuNumberOfMcuModes_Object */ -->
                                <v:var name="McuNumberOfMcuModes" type="INTEGER">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameter shall represent the number of Modes available for the MCU (from "McuModeSettingConf" list). <br />
                                                CalculationFormula = Number of configured "McuModeSettingConf". <br />
                                                This parameter is not used.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="LABEL" value="Mcu Number of Mode Settings"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:06fdcdfb-522d-4b35-bd5c-b377b9b373e1"/>
                                    <a:da name="DEFAULT" type="XPath">
                                        <a:tst expr="num:i( count( node:fallback( ../McuModeSettingConf/*, num:i(1) ) ) )"/>
                                    </a:da>
                                    <a:da name="RANGE" type="XPath">
                                        <a:tst expr="node:fallback( ., num:i(1)) = num:i( count( node:fallback( ../McuModeSettingConf/*, num:i(1))) )"
                                            false="The value for the McuNumberOfMcuModes must match with the McuModeSettingConf. For calculating the correct value use the CALCULATE button"/>
                                    </a:da>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=255"/>
                                        <a:tst expr="&gt;=1"/>
                                    </a:da>
                                </v:var>

                                <!-- /** @implements McuRamSectors_Object */ -->
                                <v:var name="McuRamSectors" type="INTEGER">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameter shall represent the number of RAM sectors available for the MCU (from "McuRamSectorSettingConf" list). <br />
                                                CalculationFormula = Number of configured "McuRamSectorSettingConf". <br />
                                                This parameter is not used.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="LABEL" value="Mcu Number of RAM Sectors"/>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="UUID" value="ECUC:45d0e94c-b26f-46b9-9c42-a5f5da89f2ca"/>
                                    <a:da name="DEFAULT" type="XPath">
                                        <a:tst expr="num:i( count( node:fallback( ../McuRamSectorSettingConf/*, num:i(1))))"/>
                                    </a:da>
                                    <a:da name="RANGE" type="XPath">
                                        <a:tst expr="node:fallback( ., num:i(1)) = num:i( count( node:fallback( ../McuRamSectorSettingConf/*, num:i(1))) )"
                                            false="The value for the McuRamSector must match with the McuRamSectorSettingConf. For calculating the correct value use the CALCULATE button"/>
                                    </a:da>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=4294967295"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>

                                <!-- /** @implements McuResetSetting_Object */ -->
                                <v:var name="McuResetSetting" type="INTEGER">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                This parameters applies to the function Mcu_PerformReset(), which performs a microcontroller reset using the hardware feature of the microcontroller. <br />
                                                 Note: This parameter is not used by the current Implementation. <br />
                                                Software Reset occurs when Mcu_PerformReset() function is called. <br />
                                                This parameter is not used.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="LABEL" value="Reset Setting"/>
                                    <a:a name="UUID" value="ECUC:72a01813-8739-43f1-9d02-87a0ab579374"/>
                                    <a:da name="DEFAULT" value="1"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=255"/>
                                        <a:tst expr="&gt;=1"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuCrystalFrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Crystal Frequency or External Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="External Crystal Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-9487-a8c17d4a5baf"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.FXOSC.Limits.XTAL.Typical')"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.FXOSC.Limits.XTAL.High')"/>
                                        <a:tst expr="&gt;=ecu:get('MCU.FXOSC.Limits.XTAL.Low')"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuSlowCrystalFrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Slow Crystal Frequency or External Reference Frequency [Hz]. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="External Slow Crystal Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb7e14da-da73-4b07-1a87-a8c17d4a5baf"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.SXOSC.Limits.XTAL.Typical')"/>
                                    <a:a name="VISIBLE" type="XPath">
                                        <a:tst expr="contains(ecu:get('MCU.XOSC.List'), 'SXOSC')" />
                                    </a:a>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.SXOSC.Limits.XTAL.High')"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuEMAC_MII_RMII_TX_CLKFrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                EMAC_MII_RMII_TX_CLK External Reference Frequency [Hz]. <br />
                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="EMAC_MI_RMII_TX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:f1a3b6af-253c-4078-aa7a-37397e67e67f"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.EMAC_MII_RMII_TX_CLK.Default')"/>
                                    <a:a name="VISIBLE" type="XPath">
                                    <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'EMAC_MII_RMII_TX_CLK')" />
                                    </a:a>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.EMAC_MII_RMII_TX_CLK')"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuEMAC_MII_RX_CLKFrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                EMAC_MII_RX_CLK External Reference Frequency [Hz]. <br />
                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="EMAC_MII_RX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb796dda-da73-4b07-9487-a8c17d4a5baf"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.EMAC_MII_RX_CLK.Default')"/>
                                    <a:a name="VISIBLE" type="XPath">
                                    <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'EMAC_MII_RX_CLK')" />
                                    </a:a>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.EMAC_MII_RX_CLK')"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuGMAC0_MII_RMII_TX_CLKFrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                GMAC0_MII_RMII_TX_CLK External Reference Frequency [Hz]. <br />
                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="GMAC0_MI_RMII_TX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:f12bb6af-253c-4078-aa7a-37397e67e67f"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.GMAC0_MII_RMII_TX_CLK.Default')"/>
                                    <a:a name="VISIBLE" type="XPath">
                                    <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'GMAC0_MII_RMII_TX_CLK')" />
                                    </a:a>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.GMAC0_MII_RMII_TX_CLK')"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuGMAC0_MII_RX_CLKFrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                GMAC0_MII_RX_CLK External Reference Frequency [Hz]. <br />
                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="GMAC0_MII_RX_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:cb793cda-da73-4b07-9487-a8c17d4a5baf"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.GMAC0_MII_RX_CLK.Default')"/>
                                    <a:a name="VISIBLE" type="XPath">
                                    <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'GMAC0_MII_RX_CLK')" />
                                    </a:a>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.GMAC0_MII_RX_CLK')"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuLFAST_REF_EXT_CLKFrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                LFAST_REF_EXT_CLK External Reference Frequency [Hz]. <br />
                                                This node is supported on S32K39x derivative only. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="LFAST_REF_EXT_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:7b0d6ebe-bb9c-45bb-8e88-62f802bec6fe"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.LFAST_REF_EXT_CLK.Default')"/>
                                    <a:a name="VISIBLE" type="XPath">
                                    <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'LFAST_REF_EXT_CLK')" />
                                    </a:a>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.LFAST_REF_EXT_CLK')"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>

                                <v:var name="McuSWG_PAD_CLKFrequencyHz" type="FLOAT">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                SWG_PAD_CLK External Reference Frequency [Hz]. <br />
                                                This node is supported on S32K39x derivative only. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="LABEL" value="SWG_PAD_CLK External Reference Frequency [Hz]"/>
                                    <a:a name="UUID" value="ECUC:06d729a5-f71d-44c8-af1d-0853bf55c32a"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.ExtClock.Limits.SWG_PAD_CLK.Default')"/>
                                    <a:a name="VISIBLE" type="XPath">
                                    <a:tst expr="contains(ecu:get('MCU.ExtClock.List'), 'SWG_PAD_CLK')" />
                                    </a:a>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=ecu:get('MCU.ExtClock.Limits.SWG_PAD_CLK')"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>

                                <!-- /** @implements McuClockSrcFailureNotification_Object */ -->
                                <v:var name="McuClockSrcFailureNotification" type="ENUMERATION">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Enables/Disables clock failure notification.
                                                In case this feature is not supported by HW the setting should be disabled.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="LABEL" value="Clock Failure Notification"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                    <a:a name="UUID" value="ECUC:d04e3d3c-e8c8-4cba-913d-a79a93ae4689"/>
                                    <a:da name="DEFAULT" value="DISABLED"/>
                                    <a:da name="RANGE">
                                        <a:v>ENABLED</a:v>
                                        <a:v>DISABLED</a:v>
                                    </a:da>
                                    <a:a name="INVALID" type="XPath">
                                        <a:tst expr="
                                            (
                                                ( node:fallback(., 'ENABLED') = 'ENABLED' ) and
                                                ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuCmuErrorIsrUsed, 'false') = 'false' )
                                            )"
                                               true="The field McuGeneralConfiguration/McuCmuErrorIsrUsed must be set to 'true' when clock source failure notifications are enabled."/>
                                        <a:tst expr="
                                            (
                                                ( node:fallback(., 'ENABLED') = 'ENABLED' ) and
                                                ( not(node:exists(../../McuGeneralConfiguration/McuCmuNotification)) )
                                            )"
                                            true="The field McuGeneralConfiguration/McuCmuNotification must be enabled when clock source failure notifications are enabled."/>
                                    </a:a>
                                </v:var>

                                <!-- /** @implements McuClockSettingConfig_Object */ -->
                                <v:lst name="McuClockSettingConfig" type="MAP">
                                    <a:da name="MIN" value="1"/>

                                    <v:ctr name="McuClockSettingConfig" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the Clock settings of the MCU.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="REQUIRES-INDEX" value="true"/>
                                        <a:a name="UUID" value="ECUC:6d197fc7-452a-4168-af62-a0155509f250"/>

                                        <!-- /** @implements McuClockSettingId_Object */ -->
                                        <v:var name="McuClockSettingId" type="INTEGER">
                                            <a:a name="LABEL" value="Mcu Clock Setting Id" />
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        The Id of this McuClockSettingConfig to be used as argument for the API call Mcu_InitClock().
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                            <a:da name="DEFAULT" type="XPath"  expr="num:i( node:fallback( node:current()/../@index, num:i(0)))"/>
                                            <a:a name="UUID" value="ECUC:023d4661-0937-4487-8200-87d06f84bc34"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=255"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="text:uniq(node:fallback(../../*/McuClockSettingId, text:split('1 2 3')), node:fallback(., 0))"
                                                    false="Duplicated value, McuClockSettingId must be unique across McuClockSettingConf. Use the Calculate button to calculate correct default value."/>
                                                <a:tst expr="node:fallback(., 0) &lt; count(node:fallback(../../*, 1))"
                                                    false="Value out of range: must be in range 0 to N-1 (N is number of configured clock setting). Use the Calculate button to calculate correct default value."/>
                                            </a:da>
                                        </v:var>

                                        <v:ctr name="McuFIRC" type="IDENTIFIABLE">
                                            <a:a name="TAB" value="McuFIRC"/>
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN: <html>
                                                        This container contains the specific configuration of the MCU FIRC (Fast Internal RC Oscillator) configuration.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:dbd54538-e5f6-44d1-a4e1-fb7153ded442"/>

                                            <v:var name="McuFircUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if FIRC is under MCU control.<br />
                                                            If it is FALSE, then the MCU driver will not write the corresponding registers.<br />
                                                            The user must still set the values - they are used by the clock reference points.<br />
                                                            Note: Implementation Specific Parameter.<br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="FIRC under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-389801f12b54"/>
                                                <a:da name="DEFAULT" value="true"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuFircUnderMcuControl, 'true') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuFircUnderMcuControl must be set to 'true' when FIRC is under MCU control."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFircDivSel" type="ENUMERATION">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                                Indicates this chip's FIRC clock division factor.<br />
                                                                CONFIG_REG_GPR[FIRC_DIV_SEL] - This field provides the division value for the clock divider. <br />
                                                                This field is not support for S32K39x derivative.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FIRC_DIV_SEL"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:2dd7a89b-93fe-46ba-9a1b-2c4ed0222bb0"/>
                                                <a:da name="DEFAULT" value="Div_by_1"/>
                                                <a:da name="RANGE">
                                                    <a:v>Div_by_1</a:v>
                                                    <a:v>Div_by_2</a:v>
                                                    <a:v>Div_by_16</a:v>
                                                </a:da>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'Div_by_1') != 'Div_by_1' ) and
                                                            contains(ecu:get('MCU.FIRC.Divider.Supported'), 'false')
                                                        ) or
                                                        contains(ecu:get('MCU.FIRC.Divider.Supported'), 'true')" />
                                                </a:a>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'Div_by_1') != 'Div_by_1' ) and
                                                            contains(ecu:get('MCU.FIRC.Divider.Supported'), 'false')
                                                        )"
                                                        true="The field McuFircDivSel must be set to 'Div_by_1' on S32K39x because the feature is not supported."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFIRC_Frequency" type="FLOAT">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This is the frequency for the specific instance of the "McuClockReferencePoint" container. <br />
                                                            Value calculated for user info. It is given in Hz. <br />
                                                            <strong>Warning:</strong> This frequency should be chosen based on the value of CONFIG_REG_GPR[FIRC_DIV_SEL]
                                                            set at boot time. <br />
                                                            48MHz - CONFIG_REG_GPR[FIRC_DIV_SEL] = 3 <br />
                                                            24MHz - CONFIG_REG_GPR[FIRC_DIV_SEL] = 1 or CONFIG_REG_GPR[FIRC_DIV_SEL] = 0 <br />
                                                        3MHz - CONFIG_REG_GPR[FIRC_DIV_SEL] = 2 <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FIRC Frequency [Hz] (FIRC_CLK)"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:8cfbf2d0-3b15-e345-a0ec-bd7523287c2f"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="
                                                        num:f(
                                                            num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                            div
                                                            num:f
                                                            (   (   (num:f(number( node:fallback(../McuFircDivSel, 'Div_by_1') = 'Div_by_1'))) *
                                                                    (num:f(1))
                                                                ) +
                                                                (   (num:f(number( node:fallback(../McuFircDivSel, 'Div_by_1') = 'Div_by_2'))) *
                                                                    (num:f(2))
                                                                ) +
                                                                (   (num:f(number( node:fallback(../McuFircDivSel, 'Div_by_1') = 'Div_by_16'))) *
                                                                    (num:f(16))
                                                                )
                                                            )
                                                        )
                                                    "/>
                                                </a:da>
                                                <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            num:f( node:fallback(., 48000000) ) !=
                                                            (
                                                                num:f(
                                                                    num:f(
                                                                        num:f(ecu:get('MCU.FIRC.Limits.FIRC.Typical'))
                                                                    )
                                                                    div
                                                                    num:f
                                                                    (   (   (num:f(number( node:fallback(../McuFircDivSel, 'Div_by_1') = 'Div_by_1'))) *
                                                                            (num:f(1))
                                                                        ) +
                                                                        (   (num:f(number( node:fallback(../McuFircDivSel, 'Div_by_1') = 'Div_by_2'))) *
                                                                            (num:f(2))
                                                                        ) +
                                                                        (   (num:f(number( node:fallback(../McuFircDivSel, 'Div_by_1') = 'Div_by_16'))) *
                                                                            (num:f(16))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                            "
                                                        true="Please press the button to calculate the value automatically."/>
                                                </a:da>



                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=ecu:get('MCU.FIRC.Limits.FIRC.High')"/>
                                                    <a:tst expr="&gt;=ecu:get('MCU.FIRC.Limits.FIRC.Low')"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFircStandbyEnable" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            FIRC Standby Enable. <br />
                                                            This bit specifies whether FIRC is enabled or disabled in STANDBY mode. <br />
                                                            0 - FIRC is disabled in STANDBY. <br />
                                                            1 - FIRC is enabled in STANDBY. <br />
                                                            Configures the FIRC_STDBY_ENABLE[STDBY_EN] register field. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FIRC Standby Enable"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:a9e722a3-d4ae-4964-a6fd-71508b30dda0"/>
                                                <a:da name="DEFAULT" value="false"/>
                                            </v:var>



                                        </v:ctr>

                                        <v:ctr name="McuSIRC" type="IDENTIFIABLE">
                                            <a:a name="TAB" value="McuSIRC"/>
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN: <html>
                                                        This container contains the specific configuration of the MCU SIRC (Slow Internal RC Oscillator) configuration.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:dbd54538-e5f6-44d1-a4e1-fc1735dde482"/>

                                            <v:var name="McuSircUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if SIRC is under MCU control.<br />
                                                            If it is FALSE, then the MCU driver will not write the corresponding registers.<br />
                                                            The user must still set the values - they are used by the clock reference points.<br />
                                                            Note: Implementation Specific Parameter.<br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="SIRC under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-838901e12e54"/>
                                                <a:da name="DEFAULT" value="true"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuSircUnderMcuControl, 'true') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuSircUnderMcuControl must be set to 'true' when SIRC is under MCU control."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuSIRC_Frequency" type="FLOAT">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This is the frequency for the specific instance of the "McuClockReferencePoint" container. <br />
                                                            Value calculated for user info. It is given in Hz. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="SIRC Frequency [Hz] (SIRC_CLK)"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:8cf8d2d0-3b1f-e345-a0ec-bd7523287c2f"/>
                                                <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.SIRC.Limits.SIRC.Typical')"/>
                                                <a:da name="RANGE" type="XPath" expr="ecu:get('MCU.SIRC.Limits.SIRC.Typical')"/>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=ecu:get('MCU.SIRC.Limits.SIRC.Typical')"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuSircStandbyEnable" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            SIRC Standby Enable. <br />
                                                            This bit specifies whether SIRC is enabled or disabled in STANDBY mode. <br />
                                                            0 - SIRC is disabled in STANDBY. <br />
                                                            1 - SIRC is enabled in STANDBY. <br />
                                                            Configures the SIRC_MISCELLANEOUS_IN[STANDBY_ENABLE] register field. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="SIRC Standby Enable"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:a9e722a3-d4ae-4964-a6fd-712153b0dac0"/>
                                                <a:da name="DEFAULT" value="false"/>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuFXOSC" type="IDENTIFIABLE">
                                            <a:a name="TAB" value="McuFXOSC"/>
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN: <html>
                                                        This container contains the specific configuration of the MCU FXOSC (Fast External Crystal Oscillator) configuration.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:dbd54538-e5f6-44d1-a4e1-fa9140dec442"/>

                                            <!-- /** @implements McuFxoscUnderMcuControl_Object */ -->
                                            <v:var name="McuFxoscUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if FXOSC is under MCU control. <br />
                                                            If it is FALSE, then the MCU driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points. <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="FXOSC under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-838910f72e24"/>
                                                <a:da name="DEFAULT" value="true"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuFxoscUnderMcuControl, 'true') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuFxoscUnderMcuControl must be set to 'true' when FXOSC is under MCU control."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscPowerDownCtr" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Crystal oscillator power-down control: <br />
                                                            Checked   - Crystal oscillator is switched ON.<br />
                                                            Unchecked - Crystal oscillator is switched OFF.<br />
                                                            Configure the FXOSC_CTRL[OSCON] field.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC Enable"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:f51e1d81-a02a-4a58-9dfc-9dfdd9931709"/>
                                                <a:da name="DEFAULT" value="true"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(../McuFxoscMainComparator, 'true') = 'false' ) and
                                                            ( node:fallback(../McuFxoscBypass, 'false') = 'false' )
                                                        )"
                                                        true="FXOSC cannot be enabled when the comparator is disabled and the oscillator is not bypassed (i.e. McuFxoscMainComparator = 'false' and McuFxoscBypass = 'false')."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscBypass" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Crystal Oscillator Bypass.<br />
                                                            This bit specifies whether the oscillator should be bypassed or not.<br />
                                                            0 - Internal oscillator not bypassed.<br />
                                                            1 - Internal oscillator bypassed.<br />
                                                            Configure the FXOSC_CTRL[OSC_BYP] field.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC Bypass"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:a9e722a3-d4ae-4964-a6fd-71408a00cca0"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true'"/>
                                                </a:a>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true' ) and
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(../McuFxoscMainComparator, 'true') = 'true' )
                                                        )"
                                                        true="The oscillator cannot be bypassed while the comparator is enabled (i.e. McuFxoscMainComparator = 'true')."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscMainComparator" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Power down signal for main comparator.<br />
                                                            This field should be 1 when external crystal is used, and 0 when FXOSC is in Single-Input Bypass Mode (i.e. FXOSC_CTRL[OSC_BYP] = 1).<br />
                                                            0 - Comparator disabled.<br />
                                                            1 - Comparator enabled.<br />
                                                            Configure the FXOSC_CTRL[COMP_EN] field.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC Comparator"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:b687a5c1-440c-4f67-b3b6-1ec9c21f2933"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true'"/>
                                                </a:a>
                                                <a:da name="DEFAULT" value="true"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true' ) and
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(../McuFxoscBypass, 'false') = 'true' )
                                                        )"
                                                        true="The comparator cannot be enabled while bypassing the oscillator (i.e. McuFxoscBypass = 'true')."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscCounter" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            When the internal counter reaches this value, the oscillator is stable.<br />
                                                            These bits specify the "end of count value" to be used for comparison by the
                                                            oscillator stabilization counter after reset or whenever it is switched on.<br />
                                                            The counter is kept under reset if operating in Single-Input Bypass Mode (i.e. FXOSC_CTRL[OSC_BYP] = 1).<br />
                                                            EOCV value is always 1ms in Differential Bypass mode.<br />
                                                            <b>Note: </b>Please ensure that the internal counter is running for at least the stabilization
                                                            time of the crystal as given in the Data Sheet.<br />
                                                            To calculate EOCV from startup time (of crystal), use the following formula:<br />
                                                            EOCV (in decimal) = (Stabilization time in ns) / (4 * 128 * Time period of clock in ns)<br />
                                                            Configure the FXOSC_CTRL[EOCV] field.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC End of Count"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:6dce77cd-9e81-47a9-bcae-e80a6d08b951"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true'"/>
                                                </a:a>
                                                <a:da name="DEFAULT" value="49"/>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=255"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFxoscOverdriveProtection" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Crystal overdrive protection.<br />
                                                            This value decides the trans-conductance applied by the FXOSC amplifier,
                                                            and it will depend on crystal specification.<br />
                                                            FXOSC will not function when this field is 0 (0 trans-conductance). <br />
                                                            In Differential Bypass Mode, this field must be set to 1. <br />
                                                            Configure the FXOSC_CTRL[GM_SEL] field.<br />
                                                            <b>Note: </b>FXOSC will not function when this field is set to 0 (0 trans-conductance).<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="Crystal overdrive protection"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:5585ac3d-a175-422f-b801-502719445821"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true'"/>
                                                </a:a>
                                                <a:da name="DEFAULT" value="12"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true' ) and
                                                            (num:i(node:fallback(., 0)) = 0 ) and
                                                            ( node:fallback(../McuFxoscByPass, 'false') = 'false' )
                                                        )"
                                                        true="In Crystal mode (McuFxoscByPass = false) FXOSC will not function with zero transconductance (GM_SEL = 0000b)."
                                                    />
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true' ) and
                                                            (num:i(node:fallback(., 0)) != 0 ) and
                                                            ( node:fallback(../McuFxoscByPass, 'true') = 'true' )
                                                        )"
                                                        true="In Single-Input Bypass mode (McuFxoscByPass = true) write 0000b to this field."
                                                    />
                                                </a:a>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=15"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuFXOSC_Frequency" type="FLOAT">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This is the frequency for the specific instance of the "McuClockReferencePoint" container. <br />
                                                            Value calculated for user info. It is given in Hz. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="FXOSC Frequency (FXOSC_CLK)"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:8cfbf2d0-3b15-e345-a0ec-bd7182307c2f"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true')"/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuFxoscPowerDownCtr, 'true') = 'true')) *
                                                            num:f(node:fallback(../../../../McuCrystalFrequencyHz, num:i(40000000)))
                                                        )
                                                    "/>
                                                </a:da>
                                                <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 40000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 40000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true')) *
                                                                                num:f(node:fallback(../../../../McuCrystalFrequencyHz, num:i(40000000)))
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.FXOSC.Limits.FXOSC.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.FXOSC.Limits.FXOSC.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    <a:tst expr="
                                                            (
                                                                (node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true') and
                                                                (node:fallback(../McuFxoscBypass, 'false') = 'false') and
                                                                (node:fallback(../McuFxoscMainComparator, 'true' ) = 'true') and
                                                                (
                                                                    ( node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.FXOSC.Limits.DifferentialMode.High')) ) or
                                                                    ( node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.FXOSC.Limits.DifferentialMode.Low')) )
                                                                )
                                                            )
                                                        "
                                                        true="In crystal mode/differential bypass mode (i.e. McuFxoscBypass = 'false' and McuFxoscMainComparator = 'true'), the valid range is [8 ... 40] MHz"/>
                                                    <a:tst expr="
                                                            (
                                                                (node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true') and
                                                                (node:fallback(../McuFxoscBypass, 'false') = 'false') and
                                                                (node:fallback(../McuFxoscMainComparator, 'true') = 'false') and
                                                                (
                                                                    ( node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.FXOSC.Limits.SingleEndedMode.High')) ) or
                                                                    ( node:fallback(., num:i(40000000)) &lt; num:i(ecu:get('MCU.FXOSC.Limits.SingleEndedMode.Low')) )
                                                                )
                                                            )
                                                        "
                                                        true="In single-ended bypass mode (i.e. McuFxoscBypass = 'true' and McuFxoscMainComparator = 'false'), the valid range is [8 ... 40] MHz"/>
                                                </a:da>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=ecu:get('MCU.FXOSC.Limits.FXOSC.High')"/>
                                                    <a:tst expr="&gt;=((ecu:get('MCU.FXOSC.Limits.FXOSC.Low') * num:i(number(node:fallback(../McuFxoscPowerDownCtr, 'false') = 'true'))))"/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuSXOSC" type="IDENTIFIABLE">
                                            <a:a name="TAB" value="McuSXOSC"/>
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN: <html>
                                                        This container contains the specific configuration of the MCU SXOSC (External Slow Oscillator) configuration.
                                                        This node is not supported on S32K311/S32K310/S32M27x/S32K39x derivatives. <br />
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:dbd54af8-e5f6-44d1-a4e1-fa9140dec442"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.XOSC.List'), 'SXOSC')" />
                                            </a:a>

                                            <v:var name="McuSxoscUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if SXOSC is under MCU control.<br />
                                                            If it is FALSE, then the MCU driver will not write the corresponding registers.<br />
                                                            The user must still set the values - they are used by the clock reference points.<br />
                                                            This node is not supported on S32K311/S32K310/S32M27x/S32K39x derivatives. <br />
                                                            Note: Implementation Specific Parameter.<br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="SXOSC under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:9e613a64-57c3-4935-bb5f-838910f72e24"/>
                                                <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.SXOSC.Supported')"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'true') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuSxoscUnderMcuControl, 'true') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuSxoscUnderMcuControl must be set to 'true' when SXOSC is under MCU control."/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuSxoscCounter" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Configures the SXOSC_CTRL[EOCV] register field.<br />
                                                            When the internal counter reaches this value, the oscillator is stable.<br />
                                                            These bits specify the "end of count value" to be used for comparison by the
                                                            oscillator stabilization counter after reset or whenever it is switched on.<br />
                                                            <b>Note: </b>Please ensure that the internal counter is running for at least the stabilization
                                                            time of the crystal as given in the Data Sheet.<br />
                                                            To calculate EOCV from startup time (of crystal), use the following formula:<br />
                                                            EOCV (in decimal) = (Stabilization time in ns) / (4 * 128 * Time period of clock in ns)<br />
                                                            This node is not supported on S32K311/S32K310/S32M27x/S32K39x derivatives. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="SXOSC End of Count"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:6dce77cd-9e81-47a9-bcae-1a0a6d08b951"/>
                                                <a:da name="DEFAULT" value="125"/>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=255"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuSxoscPowerDownCtr" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN: <html>
                                                            Configure the SXOSC_CTRL[OSCON] register field.<br />
                                                            Crystal oscillator power-down control: <br />
                                                            Checked   - Crystal oscillator is switched ON.<br />
                                                            Unchecked - Crystal oscillator is switched OFF.<br />
                                                            This node is not supported on S32K311/S32K310/S32M27x/S32K39x derivatives. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="SXOSC Power-down Control"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:f51e1d81-a02a-4a58-9dfc-9dfdd0e31709"/>
                                                <a:da name="DEFAULT" value="false"/>
                                            </v:var>

                                            <v:var name="McuSXOSC_Frequency" type="FLOAT">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This is the frequency for the specific instance of the "McuClockReferencePoint" container. <br />
                                                            Value calculated for user info. It is given in Hz. <br />
                                                            This node is not supported on S32K311/S32K310/S32M27x/S32K39x derivatives. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="SXOSC Frequency [Hz] (SXOSC_CLK)"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:8cfbf2d0-3b15-e345-a0ec-bd618350d42f"/>
                                                <a:a name="EDITABLE" type="XPath">
                                                    <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuSxoscPowerDownCtr, 'false') = 'true')"/>
                                                </a:a>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuSxoscPowerDownCtr, 'false') = 'true')) *
                                                            num:f(node:fallback(../../../../McuSlowCrystalFrequencyHz, num:i(32768)))
                                                        )
                                                    "/>
                                                </a:da>
                                                <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../McuSxoscPowerDownCtr, 'false') = 'true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 32768) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 32768) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuSxoscPowerDownCtr, 'false') = 'true')) *
                                                                                num:f(node:fallback(../../../../McuSlowCrystalFrequencyHz, num:i(32768)))
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(32768)) &gt; num:i(ecu:get('MCU.SXOSC.Limits.SXOSC.High'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:i(32768)) &lt; num:i(ecu:get('MCU.SXOSC.Limits.SXOSC.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                </a:da>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=ecu:get('MCU.SXOSC.Limits.SXOSC.High')"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuCgm0SettingConfig" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container contains the configuration for the CGM_0 settings of the MCU.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:f6051177-3bc6-424c-a777-afbb5af002a9"/>

                                            <v:lst name="McuCgm0PcsConfig" type="MAP">
                                                <a:da name="MIN" type="XPath" expr="num:i(count(ecu:list('MCU.CGM0.CgmPcfs.List')))"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="count(./*) &gt; num:i(count(ecu:list('MCU.CGM0.CgmPcfs.List')))"
                                                        true="The number of McuCgm0PcsConfig more than maximum value allowed"/>
                                                </a:da>

                                                <v:ctr name="McuCgm0PcsConfig" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This register defines the rate of frequency change and initial change value for the
                                                                progressive system clock switching when switching the system clock source to or from
                                                                the PLL_PHI0_CLK on ramp-up and ramp-down, respectively. <br />
                                                                Note: Implementation Specific Container.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="REQUIRES-INDEX" value="true"/>
                                                    <a:a name="TAB" value="McuPcsConfig"/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS"  type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:0439e37c-4f3c-4035-8272-19533af39013"/>

                                                    <v:var name="McuClockPcfsUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if this clock PCFS is under mcu control <br />
                                                                    If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                    The user must still set the values - they are used by the clock reference points  <br />
                                                                    Note: Implementation Specific Parameter. <br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Mcu Clock PCFS under MCU control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:e425528b-1f63-453a-b0b2-ac018578243e"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:a name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    ( node:fallback(., 'true') = 'true' ) and
                                                                    (node:fallback(../McuPCS_Name, 'PCFS_8') = 'PCFS_8') and
                                                                    (( node:fallback(../../../../McuPll_0/McuPLLUnderMcuControl, 'true') = 'false' ) or
                                                                    ( node:fallback(../../../../McuPll_0/McuPll_Configuration/McuPllOdiv0_En, 'true') = 'false' ))
                                                                )"
                                                                true="The fields Mcu/McuModuleConfiguration/McuPLLUnderMcuControl and Mcu/McuModuleConfiguration/McuClockSettingConfig/McuPll_0/McuPll_Configuration/McuPllOdiv0_En  must be set to 'true' when PCFS is under MCU control."/>
                                                        </a:a>
                                                    </v:var>

                                                    <v:var name="McuPCS_Name" type="ENUMERATION">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the name of the PCFS module. <br />
                                                                    PCFS_x corresponds to clock_src_x. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CGM0 PCFS Name"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-9f41f01b9b9b"/>
                                                        <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.CGM0.CgmPcfs.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                        <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.CgmPcfs.List')"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="text:uniq(node:fallback(../../*/McuPCS_Name, ecu:list('MCU.CGM0.CgmPcfs.List')), node:fallback(., ecu:get('MCU.CGM0.CgmPcfs.Default')))"
                                                                false="Duplicated value, McuPCS_Name must be unique across McuCgm0PcsConfig."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuPCS_SourceFrequency" type="FLOAT">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the frequency of the input clock source (i.e. the frequency of clk_src_x). <br />
                                                                    Note: This field must not be manually modified. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Source Frequency (Hz)"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-9f410e26cd6a"/>
                                                        <a:da name="DEFAULT" type="XPath">
                                                            <a:tst expr="num:f
                                                                            (
                                                                                num:f
                                                                                    (
                                                                                        (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_2'), 'PCFS_') ) = num:i(8) ))) *
                                                                                            (num:f(node:fallback(../../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, 40000000)))
                                                                                        )
                                                                                    )
                                                                            )"/>
                                                        </a:da>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=2000000000"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="RANGE" type="XPath">
                                                            <a:tst expr="not(node:empty(node:fallback(., 80000000))) and
                                                                            (   num:f(node:fallback(., 0)) !=
                                                                                num:f
                                                                                    (
                                                                                        num:f
                                                                                            (
                                                                                                (   (num:f(number( num:i( substring-after(node:fallback(../McuPCS_Name, 'PCFS_2'), 'PCFS_') ) = num:i(8) ))) *
                                                                                                    (num:f(node:fallback(../../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, 40000000)))
                                                                                                )
                                                                                            )
                                                                                    )
                                                                            )"
                                                            true="Please press the button to calculate the value automatically."/>
                                                        </a:a>
                                                    </v:var>

                                                    <v:var name="McuPCS_MaxAllowableDynamicIDD" type="FLOAT">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This value defines the maximum allowable change in current (IDD) per microsecond. <br />
                                                                    It depends on the application and on the power supply (how much current can it deliver rapidly). <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Max Allowable Dynamic IDD (mA/&#181;s)"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:570c5ac3-80ce-4452-b846-7b253b15bc1f"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=150"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="INVALID" type="XPath">
                                                            <a:tst expr="(( num:f(node:fallback(., 0)) != num:f(0) ) and ( num:f(node:fallback(../McuPCS_SourceFrequency, 0)) = num:f(0) ))"
                                                                   true="This field cannot be modified as long as the source frequency (i.e. 'McuPCS_SourceFrequency') is equal to 0."/>
                                                        </a:a>
                                                    </v:var>
                                                </v:ctr>
                                            </v:lst>

                                            <v:var name="McuPCSStepDuration" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            The value provided specifies the number of microseconds per step (i.e. the duration of a step, given in microseconds). <br />
                                                            If more time is needed for the power supply to come to full load, this value should be increased. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PCS Step Duration (&#181;s)"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56f0a853-6d6e-4bd6-89f7-db5c3b005883"/>
                                                <a:da name="DEFAULT" value="1"/>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=100"/>
                                                    <a:tst expr="&gt;=1"/>
                                                </a:a>
                                            </v:var>

                                            <v:var name="McuPCSSwitchDuration" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            MC_CGM_PCFS_SDUR register configuration. <br />
                                                            The value provided defines the duration of one PCS clock switch step in terms of FIRC cycles. <br />
                                                            Note: This field must not be manually modified. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PCS Switch Duration"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:56f0a853-6d6e-4bd6-89f7-db5c3b91b883"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <!-- Divide by 10^6 to transform Hz to MHz -->
                                                    <a:tst expr="
                                                            num:i(
                                                                num:i( num:f(node:fallback(../../McuFIRC/McuFIRC_Frequency, 48000000)) div num:f(1000000) ) *
                                                                num:i( node:fallback(../McuPCSStepDuration, 1) )
                                                            )"/>
                                                </a:da>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=65535"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:a>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 48) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 48) ) !=
                                                                (
                                                                    num:i(
                                                                        num:i( num:f(node:fallback(../../McuFIRC/McuFIRC_Frequency, 48000000)) div num:f(1000000) ) *
                                                                        num:i( node:fallback(../McuPCSStepDuration, 1) )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    "
                                                    true="Please press the button to calculate the value automatically."/>
                                                </a:a>
                                            </v:var>

                                            <v:ctr name="McuCgm0ClockMux0" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks for
                                                            CORE_CLK, AIPS_PLAT_CLK, AIPS_SLOW_CLK, HSE_CLK, DCM_CLK, LBIST_CLK and QSPI_MEM_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux0"/>
                                                <a:a name="UUID" value="ECUC:a40689ad-adde-4328-afe7-4e81cd434d50"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e421418b-1f63-453a-b0b2-ac018378243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'true') = 'false') and
                                                                        ((node:fallback(../../../McuPll_0/McuPLLUnderMcuControl, 'true') = 'true') or (node:fallback(../../../McuFXOSC/McuFxoscUnderMcuControl, 'true') = 'true'))
                                                                     )"
                                                            true="CORE_CLK must be under Mcu control if it's clock sources are under Mcu control (e.g: McuPll_0/McuPLLUnderMcuControl, McuFXOSC/McuFxoscUnderMcuControl)."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux0_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_0_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_0_CSC[SELCTL] - This field selects the source clock for Clock Mux 0. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f048e84c-73b9-4b73-8324-3cfb7a43456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux0.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux0.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FIRC_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'true') = 'true')
                                                                     )"
                                                            true="If 'FIRC_CLK' is selected as source clock, PLL must be disabled."/>

                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI0_CLK' is selected as source clock, McuPllOdiv0_En must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux0Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for CORE_CLK. <br />
                                                                Sets the MC_CGM_MUX_0_DC_0[DE] field register. <br />
                                                                0 - Reserved. <br />
                                                                1 - Divider is enabled. <br />
                                                                Divider 0 is always enabled, the CORE_CLK clock is enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider0 Enable (CORE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9bb1-f7b1-462f-87e0-d6259d63bf49"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_MUX_0_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_0_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor0 (CORE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b648ae12-7141-46e7-b67a-791ee873400e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div0Trigger" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Trigger Divider type selection: <br />
                                                                    - Immediate divider update. <br />
                                                                    - Common trigger divider update. <br />
                                                                Configure the MUX_0_DIV_TRIG_CTRL[TCTL] field register. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Trigger Divider 0 Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:27d7a89b-937e-48ba-9a1b-2c4ed0232aa0"/>
                                                    <a:da name="DEFAULT" value="COMMON_TRIGGER_DIVIDER_UPDATE"/>
                                                    <a:a name="EDITABLE" value="true"/>
                                                    <a:da name="RANGE">
                                                        <a:v>IMMEDIATE_DIVIDER_UPDATE</a:v>
                                                        <a:v>COMMON_TRIGGER_DIVIDER_UPDATE</a:v>
                                                    </a:da>
                                                    <a:a name="WARNING" type="XPath">
                                                    <a:tst expr="
                                                    num:f(number(node:fallback(.,'IMMEDIATE_DIVIDER_UPDATE') = 'IMMEDIATE_DIVIDER_UPDATE'))
                                                    "
                                                    true ="The trigger divider type should be 'COMMON_TRIGGER_DIVIDER_UPDATE' to avoid some system clock frequency limitations "/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        node:when(
                                                            (contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div0')),
                                                            (
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div1Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div2Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div2')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div3Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div3')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div4Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div4')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div5Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div5')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div6Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div6')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div7Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div7')))
                                                            ),
                                                            true()
                                                        )"
                                                    false ="The other trigger dividers must be have the same value because all of them are part of the same divider trigger group."/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container. <br />
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                System clock frequency selected must adhere to the same clock divider ratios shown in Clocking use case examples. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider0 Frequency (CORE_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf2d0-3b15-4340-90ec-bd7353308c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux0Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 48000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 48000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux0Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div0_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.SysClock.Limits.CORE_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.CORE_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div1_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for AIPS_PLAT_CLK. <br />
                                                                Sets the MC_CGM_MUX_0_DC_1[DE] field register. <br />
                                                                0 - Reserved <br />
                                                                1 - Divider is enabled <br />
                                                                Divider 1 is always enabled, the AIPS_PLAT_CLK clock is enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider1 Enable (AIPS_PLAT_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9bb1-f7b1-0b2f-87e0-d6259d63bf49"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0Div1_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_MUX_0_DC_1[DIV] field register. <br />
                                                                MC_CGM_MUX_0_DC_1[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div1_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor1 (AIPS_PLAT_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6a9ae12-7141-46e7-b67a-791ee873400e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div1_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div1Trigger" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Trigger Divider type selection: <br />
                                                                    - Immediate divider update. <br />
                                                                    - Common trigger divider update. <br />
                                                                Configure the MUX_0_DIV_TRIG_CTRL[TCTL] field register. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Trigger Divider 1 Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2ed7a89b-99fe-46ba-9a1b-2c4ed4237aa0"/>
                                                    <a:da name="DEFAULT" value="COMMON_TRIGGER_DIVIDER_UPDATE"/>
                                                    <a:a name="EDITABLE" value="true"/>
                                                    <a:da name="RANGE">
                                                        <a:v>IMMEDIATE_DIVIDER_UPDATE</a:v>
                                                        <a:v>COMMON_TRIGGER_DIVIDER_UPDATE</a:v>
                                                    </a:da>
                                                    <a:a name="WARNING" type="XPath">
                                                    <a:tst expr="
                                                    num:f(number(node:fallback(.,'IMMEDIATE_DIVIDER_UPDATE') = 'IMMEDIATE_DIVIDER_UPDATE'))
                                                    "
                                                    true ="The trigger divider type should be 'COMMON_TRIGGER_DIVIDER_UPDATE' to avoid some system clock frequency limitations "/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        node:when(
                                                            (contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div1')),
                                                            (
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div2Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div2')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div3Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div3')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div4Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div4')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div5Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div5')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div6Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div6')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div7Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div7')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div0Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div0')))
                                                            ),
                                                            true()
                                                        )"
                                                    false ="The other trigger dividers must be have the same value because all of them are part of the same divider trigger group."/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider1_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider1 Frequency (AIPS_PLAT_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8c0bf2d0-3b15-4340-90ec-bd7353308c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div1_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux0Div1_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div1_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux0Div1_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div1_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.SysClock.Limits.AIPS_PLAT_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                        <a:tst expr="
                                                            (
                                                                ( num:f(node:fallback(., num:f(40000000))) &gt; num:f(node:fallback(../McuClockMux0Divider0_Frequency, num:f(20000000))) )
                                                            )
                                                            "
                                                            true="The frequency of AIPS_PLAT_CLK must be less than or equal to the frequency of CORE_CLK (McuClockMux0Divider0_Frequency)."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.AIPS_PLAT_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div2_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for AIPS_SLOW_CLK. <br />
                                                                Sets the MC_CGM_MUX_0_DC_2[DE] field register. <br />
                                                                0 - Reserved <br />
                                                                1 - Divider is enabled <br />
                                                                Divider 2 is always enabled, the AIPS_SLOW_CLK clock is enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider2 Enable (AIPS_SLOW_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9bb1-f7b1-0b2f-87e0-d6259d86bf49"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0Div2_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_MUX_0_DC_2[DIV] field register. <br />
                                                                MC_CGM_MUX_0_DC_2[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div2_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor2 (AIPS_SLOW_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6a9af12-7141-46e7-b68a-791ee873400e"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div2_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=15"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div2Trigger" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Trigger Divider type selection: <br />
                                                                    - Immediate divider update. <br />
                                                                    - Common trigger divider update. <br />
                                                                Configure the MUX_0_DIV_TRIG_CTRL[TCTL] field register. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Trigger Divider 2 Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2ed7a89b-93fe-47ba-9a7b-2c4ed0232aa0"/>
                                                    <a:da name="DEFAULT" value="COMMON_TRIGGER_DIVIDER_UPDATE"/>
                                                    <a:a name="EDITABLE" value="true"/>
                                                    <a:da name="RANGE">
                                                        <a:v>IMMEDIATE_DIVIDER_UPDATE</a:v>
                                                        <a:v>COMMON_TRIGGER_DIVIDER_UPDATE</a:v>
                                                    </a:da>
                                                    <a:a name="WARNING" type="XPath">
                                                    <a:tst expr="
                                                    num:f(number(node:fallback(.,'IMMEDIATE_DIVIDER_UPDATE') = 'IMMEDIATE_DIVIDER_UPDATE'))
                                                    "
                                                    true ="The trigger divider type should be 'COMMON_TRIGGER_DIVIDER_UPDATE' to avoid some system clock frequency limitations "/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        node:when(
                                                            (contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div2')),
                                                            (
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div1Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div3Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div3')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div4Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div4')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div5Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div5')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div6Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div6')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div7Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div7')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div0Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div0')))
                                                            ),
                                                            true()
                                                        )"
                                                    false ="The other trigger dividers must be have the same value because all of them are part of the same divider trigger group."/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider2_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider2 Frequency (AIPS_SLOW_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8c0bf2d0-3b15-4340-90ec-bd7322308c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div2_En, 'true') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux0Div2_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div2_Divisor, num:f(1)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux0Div2_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div2_Divisor, num:f(1)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.SysClock.Limits.AIPS_SLOW_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    ( num:f(node:fallback(., num:f(40000000))) &gt; num:f(node:fallback(../McuClockMux0Divider1_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( node:fallback(../McuClkMux0Div1_En, 'true') = 'true' )
                                                                )
                                                            )
                                                            "
                                                            true="The frequency of AIPS_SLOW_CLK must be less than or equal to the frequency of AIPS_PLAT_CLK (McuClockMux0Divider1_Frequency)."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.AIPS_SLOW_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div3_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for HSE_CLK. <br />
                                                                Sets the MC_CGM_MUX_0_DC_3[DE] field register. <br />
                                                                0 - Reserved <br />
                                                                1 - Divider is enabled <br />
                                                                Divider 3 is always enabled, the HSE_CLK clock is enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider3 Enable (HSE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3efeb1-f7b1-0b2f-87e0-d6259d63bf49"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0Div3_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_MUX_0_DC_3[DIV] field register. <br />
                                                                MC_CGM_MUX_0_DC_3[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div3_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor3 (HSE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6a9ae12-7141-46e7-b89a-791ee873400e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div3_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div3Trigger" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Trigger Divider type selection: <br />
                                                                    - Immediate divider update. <br />
                                                                    - Common trigger divider update. <br />
                                                                Configure the MUX_0_DIV_TRIG_CTRL[TCTL] field register. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Trigger Divider 3 Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2ed7a89b-94fe-47ba-9a1b-2c4ed0432aa0"/>
                                                    <a:da name="DEFAULT" value="COMMON_TRIGGER_DIVIDER_UPDATE"/>
                                                    <a:a name="EDITABLE" value="true"/>
                                                    <a:da name="RANGE">
                                                        <a:v>IMMEDIATE_DIVIDER_UPDATE</a:v>
                                                        <a:v>COMMON_TRIGGER_DIVIDER_UPDATE</a:v>
                                                    </a:da>
                                                    <a:a name="WARNING" type="XPath">
                                                    <a:tst expr="
                                                    num:f(number(node:fallback(.,'IMMEDIATE_DIVIDER_UPDATE') = 'IMMEDIATE_DIVIDER_UPDATE'))
                                                    "
                                                    true ="The trigger divider type should be 'COMMON_TRIGGER_DIVIDER_UPDATE' to avoid some system clock frequency limitations "/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        node:when(
                                                            (contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div3')),
                                                            (
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div1Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div2Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div2')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div4Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div4')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div5Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div5')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div6Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div6')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div7Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div7')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div0Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div0')))
                                                            ),
                                                            true()
                                                        )"
                                                    false ="The other trigger dividers must be have the same value because all of them are part of the same divider trigger group."/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider3_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider3 Frequency (HSE_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8c0bf2d0-3b15-4340-90ec-ac7353308c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div3_En, 'true') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux0Div3_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div3_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux0Div3_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:i(48000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div3_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.SysClock.Limits.HSE_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>

                                                            <a:tst expr="
                                                            (
                                                                (
                                                                    ( num:f(120000000) &lt; num:f(node:fallback(../McuClockMux0Divider0_Frequency, num:i(20000000))) )
                                                                    and
                                                                    ( node:fallback(., num:f(40000000)) != num:f(node:fallback(../McuClockMux0Divider0_Frequency, num:f(20000000))) div 2 )
                                                                    and
                                                                    ( node:fallback(../McuClkMux0Div3_En, 'true') = 'true' )
                                                                )
                                                            )
                                                            "
                                                            true="When CORE_CLK (McuClockMux0Divider0_Frequency) is higher than 120 MHz, HSE_CLK must be half of the CORE_CLK (McuClockMux0Divider0_Frequency)."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.HSE_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                        (
                                                            (
                                                                (
                                                                    ( node:fallback(., num:f(40000000)) != num:f(node:fallback(../McuClockMux0Divider2_Frequency, num:f(20000000))) * 2 )
                                                                    and
                                                                    ( node:fallback(., num:f(40000000)) != num:f(node:fallback(../McuClockMux0Divider2_Frequency, num:f(20000000))) * 4 )
                                                                )
                                                                and
                                                                ( node:fallback(../McuClkMux0Div3_En, 'true') = 'true' )
                                                            )
                                                        )
                                                        "
                                                        true="Ratio between HSE IPS interface clock (AIPS_SLOW_CLK) and HSE module clock (HSE_CLK) must be 1:2 or 1:4 base on status of bit field HSE_CLK_MODE_OPTION  of register DCM_GPR:DCMROF21. Detailed information can be found in UM"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div4_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for DCM_CLK. <br />
                                                                Sets the MC_CGM_MUX_0_DC_4[DE] field register. <br />
                                                                0 - Reserved <br />
                                                                1 - Divider is enabled <br />
                                                                Divider 4 is always enabled, the DCM_CLK clock is enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider4 Enable (DCM_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9bb1-f7b1-0b2f-87e0-d6259d82bf49"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="READONLY" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux0Div4_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_MUX_0_DC_4[DIV] field register. <br />
                                                                MC_CGM_MUX_0_DC_4[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div4_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor4 (DCM_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6a9ae12-7141-46e7-b67a-791eeac3400e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div4_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div4Trigger" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Trigger Divider type selection: <br />
                                                                    - Immediate divider update. <br />
                                                                    - Common trigger divider update. <br />
                                                                Configure the MUX_0_DIV_TRIG_CTRL[TCTL] field register. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Trigger Divider 4 Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2ed9a89b-99fe-49ba-9a1b-2c4ed0232aa0"/>
                                                    <a:da name="DEFAULT" value="COMMON_TRIGGER_DIVIDER_UPDATE"/>
                                                    <a:a name="EDITABLE" value="true"/>
                                                    <a:da name="RANGE">
                                                        <a:v>IMMEDIATE_DIVIDER_UPDATE</a:v>
                                                        <a:v>COMMON_TRIGGER_DIVIDER_UPDATE</a:v>
                                                    </a:da>
                                                    <a:a name="WARNING" type="XPath">
                                                    <a:tst expr="
                                                    num:f(number(node:fallback(.,'IMMEDIATE_DIVIDER_UPDATE') = 'IMMEDIATE_DIVIDER_UPDATE'))
                                                    "
                                                    true ="The trigger divider type should be 'COMMON_TRIGGER_DIVIDER_UPDATE' to avoid some system clock frequency limitations "/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        node:when(
                                                            (contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div4')),
                                                            (
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div1Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div2Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div2')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div3Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div3')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div5Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div5')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div6Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div6')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div7Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div7')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div0Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div0')))
                                                            ),
                                                            true()
                                                        )"
                                                    false ="The other trigger dividers must be have the same value because all of them are part of the same divider trigger group."/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider4_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider4 Frequency (DCM_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8c0bfba0-3b15-4340-90ec-bd7353308c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div4_En, 'true') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux0Div4_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div4_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux0Div4_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div4_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.SysClock.Limits.DCM_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.DCM_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div5_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable.<br />
                                                                This field enables the Clock Divider for LBIST_CLK.<br />
                                                                Sets the MC_CGM_MUX_0_DC_5[DE] field register.<br />
                                                                0 - Reserved. <br />
                                                                1 - Divider is enabled. <br />
                                                                Divider 5 is always enabled, the LBIST_CLK clock is enabled.<br />
                                                                This node is not supported on S32K312 and S32K311/S32K310/S32M27x derivatives.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider5 Enable (LBIST_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b328bb1-f7b1-0b2f-87e0-d6259d63bf49"/>
                                                    <a:da name="DEFAULT"  type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div5')" />
                                                    </a:da>
                                                    <a:a name="READONLY" value="true"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div5')" />
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div5_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_MUX_0_DC_5[DIV] field register. <br />
                                                                MC_CGM_MUX_0_DC_5[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div5_En is true. <br />
                                                                This node is not supported on S32K312 and S32K311/S32K310/S32M27x derivatives.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor5 (LBIST_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6a9ae12-7141-46e7-b67a-791e2273400e"/>
                                                    <a:da name="DEFAULT" value="3"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div5')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div5_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div5Trigger" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Trigger Divider type selection: <br />
                                                                    - Immediate divider update. <br />
                                                                    - Common trigger divider update. <br />
                                                                Configure the MUX_0_DIV_TRIG_CTRL[TCTL] field register. <br />
                                                                This node is not supported on S32K312 and S32K311/S32K310/S32M27x derivatives.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Trigger Divider 5 Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2ed7a89b-93fe-77ba-9a1b-2c4ed0772aa0"/>
                                                    <a:da name="DEFAULT" value="COMMON_TRIGGER_DIVIDER_UPDATE"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div5')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" value="true"/>
                                                    <a:da name="RANGE">
                                                        <a:v>IMMEDIATE_DIVIDER_UPDATE</a:v>
                                                        <a:v>COMMON_TRIGGER_DIVIDER_UPDATE</a:v>
                                                    </a:da>
                                                    <a:a name="WARNING" type="XPath">
                                                    <a:tst expr="
                                                    num:f(number(node:fallback(.,'IMMEDIATE_DIVIDER_UPDATE') = 'IMMEDIATE_DIVIDER_UPDATE'))
                                                    "
                                                    true ="The trigger divider type should be 'COMMON_TRIGGER_DIVIDER_UPDATE' to avoid some system clock frequency limitations "/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        node:when(
                                                            (contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div5')),
                                                            (
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div1Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div2Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div2')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div3Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div3')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div4Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div4')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div6Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div6')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div7Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div7')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div0Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div0')))
                                                            ),
                                                            true()
                                                        )"
                                                    false ="The other trigger dividers must be have the same value because all of them are part of the same divider trigger group."/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider5_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is not supported on S32K312 and S32K311/S32K310/S32M27x derivatives.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider5 Frequency (LBIST_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8c0bf2d0-3b15-4340-90ec-bd7304308c2f"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div5')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div5_En, 'true') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux0Div5_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div5_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux0Div5_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div5_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.SysClock.Limits.LBIST_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.LBIST_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div6_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for QSPI_MEM_CLK. <br />
                                                                Sets the MC_CGM_MUX_0_DC_6[DE] field register. <br />
                                                                0 - Reserved <br />
                                                                1 - Divider is enabled <br />
                                                                Divider 6 is always enabled, the QSPI_MEM_CLK clock is enabled. <br />
                                                                This node is not supported on S32K312 and S32K311/S32K310/S32M27x derivatives.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider6 Enable (QSPI_MEM_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9bb1-f7b1-0b2f-87e0-d62525a3bf49"/>
                                                    <a:da name="DEFAULT"  type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div6')" />
                                                    </a:da>
                                                    <a:a name="READONLY" value="true"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div6')" />
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div6_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_MUX_0_DC_6[DIV] field register. <br />
                                                                MC_CGM_MUX_0_DC_6[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div6_En is true. <br />
                                                                This node is not supported on S32K312 and S32K311/S32K310/S32M27x derivatives.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor6 (QSPI_MEM_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6a9ae12-7141-4a27-b67a-791ee873400e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div6')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div6_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div6Trigger" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Trigger Divider type selection: <br />
                                                                    - Immediate divider update. <br />
                                                                    - Common trigger divider update. <br />
                                                                Configure the MUX_0_DIV_TRIG_CTRL[TCTL] field register. <br />
                                                                This node is not supported on S32K312 and S32K311/S32K310/S32M27x derivatives.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Trigger Divider 6 Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2ed7a99b-93fe-46ba-9a1b-2c4ed0222aa0"/>
                                                    <a:da name="DEFAULT" value="COMMON_TRIGGER_DIVIDER_UPDATE"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div6')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" value="true"/>
                                                    <a:da name="RANGE">
                                                        <a:v>IMMEDIATE_DIVIDER_UPDATE</a:v>
                                                        <a:v>COMMON_TRIGGER_DIVIDER_UPDATE</a:v>
                                                    </a:da>
                                                    <a:a name="WARNING" type="XPath">
                                                    <a:tst expr="
                                                    num:f(number(node:fallback(.,'IMMEDIATE_DIVIDER_UPDATE') = 'IMMEDIATE_DIVIDER_UPDATE'))
                                                    "
                                                    true ="The trigger divider type should be 'COMMON_TRIGGER_DIVIDER_UPDATE' to avoid some system clock frequency limitations "/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        node:when(
                                                            (contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div6')),
                                                            (
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div1Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div2Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div2')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div3Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div3')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div4Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div4')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div5Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div5')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div7Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div7')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div0Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div0')))
                                                            ),
                                                            true()
                                                        )"
                                                    false ="The other trigger dividers must be have the same value because all of them are part of the same divider trigger group."/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider6_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is not supported on S32K312 and S32K311/S32K310/S32M27x derivatives.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider6 Frequency (QSPI_MEM_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8c0c02d0-3b15-4340-90ec-bd7353308c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div6_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div6')" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux0Div6_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div6_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux0Div6_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div6_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.SysClock.Limits.QSPI_MEM_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>

                                                            <a:tst expr="
                                                            (
                                                                (
                                                                    ( node:fallback(., num:f(40000000)) = num:f(0))
                                                                    and
                                                                    ( node:fallback(../McuClkMux0Div6_En, 'true') = 'false' )
                                                                )
                                                                or
                                                                (
                                                                    (
                                                                        ( node:fallback(., num:f(40000000)) = num:f(node:fallback(../McuClockMux0Divider0_Frequency, num:f(20000000))) div 1 )
                                                                        and
                                                                        ( node:fallback(../McuClkMux0Div6_En, 'true') = 'true' )
                                                                        and
                                                                        not(contains(node:value(as:modconf('Resource')[1]/ResourceGeneral/ResourceSubderivative), 's32k39'))
                                                                    )
                                                                    or
                                                                    (
                                                                        ( node:fallback(., num:f(40000000)) = num:f(node:fallback(../McuClockMux0Divider7_Frequency, num:f(20000000))) div 1 )
                                                                        and
                                                                        ( node:fallback(../McuClkMux0Div7_En, 'true') = 'true' )
                                                                        and
                                                                        contains(node:value(as:modconf('Resource')[1]/ResourceGeneral/ResourceSubderivative), 's32k39')
                                                                    )

                                                                )
                                                                or
                                                                (
                                                                    ( num:f(160000000) = num:f(node:fallback(../McuClockMux0Divider6_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( num:f(80000000) = num:f(node:fallback(../McuClockMux0Divider0_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( num:f(80000000) = num:f(node:fallback(../McuClockMux0Divider1_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( num:f(40000000) = num:f(node:fallback(../McuClockMux0Divider2_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( num:f(80000000) = num:f(node:fallback(../McuClockMux0Divider3_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( num:f(40000000) = num:f(node:fallback(../McuClockMux0Divider4_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( num:f(40000000) = num:f(node:fallback(../McuClockMux0Divider5_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( num:f(960000000) = num:f(node:fallback(./../../../McuPll_0/McuPll_Parameter/PLL_VCO_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( num:f(160000000) = num:f(node:fallback(./../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(20000000))) )
                                                                    and
                                                                    ( (num:f(160000000) = num:f(node:fallback(./../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(20000000)))) or (num:f(240000000) = num:f(node:fallback(./../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(20000000)))) )
                                                                    and
                                                                    ( (num:f(120000000) = num:f(node:fallback(./../../McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, num:f(20000000)))) or (num:f(80000000) = num:f(node:fallback(./../../McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, num:f(20000000)))) )
                                                                    and
                                                                    ( (num:f(120000000) = num:f(node:fallback(./../../McuCgm0ClockMux11/McuClockMux11Divider0_Frequency, num:f(20000000)))) or (num:f(80000000) = num:f(node:fallback(./../../McuCgm0ClockMux11/McuClockMux11Divider0_Frequency, num:f(20000000)))) or (num:f(48000000) = num:f(node:fallback(./../../McuCgm0ClockMux11/McuClockMux11Divider0_Frequency, num:f(20000000)))) or (num:f(40000000) = num:f(node:fallback(./../../McuCgm0ClockMux11/McuClockMux11Divider0_Frequency, num:f(20000000)))) )
                                                                    and
                                                                    ( num:f(2) = num:f(node:fallback(./../../../McuPll_0/McuPll_Configuration/McuPllDvOdiv2, num:f(6))) )
                                                                    and
                                                                    ( num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) )
                                                                    and
                                                                    ( num:f(number(node:fallback(./../../McuCgm0ClockMux10/McuClkMux10_Source,'FIRC_CLK')='PLL_PHI1_CLK')) )
                                                                    and
                                                                    ( num:f(number(node:fallback(./../../McuCgm0ClockMux11/McuClkMux11_Source,'FIRC_CLK')='PLL_PHI1_CLK')) )
                                                                )
                                                                or (num:i(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div6') = num:i(0)))
                                                            )
                                                            "
                                                            false="QSPI_MEM_CLK is always equal to CORE_CLK(S32K3XX) / CM7_CORE_CLK(S32K39x) except in 1:1 mode (see Option F - Operation in 1:1 mode with CORE_CLK and AXBS_CLK at same speed)."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.QSPI_MEM_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div7_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Divider enable. <br />
                                                                This field enables the Clock Divider for CM7_CORE_CLK. <br />
                                                                Sets the MC_CGM_MUX_0_DC_7[DE] field register. <br />
                                                                0 - Reserved <br />
                                                                1 - Divider is enabled <br />
                                                                Divider 7 is always enabled, the CM7_CORE_CLK clock is enabled. <br />
                                                                This node is supported on S32K39x and S32K388 derivative only.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divider7 Enable (CM7_CORE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c957ca75-77c6-4dfa-a119-e241a143f4e2"/>
                                                    <a:da name="DEFAULT"  type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div7')" />
                                                    </a:da>
                                                    <a:a name="READONLY" value="true"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div7')" />
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div7_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 0 Division value. <br />
                                                                Sets the MC_CGM_MUX_0_DC_7[DIV] field register. <br />
                                                                MC_CGM_MUX_0_DC_7[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux0Div7_En is true. <br />
                                                                This node is supported on S32K39x and S32K388 derivative only.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux0 Divisor7 (CM7_CORE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:51f1bcd7-2881-441f-81fe-94a5e9ac1b91"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div7')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux0Div7_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClkMux0Div7Trigger" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Trigger Divider type selection: <br />
                                                                    - Immediate divider update. <br />
                                                                    - Common trigger divider update. <br />
                                                                Configure the MUX_0_DIV_TRIG_CTRL[TCTL] field register. <br />
                                                                This node is supported on S32K39x and S32K388 derivative only.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Trigger Divider 7 Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:14d196fe-f90e-42bd-a338-d071e85ffcf9"/>
                                                    <a:da name="DEFAULT" value="COMMON_TRIGGER_DIVIDER_UPDATE"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div7')" />
                                                    </a:a>
                                                    <a:a name="EDITABLE" value="true"/>
                                                    <a:da name="RANGE">
                                                        <a:v>IMMEDIATE_DIVIDER_UPDATE</a:v>
                                                        <a:v>COMMON_TRIGGER_DIVIDER_UPDATE</a:v>
                                                    </a:da>
                                                    <a:a name="WARNING" type="XPath">
                                                    <a:tst expr="
                                                    num:f(number(node:fallback(.,'IMMEDIATE_DIVIDER_UPDATE') = 'IMMEDIATE_DIVIDER_UPDATE'))
                                                    "
                                                    true ="The trigger divider type should be 'COMMON_TRIGGER_DIVIDER_UPDATE' to avoid some system clock frequency limitations "/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        node:when(
                                                            (contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div7')),
                                                            (
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div1Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div1')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div2Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div2')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div3Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div3')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div4Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div4')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div5Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div5')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div6Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div6')))and
                                                            (( node:fallback(., 'COMMON_TRIGGER_DIVIDER_UPDATE') = node:fallback(./../McuClkMux0Div0Trigger,'COMMON_TRIGGER_DIVIDER_UPDATE'))
                                                            or not(contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'),'Div0')))
                                                            ),
                                                            true()
                                                        )"
                                                    false ="The other trigger dividers must be have the same value because all of them are part of the same divider trigger group."/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux0Divider7_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is supported on S32K39x and S32K388 derivative only.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux0 Divider7 Frequency (CM7_CORE_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:4448e4b3-e6de-4725-bef8-7dd51f98dff5"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux0Div7_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div7')" />
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux0Div7_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux0Div7_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux0Div7_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux0_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux0Div7_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.SysClock.Limits.CM7_CORE_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                        <a:tst expr="(node:fallback(., num:f(48000000))  &lt; num:f(node:fallback(../McuClockMux0Divider0_Frequency, num:f(48000000)))) and
                                                                     contains(ecu:get('MCU.CGM0.ClockMux0.Dividers.List'), 'Div7')"
                                                            true="CM7_CORE_CLK must be always greater than or equal to CORE_CLK."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.SysClock.Limits.CM7_CORE_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux1" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for STM0_CLK.
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux1"/>
                                                <a:a name="UUID" value="ECUC:a40639ad-adde-4328-afe7-4e81cb434d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e429418b-1f63-463a-b4b2-cc018778243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux1_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_1_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_1_CSC[SELCTL] - This field selects the source clock for Clock Mux 1. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux1 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f048e84c-73b9-4b73-8324-3cfb7ab5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux1.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux1.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'AIPS_PLAT_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div1_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'AIPS_PLAT_CLK' is selected as source clock, McuClkMux0Div1_En must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux1Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Divider enable. <br />
                                                                This field enables the Clock Divider for STM0_CLK. <br />
                                                                Sets the MC_CGM_MUX_1_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_1_DC_0[DIV] field is ignored and the STM0_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux1 Divider0 Enable (STM0_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e9ba1-f7b1-469f-87e0-d6259163bf49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux1Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 1 Division value. <br />
                                                                Sets the MC_CGM_MUX_1_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_1_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux1Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux1 Divisor0 (STM0_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f6481e12-7141-46e7-b67a-791ee873405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux1Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=1"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux1Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux1 Divider0 Frequency (STM0_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfbf260-3b15-4340-90ec-bd7753298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux1Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux1Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FXOSC_CLK')='AIPS_PLAT_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(125000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux1_Source,'FXOSC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux1Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux1Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FXOSC_CLK')='AIPS_PLAT_CLK')) *
                                                                                        num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(125000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux1_Source,'FXOSC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux1Div0_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.STM0_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.STM0_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux2" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for STM1_CLK. <br />
                                                            Note: This node is not supported on S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux2"/>
                                                <a:a name="UUID" value="ECUC:a40633ad-adde-4328-afe7-4ef1cb634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_2')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                This node is not supported on S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4294a8b-1163-463a-b4b2-cc0f8778243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux2_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_2_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_2_CSC[SELCTL] - This field selects the source clock for Clock Mux 2. <br />
                                                                This node is not supported on S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux2 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1048e84c-73b9-4773-8324-3cfbdab5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux2.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux2.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                               true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'AIPS_PLAT_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div1_En, 'false') = 'false')
                                                                     )"
                                                                true="If 'AIPS_PLAT_CLK' is selected as source clock, McuClkMux0Div1_En must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux2Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Divider enable. <br />
                                                                This field enables the Clock Divider for STM1_CLK. <br />
                                                                Sets the MC_CGM_MUX_2_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_2_DC_0[DIV] field is ignored and the STM1_CLK clock remains disabled. <br />
                                                                This node is not supported on S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux2 Divider0 Enable (STM1_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3e91a1-f7b1-4a9f-87e0-d6259163bf49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux2Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 2 Division value. <br />
                                                                Sets the MC_CGM_MUX_2_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_2_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux2Div0_En is true. <br />
                                                                This node is not supported on S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux2 Divisor0 (STM1_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6484e12-7141-46e7-b87a-791ae873405a"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux2Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=1"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux2Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is not supported on S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux2 Divider0 Frequency (STM1_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8ccb9260-3b15-4f40-90ec-bd775b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux2Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux2Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux2_Source,'FXOSC_CLK')='AIPS_PLAT_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(125000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux2_Source,'FXOSC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux2Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux2Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux2_Source,'FXOSC_CLK')='AIPS_PLAT_CLK')) *
                                                                                            num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(125000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux2_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux2_Source,'FXOSC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux2Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.STM1_CLK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_2')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.STM1_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux3" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for FLEXCAN_PE_CLK0, FLEXCAN_PE_CLK1 and FLEXCAN_PE_CLK2. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux3"/>
                                                <a:a name="UUID" value="ECUC:a40633ad-adde-43a8-ade7-4ef1cb634d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d94a8b-1163-f63a-b4b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux3_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_3_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_3_CSC[SELCTL] - This field selects the source clock for Clock Mux 3. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux3 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:104ae84c-71b9-4773-8324-3cfbd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux3.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux3.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'AIPS_PLAT_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div1_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'AIPS_PLAT_CLK' is selected as source clock, McuClkMux0Div1_En must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux3Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Divider enable. <br />
                                                                This field enables the Clock Divider for FLEXCAN_PE_CLK0_2. <br />
                                                                Sets the MC_CGM_MUX_3_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_3_DC_0[DIV] field is ignored and the FLEXCAN_PE_CLK0_2 clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux3 Divider0 Enable (FLEXCAN_PE_CLK0_2)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3191a1-f7b1-4a2f-87e0-d6250163bf49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux3Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 3 Division value. <br />
                                                                Sets the MC_CGM_MUX_3_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_3_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux3Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux3 Divisor0 (FLEXCAN_PE_CLK0_2)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464e12-7b41-46e7-b87a-791aa873405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux3Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux3Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux3 Divider0 Frequency (FLEXCAN_PE_CLK0_2)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9660-3b15-4d40-90ec-bda75b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux3Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux3Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux3_Source,'FXOSC_CLK')='AIPS_PLAT_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(960000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux3_Source,'FXOSC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux3_Source,'FXOSC_CLK')='CORE_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, num:f(960000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux3Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux3Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FXOSC_CLK')='AIPS_PLAT_CLK')) *
                                                                                        num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(960000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FXOSC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux3_Source,'FXOSC_CLK')='CORE_CLK')) *
                                                                                        num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, num:f(960000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux3Div0_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.FLEXCAN_PE_CLK0_2'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.FLEXCAN_PE_CLK0_2')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux4" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for FLEXCAN_PE_CLK3_5/FLEXCAN_PE_CLK3_7. <br />
                                                            This node is not supported on S32K311/S32K310/S32M27x derivative. <br />
                                                            This node supports the following clocks : <br />
                                                                FLEXCAN_PE_CLK3_7 : S32K358 <br />
                                                                FLEXCAN_PE_CLK3_5 : S32K3XX <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux4"/>
                                                <a:a name="UUID" value="ECUC:a40631ad-add5-43a8-ade7-4ef1cf634d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_4')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                This node is not supported on S32K311/S32K310/S32M27x derivative. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d94a8b-11f3-fc3a-b4b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux4_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 4 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_4_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_4_CSC[SELCTL] - This field selects the source clock for Clock Mux 4. <br />
                                                                This node is not supported on S32K311/S32K310/S32M27x derivative. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux4 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10fae84c-71b9-4a73-8324-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux4.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux4.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'AIPS_PLAT_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div1_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'AIPS_PLAT_CLK' is selected as source clock, McuClkMux0Div1_En must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux4Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 4 Divider enable. <br />
                                                                Sets the MC_CGM_MUX_4_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_4_DC_0[DIV] field is ignored and the FLEXCAN_PE_CLK3_5/FLEXCAN_PE_CLK3_7 clock remains disabled. <br />
                                                                This node enables the Clock Divider for FLEXCAN_PE_CLK3_5/FLEXCAN_PE_CLK3_7. <br />
                                                                This node is not supported on S32K311/S32K310/S32M27x derivative. <br />
                                                                This node supports the following clocks : <br />
                                                                    FLEXCAN_PE_CLK3_7 : S32K358 <br />
                                                                    FLEXCAN_PE_CLK3_5 : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux4 Divider0 Enable (FLEXCAN_PE_CLK3_5/FLEXCAN_PE_CLK3_7)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b3196a1-f7b1-4a2f-b7e0-d62501632f49"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux4Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 4 Division value. <br />
                                                                Sets the MC_CGM_MUX_4_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_4_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux4Div0_En is true. <br />
                                                                This node is not supported on S32K311/S32K310/S32M27x derivative. <br />
                                                                This node supports the following clocks : <br />
                                                                    FLEXCAN_PE_CLK3_7 : S32K358 <br />
                                                                    FLEXCAN_PE_CLK3_5 : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux4 Divisor0 (FLEXCAN_PE_CLK3_5/FLEXCAN_PE_CLK3_7)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464112-7b41-46d7-b87a-791aaa73405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux4Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux4Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is not supported on S32K311/S32K310/S32M27x derivative. <br />
                                                                This node supports the following clocks : <br />
                                                                    FLEXCAN_PE_CLK3_7 : S32K358 <br />
                                                                    FLEXCAN_PE_CLK3_5 : S32K3XX <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux4 Divider0 Frequency (FLEXCAN_PE_CLK3_5/FLEXCAN_PE_CLK3_7)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb96a0-3b85-4d40-90ec-3da75b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux4Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux4Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(80000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(24000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='CORE_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, num:f(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux4Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux4Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                                            num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(80000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(24000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux4_Source,'FIRC_CLK')='CORE_CLK')) *
                                                                                            num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, num:f(40000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux4Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.FLEXCAN_PE_CLK3_5'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                )
                                                                and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_4')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.FLEXCAN_PE_CLK3_5')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux5" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for CLKOUT_STANDBY. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux5"/>
                                                <a:a name="UUID" value="ECUC:a40731ad-add5-43a8-adeb-4ef1c3634d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d9ca8b-11f3-fc3a-b8b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux5_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 5 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_5_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_5_CSC[SELCTL] - This field selects the source clock for Clock Mux 5. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux5 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10fa684c-d1b9-ba73-8324-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux5.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux5.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'SXOSC_CLK') and
                                                                       (node:fallback(../../../McuSXOSC/McuSxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'SXOSC_CLK' is selected as source clock, SXOSC ('McuSxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FXOSC_CLK') = 'AIPS_SLOW_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div2_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'AIPS_SLOW_CLK' is selected as source clock, McuClkMux0Div2_En must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux5Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 5 Divider enable. <br />
                                                                This field enables the Clock Divider for CLKOUT_STANDBY. <br />
                                                                Sets the MC_CGM_MUX_5_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_5_DC_0[DIV] field is ignored and the CLKOUT_STANDBY clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux5 Divider0 Enable (CLKOUT_STANDBY)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519611-f7b1-fa2f-b7e0-d62501c32f49"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux5Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 5 Division value. <br />
                                                                Sets the MC_CGM_MUX_5_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_5_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux5Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux5 Divisor0 (CLKOUT_STANDBY)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b64641f2-7b4c-46d7-b8da-791aaa73405e"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux5Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux5Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux5 Divider0 Frequency (CLKOUT_STANDBY)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9620-3b85-4d40-90e6-3da74b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux5Div0_En, 'true') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux5Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(24000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='SIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuSIRC/McuSIRC_Frequency, num:f(32000))) +
                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='SXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuSXOSC/McuSXOSC_Frequency, num:f(32000))) +
                                                                    num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='AIPS_SLOW_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider2_Frequency, num:f(80000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux5Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux5Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(24000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='SIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuSIRC/McuSIRC_Frequency, num:f(32000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='SXOSC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuSXOSC/McuSXOSC_Frequency, num:f(32000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux5_Source,'FIRC_CLK')='AIPS_SLOW_CLK')) *
                                                                                        num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider2_Frequency, num:f(80000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux5Div0_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.CLKOUT_STANDBY'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.CLKOUT_STANDBY')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux6" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for CLKOUT_RUN. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux6"/>
                                                <a:a name="UUID" value="ECUC:a407317d-add5-43a8-ad3b-4ef1c36f4d56"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99a8b-1cf3-4c3a-08b2-cc0f8778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux6_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 6 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_6_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_6_CSC[SELCTL] - This field selects the source clock for Clock Mux 6. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux6 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f2684c-d1b9-b573-83d4-3cfcd5b5456b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux6.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux6.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'SXOSC_CLK') and
                                                                       (node:fallback(../../../McuSXOSC/McuSxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'SXOSC_CLK' is selected as source clock, SXOSC ('McuSxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI2_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'CORE_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div0_En, 'true') = 'false')
                                                                     )"
                                                            true="If 'CORE_CLK' is selected as source clock, McuClkMux0Div0_En must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'HSE_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div3_En, 'true') = 'false')
                                                                     )"
                                                            true="If 'HSE_CLK' is selected as source clock, McuClkMux0Div3_En must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'AIPS_PLAT_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div1_En, 'true') = 'false')
                                                                     )"
                                                            true="If 'AIPS_PLAT_CLK' is selected as source clock, McuClkMux0Div1_En must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'AIPS_SLOW_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div2_En, 'true') = 'false')
                                                                     )"
                                                            true="If 'AIPS_SLOW_CLK' is selected as source clock, McuClkMux0Div2_En must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux6Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 6 Divider enable. <br />
                                                                This field enables the Clock Divider for CLKOUT_RUN. <br />
                                                                Sets the MC_CGM_MUX_6_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_6_DC_0[DIV] field is ignored and the CLKOUT_RUN clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux6 Divider0 Enable (CLKOUT_RUN)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519f11-f7b1-fa2f-b750-d6250ac32fe9"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux6Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 6 Division value. <br />
                                                                Sets the MC_CGM_MUX_6_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_6_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux6Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux6 Divisor0 (CLKOUT_RUN)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:be832e0b-5f5a-48b4-9abf-a280908a2e00"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux6Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=63"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux6Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux6 Divider0 Frequency (CLKOUT_RUN)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:4941e331-69d1-49e3-b470-1584f3aef20a"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux6Div0_En, 'true') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux6Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuSIRC/McuSIRC_Frequency, num:f(32000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuSXOSC/McuSXOSC_Frequency, num:f(32000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLLAUX_PHI1_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLLAUX_PHI2_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI2_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='CORE_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='HSE_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider3_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLL_PHI1_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(80000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='AIPS_SLOW_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider2_Frequency, num:f(80000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='EMAC_MII_RMII_TX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuEMAC_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='GMAC0_MII_RMII_TX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuGMAC0_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='EMAC_MII_RX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuEMAC_MII_RX_CLKFrequencyHz, num:f(25000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='LFAST_REF_EXT_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuLFAST_REF_EXT_CLKFrequencyHz, num:f(160000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(160000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux6Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux6Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuSIRC/McuSIRC_Frequency, num:f(32000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SXOSC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuSXOSC/McuSXOSC_Frequency, num:f(32000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLLAUX_PHI1_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLLAUX_PHI2_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI2_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='CORE_CLK')) *
                                                                                        num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='HSE_CLK')) *
                                                                                        num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider3_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='PLL_PHI1_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                                        num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(80000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='AIPS_SLOW_CLK')) *
                                                                                        num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider2_Frequency, num:f(80000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='EMAC_MII_RMII_TX_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuEMAC_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='GMAC0_MII_RMII_TX_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuGMAC0_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='EMAC_MII_RX_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuEMAC_MII_RX_CLKFrequencyHz, num:f(25000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='LFAST_REF_EXT_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuLFAST_REF_EXT_CLKFrequencyHz, num:f(160000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux6_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                                        num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(160000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux6Div0_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.CLKOUT_RUN'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.CLKOUT_RUN')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux7" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for EMAC_CLK_RX / GMAC0_CLK_RX. <br />
                                                            This node is not supported on S32K312/S32K311/S32K310/S32M27x derivative. <br />
                                                            This node supports the following clocks : <br />
                                                                GMAC0_CLK_RX : S32K388 <br />
                                                                EMAC_CLK_RX  : S32K3XX <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux7"/>
                                                <a:a name="UUID" value="ECUC:a407e17d-add5-43ab-a63b-41f1c36f4d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_7')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4g99a8b-1cf3-4c1a-08b2-cc3f9778843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux7_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 7 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_7_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_7_CSC[SELCTL] - This field selects the source clock for Clock Mux 7. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux7 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:11f2684c-d16b-b57b-13d4-3cfe75b5476b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux7.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux7.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI0_CLK' is selected as source clock, PLL_PHI0_CLK must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPll_Configuration/McuPllOdiv0_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, PLLAUX_PHI0_CLK must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux7Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 7 Divider enable. <br />
                                                                This field enables the Clock Divider for EMAC_CLK_RX / GMAC0_CLK_RX. <br />
                                                                Sets the MC_CGM_MUX_7_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_7_DC_0[DIV] field is ignored and the EMAC_CLK_RX / GMAC0_CLK_RX clock remains disabled. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC0_CLK_RX : S32K388 <br />
                                                                    EMAC_CLK_RX  : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux7 Divider0 Enable (EMAC_CLK_RX / GMAC0_CLK_RX)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:560f7132-e5ed-4621-beae-5131294a5eda"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux7Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 7 Division value. <br />
                                                                Sets the MC_CGM_MUX_7_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_7_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux7Div0_En is true. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC0_CLK_RX : S32K388 <br />
                                                                    EMAC_CLK_RX  : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux7 Divisor0 (EMAC_CLK_RX / GMAC0_CLK_RX)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464af2-7bfc-46d7-b8ea-791a1a73405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux7Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=63"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux7Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC0_CLK_RX : S32K388 <br />
                                                                    EMAC_CLK_RX  : S32K3XX <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux7 Divider0 Frequency (EMAC_CLK_RX / GMAC0_CLK_RX)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cf29a20-3b85-4d4e-9fe6-3da75b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux7Div0_En, 'true') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux7Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='EMAC_MII_RMII_TX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuEMAC_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='GMAC0_MII_RMII_TX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuGMAC0_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='EMAC_MII_RX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuEMAC_MII_RX_CLKFrequencyHz, num:f(25000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='GMAC0_MII_RX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuGMAC0_MII_RX_CLKFrequencyHz, num:f(25000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux7Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux7Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='EMAC_MII_RMII_TX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuEMAC_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='GMAC0_MII_RMII_TX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuGMAC0_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='EMAC_MII_RX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuEMAC_MII_RX_CLKFrequencyHz, num:f(25000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux7_Source,'FIRC_CLK')='GMAC0_MII_RX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuGMAC0_MII_RX_CLKFrequencyHz, num:f(25000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux7Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.EMAC_CLK_RX'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_7')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.EMAC_CLK_RX')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux8" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for EMAC_CLK_TX /GMAC0_TX_CLK. <br />
                                                            This node is not supported on S32K312/S32K311/S32K310/S32M27x derivative. <br />
                                                            This node supports the following clocks : <br />
                                                                GMAC0_TX_CLK : S32K388 <br />
                                                                EMAC_CLK_TX  : S32K3XX <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux8"/>
                                                <a:a name="UUID" value="ECUC:a407eb7d-add5-435b-a639-41f1c06f4d56"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_8')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4g98a8b-1c03-4c1a-48b2-cc3f977b843e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux8_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 8 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_8_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_8_CSC[SELCTL] - This field selects the source clock for Clock Mux 8. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux8 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:11f2684c-d14b-b57b-13db-0cfe75b5f76b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux8.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux8.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux8Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 8 Divider enable. <br />
                                                                This field enables the Clock Divider for EMAC_CLK_TX / GMAC0_TX_CLK. <br />
                                                                Sets the MC_CGM_MUX_8_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_7_DC_0[DIV] field is ignored and the EMAC_CLK_RX clock remains disabled. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC0_TX_CLK : S32K388 <br />
                                                                    EMAC_CLK_TX  : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux8 Divider0 Enable (EMAC_CLK_TX / GMAC0_TX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519f11-f7b1-c32f-b750-d6250ac32fe9"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux8Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 8 Division value. <br />
                                                                Sets the MC_CGM_MUX_8_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_8_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux8Div0_En is true. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC0_TX_CLK : S32K388 <br />
                                                                    EMAC_CLK_TX  : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux8 Divisor0 (EMAC_CLK_TX / GMAC0_TX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464af2-73fc-46d7-b8ea-791a1a73405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux8Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=63"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux8Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC0_TX_CLK : S32K388 <br />
                                                                    EMAC_CLK_TX  : S32K3XX <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux8 Divider0 Frequency (EMAC_CLK_TX / GMAC0_TX_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a20-3b85-4d4e-9fe6-3da75b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux8Div0_En, 'true') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux8Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='EMAC_MII_RMII_TX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuEMAC_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='GMAC0_MII_RMII_TX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuGMAC0_MII_RMII_TX_CLKFrequencyHz, num:f(50000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux8Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux8Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='EMAC_MII_RMII_TX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuEMAC_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux8_Source,'FIRC_CLK')='GMAC0_MII_RMII_TX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuGMAC0_MII_RMII_TX_CLKFrequencyHz, num:f(50000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux8Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.EMAC_CLK_TX'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_8')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.EMAC_CLK_TX')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux9" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for EMAC_CLK_TS / GMAC_CLK_TS. <br />
                                                            This node is not supported on S32K312/S32K311/S32K310/S32M27x derivative. <br />
                                                            This node supports the following clocks : <br />
                                                                GMAC_CLK_TS : S32K388 <br />
                                                                EMAC_CLK_TS : S32K3XX <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux9"/>
                                                <a:a name="UUID" value="ECUC:a4073f7d-afd5-43a8-ad30-4af5c36b4d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_9')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99a8b-10f3-4c3a-08b5-cc0f0778a43e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux9_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 9 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_9_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_9_CSC[SELCTL] - This field selects the source clock for Clock Mux 9. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux9 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f2684c-dab9-b573-83dc-3cfcf5b5416b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux9.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux9.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux9Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 9 Divider enable. <br />
                                                                This field enables the Clock Divider for EMAC_CLK_TS / GMAC_CLK_TS. <br />
                                                                Sets the MC_CGM_0_MUX_9_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider 0 is disabled), any write access to the MC_CGM_0_MUX_9_DC_0[DIV] field is ignored and the EMAC_CLK_TS / GMAC_CLK_TS clock remains disabled. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC_CLK_TS : S32K388 <br />
                                                                    EMAC_CLK_TS : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux9 Divider0 Enable (EMAC_CLK_TS / GMAC_CLK_TS)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519f11-f7bb-fa2f-9750-d6250fc30fe9"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux9Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 9 Division value. <br />
                                                                Sets the MC_CGM_MUX_9_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_9_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux9Div0_En is true. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC_CLK_TS : S32K388 <br />
                                                                    EMAC_CLK_TS : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux9 Divisor0 (EMAC_CLK_TS / GMAC_CLK_TS)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464af2-7bf0-46d7-b8ba-791a6a73405e"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux9Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=63"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux9Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC_CLK_TS : S32K388 <br />
                                                                    EMAC_CLK_TS : S32K3XX <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux9 Divider0 Frequency (EMAC_CLK_TS / GMAC_CLK_TS)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a00-3b85-4dfe-9fe6-3d375b298c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux9Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux9Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='EMAC_MII_RMII_TX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuEMAC_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='EMAC_MII_RX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuEMAC_MII_RX_CLKFrequencyHz, num:f(25000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='GMAC0_MII_RMII_TX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuGMAC0_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='GMAC0_MII_RX_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuGMAC0_MII_RX_CLKFrequencyHz, num:f(25000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux9Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux9Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='EMAC_MII_RMII_TX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuEMAC_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='EMAC_MII_RX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuEMAC_MII_RX_CLKFrequencyHz, num:f(25000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='GMAC0_MII_RMII_TX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuGMAC0_MII_RMII_TX_CLKFrequencyHz, num:f(50000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux9_Source,'FIRC_CLK')='GMAC0_MII_RX_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuGMAC0_MII_RX_CLKFrequencyHz, num:f(25000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux9Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.EMAC_CLK_TS'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_9')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.EMAC_CLK_TS')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux10" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for QuadSPI_SFCK / QSPI_2XSFIF(QSPI_SFCK is always QSPI_2XSFIF div 2). <br />
                                                            This node is not supported on S32K312/S32K311/S32K310/S32M27x derivative. <br />
                                                            This node supports the following clocks : <br />
                                                                QSPI_2XSFIF  : S32K39x and S32K358(and its subderivatives) <br />
                                                                QuadSPI_SFCK : S32K3XX <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux10"/>
                                                <a:a name="UUID" value="ECUC:a4073f7d-afd0-43a8-a530-4af5b36b4d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_10')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99a8b-10f9-4c3a-08ba-cc0f077ca43e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux10_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 10 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_10_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_10_CSC[SELCTL] - This field selects the source clock for Clock Mux 10. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux10 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f4684c-dab9-b573-83dc-3cfcf7b5416b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux10.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux10.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI1_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux10Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 10 Divider enable. <br />
                                                                This field enables the Clock Divider for QuadSPI_SFCK/QSPI_2XSFIF. <br />
                                                                Sets the MC_CGM_MUX_10_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_10_DC_0[DIV] field is ignored and the QuadSPI_SFCK/QSPI_2XSFIF clock remains disabled. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    QSPI_2XSFIF  : S32K39x and S32K358(and its subderivatives) <br />
                                                                    QuadSPI_SFCK : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux10 Divider0 Enable (QuadSPI_SFCK/QSPI_2XSFIF)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0b519f1c-f7bb-fa2f-9780-d625bfc30f19"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux10Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 10 Division value. <br />
                                                                Sets the MC_CGM_MUX_10_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_10_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux10Div0_En is true. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    QSPI_2XSFIF  : S32K39x and S32K358(and its subderivatives) <br />
                                                                    QuadSPI_SFCK : S32K3XX <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux10 Divisor0 (QuadSPI_SFCK/QSPI_2XSFIF)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464a92-7bf0-46d7-b8ba-791b6a73f057"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux10Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux10Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is not supported on S32K312/S32K311/S32K310/S32M27x derivatives.  <br />
                                                                This node supports the following clocks : <br />
                                                                    QSPI_2XSFIF  : S32K39x and S32K358(and its subderivatives) <br />
                                                                    QuadSPI_SFCK : S32K3XX <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux10 Divider0 Frequency (QuadSPI_SFCK/QSPI_2XSFIF)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f1b51a7b-1408-4441-935f-0d276dae09a8"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux10Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux10Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='PLL_PHI1_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux10Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            ) div
                                                            num:f(
                                                                node:when(
                                                                    (ecu:get('MCU.CGM0.ClockMux10.Div2.Supported') = 'true'),
                                                                    num:i(2),
                                                                    num:i(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux10Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='PLL_PHI1_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux10_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux10Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:when(
                                                                                            (ecu:get('MCU.CGM0.ClockMux10.Div2.Supported') = 'true'),
                                                                                            num:i(2),
                                                                                            num:i(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.QuadSPI_SFCK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_10')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.QuadSPI_SFCK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux11" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for TRACE_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux11"/>
                                                <a:a name="UUID" value="ECUC:a407367d-afd0-4338-a53b-4afeb36b4d50"/>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:12a5377c-e520-4f61-8ac7-4c7a3091ea15"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux11_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 11 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_11_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_11_CSC[SELCTL] - This field selects the source clock for Clock Mux 11. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux11 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f4684c-d9b9-b573-83d0-3cfef7b5416b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux11.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux11.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI1_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux11Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 11 Divider enable. <br />
                                                                This field enables the Clock Divider for TRACE_CLK. <br />
                                                                Sets the MC_CGM_MUX_11_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_11_DC_0[DIV] field is ignored and the TRACE_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux11 Divider0 Enable (TRACE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:02819f1c-f7bb-fa2f-9780-d625bfc30f19"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux11Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 11 Division value. <br />
                                                                Sets the MC_CGM_MUX_11_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_11_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux11Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux11 Divisor0 (TRACE_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464a92-7bf0-46d7-b8ba-791ba573f057"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux11Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux11Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux11 Divider0 Frequency (TRACE_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8cfb9a70-3b8c-4dfe-9fe6-3d475bf98c2f"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux11Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux11Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))+
                                                                    num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='PLL_PHI1_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux11Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 800000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 800000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuClkMux11Div0_En, 'true') = 'true')) *
                                                                                num:f(
                                                                                    num:f(
                                                                                        num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                        num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))+
                                                                                        num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='PLL_PHI1_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux11_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                        num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                                    ) div
                                                                                    num:f(
                                                                                        node:fallback(../McuClkMux11Div0_Divisor, num:f(0)) + num:f(1)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.TRACE_CLK'))
                                                                )
                                                                or
                                                                (
                                                                    node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.TRACE_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux12" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for EMAC_TX_RMII_CLK/GMAC0_TX_RMII_CLK. <br />
                                                            This node is supported on S32K39x and S32K3x8 derivative only.<br />
                                                            This node supports the following clocks : <br />
                                                                GMAC0_TX_RMII_CLK  : S32K388 <br />
                                                                EMAC_TX_RMII_CLK   : S32K3xx <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux12"/>
                                                <a:a name="UUID" value="ECUC:cbe1a791-2cef-43a6-b92c-b3c4719c0600"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_12')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d99abb-10fe-4c3a-06ba-cc0f077ca43e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux12_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 12 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_12_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_12_CSC[SELCTL] - This field selects the source clock for Clock Mux 12. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux12 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:763ca323-b485-4a9e-86e1-7ba57467bef0"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux12.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux12.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux12Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 12 Divider enable. <br />
                                                                This field enables the Clock Divider for EMAC_TX_RMII_CLK/GMAC0_TX_RMII_CLK. <br />
                                                                Sets the MC_CGM_MUX_12_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_12_DC_0[DIV] field is ignored and the EMAC_TX_RMII_CLK/GMAC0_TX_RMII_CLK clock remains disabled. <br />
                                                                This node is supported on S32K39x and S32K3x8 derivative only.<br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC0_TX_RMII_CLK  : S32K388 <br />
                                                                    EMAC_TX_RMII_CLK   : S32K3xx <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux12 Divider0 Enable (EMAC_TX_RMII_CLK / GMAC0_TX_RMII_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:6c29aece-b081-4575-a667-6fcacdd3fb44"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux12Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 12 Division value. <br />
                                                                Sets the MC_CGM_MUX_12_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_12_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux12Div0_En is true. <br />
                                                                This node is supported on S32K39x and S32K3x8 derivative only.<br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC0_TX_RMII_CLK  : S32K388 <br />
                                                                    EMAC_TX_RMII_CLK   : S32K3xx <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux12 Divisor0 (EMAC_TX_RMII_CLK / GMAC0_TX_RMII_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:95d26a95-1832-4542-a5e1-65afb7a668f5"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux12Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=63"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux12Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is supported on S32K39x and S32K3x8 derivative only.<br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC0_TX_RMII_CLK  : S32K388 <br />
                                                                    EMAC_TX_RMII_CLK   : S32K3xx <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux12 Divider0 Frequency (EMAC_TX_RMII_CLK / GMAC0_TX_RMII_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:be5de60e-2b52-4a80-95f5-02ab76af9ca4"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux12Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux12Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux12Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux12Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                        num:f(number(node:fallback(../McuClkMux12_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux12Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.EMAC_TX_RMII_CLK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_12')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.EMAC_TX_RMII_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux13" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for STM2_CLK. <br />
                                                            This node is supported on S32K39x and S32K358 derivative only.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux13"/>
                                                <a:a name="UUID" value="ECUC:17990aa8-862a-40e5-8be4-98bb539c3bdc"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_13')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0552b46a-476a-45f0-9f51-02c3fd5a5c84"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux13_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 13 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_13_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_13_CSC[SELCTL] - This field selects the source clock for Clock Mux 13. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux13 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f3a4ee36-4bfb-4af8-98ab-081cb85ec106"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux13.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux13.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'AIPS_PLAT_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div1_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'AIPS_PLAT_CLK' is selected as source clock, McuClkMux0Div1_En must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux13Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 13 Divider enable. <br />
                                                                This field enables the Clock Divider for STM2_CLK. <br />
                                                                Sets the MC_CGM_MUX_13_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_13_DC_0[DIV] field is ignored and the STM2_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux13 Divider0 Enable (STM2_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a9553851-e5bf-4257-907d-8beb1cb9ff4b"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux13Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 13 Division value. <br />
                                                                Sets the MC_CGM_MUX_13_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_13_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux13Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux13 Divisor0 (STM2_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:bd6b53a9-89fe-4e74-9467-f477c9fbc8b2"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux13Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=1"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux13Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux13 Divider0 Frequency (STM2_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:d7b62a75-9add-41ab-9301-47f790d68b66"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux13Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux13Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux13_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux13_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux13_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(125000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux13_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux13Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux13Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux13_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux13_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux13_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                                            num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(125000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux13_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux13Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.STM2_CLK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_13')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.STM2_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux14" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for  uSDHC on S32K358 derivative. <br />
                                                            Note:  uSDHC is only available on: S32K358. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux14"/>
                                                <a:a name="UUID" value="ECUC:a407ac7d-afd0-43a8-a530-4af5b36b4d50"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_14')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                This node is only available on: S32K358 derivatives.  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e4d993ab-10f9-4c3a-08ba-cc0f077ca43e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux14_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 14 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_14_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_14_CSC[SELCTL] - This field selects the source clock for Clock Mux 14. <br />
                                                                This node is only available on: S32K358 derivatives.  <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux14 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:10f462cc-dab9-b573-83dc-3cfcf7b5416b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux14.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux14.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI1_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI2_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI2_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux14Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 14 Divider enable. <br />
                                                                This field enables the Clock Divider for uSDHC. <br />
                                                                Sets the MC_CGM_MUX_14_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_14_DC_0[DIV] field is ignored and the uSDHC clock remains disabled. <br />
                                                                This node is only available on: S32K358 derivatives.  <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux14 Divider0 Enable (uSDHC_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:0a719f1c-f7bb-fa2f-9780-d625bfc30f19"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>

                                                <v:var name="McuClkMux14Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 14 Division value. <br />
                                                                Sets the MC_CGM_MUX_14_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_14_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux14Div0_En is true. <br />
                                                                This node is only available on: S32K358 derivatives.  <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux14 Divisor0 (uSDHC_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b6464a92-7bf0-4c97-b8ba-791b6a73f057"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux14Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=1"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux14Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is only available on: S32K358 derivatives.  <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux14 Divider0 Frequency (uSDHC_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f1b51a7b-1408-c241-935f-0d276dae09a8"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux14Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux14Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='PLL_PHI1_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='PLLAUX_PHI2_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI2_Frequency, num:f(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux14Div0_Divisor, num:f(0)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux14Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='PLL_PHI1_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux14_Source,'FIRC_CLK')='PLLAUX_PHI2_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI2_Frequency, num:f(40000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux14Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.uSDHC_CLK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_14')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.uSDHC_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                            </v:ctr>
                                            <v:ctr name="McuCgm0ClockMux15" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for LFAST_REF_CLK/GMAC1_RX_CLK. <br />
                                                            This node is supported on S32K39x or S32K388 derivative only.<br />
                                                            This node supports the following clocks : <br />
                                                                GMAC1_RX_CLK    : S32K388 <br />
                                                                LFAST_REF_CLK   : S32K39x <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux15"/>
                                                <a:a name="UUID" value="ECUC:e91c3aea-e628-428d-a944-b86ba7c2f5d1"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_15')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f0ebfd89-769e-446f-8c9d-5a70e308e195"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux15_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 15 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_15_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_15_CSC[SELCTL] - This field selects the source clock for Clock Mux 15. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux15 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2a303be1-4b78-4e8c-abb3-40006f93eb3c"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux15.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux15.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'AIPS_SLOW_CLK') and
                                                                       (node:fallback(../../McuCgm0ClockMux0/McuClkMux0Div2_En, 'false') = 'false')
                                                                     )"
                                                            true="If 'AIPS_SLOW_CLK' is selected as source clock, McuClkMux0Div2_En must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux15Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 15 Divider enable. <br />
                                                                This field enables the Clock Divider for LFAST_REF_CLK/GMAC1_RX_CLK. <br />
                                                                Sets the MC_CGM_MUX_15_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_15_DC_0[DIV] field is ignored and the clock remains disabled. <br />
                                                                This node is supported on S32K39x or S32K388 derivative only.<br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC1_RX_CLK    : S32K388 <br />
                                                                    LFAST_REF_CLK   : S32K39x <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux15 Divider0 Enable (LFAST_REF_CLK / GMAC1_RX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c83e31c3-ed5b-435d-af2c-a7c9cb2bc0b7"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux15Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 15 Division value. <br />
                                                                Sets the MC_CGM_MUX_15_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_15_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux15Div0_En is true. <br />
                                                                This node is supported on S32K39x or S32K388 derivative only.<br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC1_RX_CLK    : S32K388 <br />
                                                                    LFAST_REF_CLK   : S32K39x <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux15 Divisor0 (LFAST_REF_CLK / GMAC1_RX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f5e221dd-3241-421a-a34f-9a6f260d21d3"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux15Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.MC_CGM0_MUX15_DC0.Divider.Limits')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux15Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is supported on S32K39x or S32K388 derivative only.<br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC1_RX_CLK    : S32K388 <br />
                                                                    LFAST_REF_CLK   : S32K39x <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux15 Divider0 Frequency (LFAST_REF_CLK / GMAC1_RX_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:9e4f6f8b-e4cb-43ff-adb5-e68bc5b5e127"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux15Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux15Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='LFAST_REF_EXT_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuLFAST_REF_EXT_CLKFrequencyHz, num:f(160000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='AIPS_SLOW_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider2_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux15Div0_Divisor, num:f(2)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux15Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='LFAST_REF_EXT_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuLFAST_REF_EXT_CLKFrequencyHz, num:f(160000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='AIPS_SLOW_CLK')) *
                                                                                            num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider2_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux15_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux15Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.LFAST_REF_CLK'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_15')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.LFAST_REF_CLK')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux16" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for SWG_CLK/GMAC1_TX_CLK. <br />
                                                            This node is supported on S32K39x or S32K388 derivative only.<br />
                                                            This node supports the following clocks : <br />
                                                                GMAC1_TX_CLK    : S32K388 <br />
                                                                SWG_CLK         : S32K39x <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux16"/>
                                                <a:a name="UUID" value="ECUC:61822bd0-ab3e-4951-ac94-e4dfc25cc2b8"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_16')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:370907be-d54d-459e-9af7-ee69d664819b"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux16_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 16 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_16_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_16_CSC[SELCTL] - This field selects the source clock for Clock Mux 16. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux16 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:fb5baa70-8737-45c8-a840-cd84f70b727b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux16.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux16.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux16Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 16 Divider enable. <br />
                                                                This field enables the Clock Divider for SWG_CLK/GMAC1_TX_CLK. <br />
                                                                Sets the MC_CGM_MUX_16_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_16_DC_0[DIV] field is ignored and the SWG_CLK / GMAC1_TX_CLK clock remains disabled. <br />
                                                                This node is supported on S32K39x or S32K388 derivative only.<br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC1_TX_CLK    : S32K388 <br />
                                                                    SWG_CLK         : S32K39x <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux16 Divider0 Enable (SWG_CLK / GMAC1_TX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4246cdb-5d11-4738-b8a6-6d32a7813141"/>
                                                    <a:da name="DEFAULT"  type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_16')" />
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux16Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 16 Division value. <br />
                                                                Sets the MC_CGM_MUX_16_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_16_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux16Div0_En is true. <br />
                                                                This node is supported on S32K39x or S32K388 derivative only.<br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC1_TX_CLK    : S32K388 <br />
                                                                    SWG_CLK         : S32K39x <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux16 Divisor0 (SWG_CLK / GMAC1_TX_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:97375c17-3dfe-4306-ad12-6f9c8fc7ac67"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux16Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.MC_CGM0_MUX16_DC0.Divider.Limits')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux16Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                                This node is supported on S32K39x or S32K388 derivative only.<br />
                                                                This node supports the following clocks : <br />
                                                                    GMAC1_TX_CLK    : S32K388 <br />
                                                                    SWG_CLK         : S32K39x <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux16 Divider0 Frequency (SWG_CLK / GMAC1_TX_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c87df46e-5ad9-4b05-a69f-5831499265d1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux16Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux16Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(160000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux16Div0_Divisor, num:f(2)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux16Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(160000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux16_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux16Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.SWG_CLK.High'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_16')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.SWG_CLK.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.AuxClock.Limits.SWG_CLK.Low') * num:i(number(node:fallback(../../McuCgm0ClockMux16/McuClkMux16Div0_En, 'false') = 'true'))))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux17" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for GMAC1_RMII_CLK. <br />
                                                            This node is supported on S32K388 derivative only.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux17"/>
                                                <a:a name="UUID" value="ECUC:6183abd0-ab3e-4951-ac94-e4dfc25cc2b8"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_17')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:374d07be-d54d-459e-9af7-ee69d664819b"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux17_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 17 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_17_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_17_CSC[SELCTL] - This field selects the source clock for Clock Mux 17. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux17 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:fb5b5c70-8737-45c8-a840-cd84f70b727b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux17.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux17.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux17Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 17 Divider enable. <br />
                                                                This field enables the Clock Divider for GMAC1_RMII_CLK. <br />
                                                                Sets the MC_CGM_MUX_17_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_17_DC_0[DIV] field is ignored and the GMAC1_RMII_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux17 Divider0 Enable (GMAC1_RMII_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f6e46cdb-5d11-4738-b8a6-6d32a7813141"/>
                                                    <a:da name="DEFAULT"  type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_17')" />
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux17Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 17 Division value. <br />
                                                                Sets the MC_CGM_MUX_17_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_17_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux17Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux17 Divisor0 (GMAC1_RMII_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:977f5c17-3dfe-4306-ad12-6f9c8fc7ac67"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux17Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=63"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux17Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux17 Divider0 Frequency (GMAC1_RMII_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c87df8ae-5ad9-4b05-a69f-5831499265d1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux17Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux17Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(170000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux17Div0_Divisor, num:f(2)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux17Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(170000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux17_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux17Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.GMAC1_RMII_CLK.High'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_17')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.GMAC1_RMII_CLK.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.AuxClock.Limits.GMAC1_RMII_CLK.Low') * num:i(number(node:fallback(../../McuCgm0ClockMux17/McuClkMux17Div0_En, 'false') = 'true'))))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux18" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for STMD_CLK. <br />
                                                            This node is supported on S32K388 derivative only.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux18"/>
                                                <a:a name="UUID" value="ECUC:611aabd0-ab3e-4951-ac94-e4dfc25cc2b8"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_18')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2b4d07be-d54d-459e-9af7-ee69d664819b"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux18_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 18 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_18_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_18_CSC[SELCTL] - This field selects the source clock for Clock Mux 18. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux18 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:fb5b5c70-3c37-45c8-a840-cd84f70b727b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux18.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux18.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux18Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 18 Divider enable. <br />
                                                                This field enables the Clock Divider for STMD_CLK. <br />
                                                                Sets the MC_CGM_MUX_18_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_18_DC_0[DIV] field is ignored and the SWG_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux18 Divider0 Enable (STMD_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f6e46cdb-5d4d-4738-b8a6-6d32a7813141"/>
                                                    <a:da name="DEFAULT"  type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_18')" />
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux18Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 18 Division value. <br />
                                                                Sets the MC_CGM_MUX_18_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_18_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux18Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux18 Divisor0 (STMD_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:95ef5c18-3dfe-4306-ad12-6f9c8fc7ac67"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux18Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.MC_CGM0_MUX18_DC0.Divider.Limits')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux18Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux18 Divider0 Frequency (STMD_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c86ff8ae-5ad9-4b05-a69f-5831499265d1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux18Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux18Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(180000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(80000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux18Div0_Divisor, num:f(2)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux18Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(180000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux18_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                                            num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(80000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux18Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.STM3_CLK.High'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_18')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.STM3_CLK.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.AuxClock.Limits.STM3_CLK.Low') * num:i(number(node:fallback(../../McuCgm0ClockMux18/McuClkMux18Div0_En, 'false') = 'true'))))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuCgm0ClockMux19" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container enables and selects the configuration clocks
                                                            for AES_CLK. <br />
                                                            This node is supported on S32K388 derivative only.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuCgm0ClockMux19"/>
                                                <a:a name="UUID" value="ECUC:62aaabd0-ab3e-4951-ac94-e4dfc25cc2b8"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_19')" />
                                                </a:a>

                                                <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock mux is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2b4d3bbe-d54d-459e-9af7-ee69d664819b"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMux19_Source" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 19 Source Selection. <br />
                                                                Sets the MC_CGM_MUX_19_CSC[SELCTL] field register. <br />
                                                                MC_CGM_MUX_19_CSC[SELCTL] - This field selects the source clock for Clock Mux 19. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                     </a:a>
                                                     <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux19 Source"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:fb5b5c70-3c4c-45c8-a840-cd84f70b727b"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.CGM0.ClockMux19.Default')"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CGM0.ClockMux19.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                       (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                     )"
                                                            true="If 'FXOSC_CLK' is selected as source clock, FXOSC ('McuFxoscPowerDownCtr') must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLL_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_0/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLL_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI0_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI0_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                        <a:tst expr="( (node:fallback(., 'FIRC_CLK') = 'PLLAUX_PHI1_CLK') and
                                                                       (node:fallback(../../../McuPll_1/McuPLLEnabled, 'false') = 'false')
                                                                     )"
                                                            true="If 'PLLAUX_PHI1_CLK' is selected as source clock, McuPLLEnabled must be enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux19Div0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 19 Divider enable. <br />
                                                                This field enables the Clock Divider for AES_CLK. <br />
                                                                Sets the MC_CGM_MUX_19_DC_0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                If it is set to 0 (Divider is disabled), any write access to the MC_CGM_MUX_19_DC_0[DIV] field is ignored and the SWG_CLK clock remains disabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux19 Divider0 Enable (AES_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f6e46cdb-5d4d-45d8-b8a6-6d32a7813141"/>
                                                    <a:da name="DEFAULT"  type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_19')" />
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClkMux19Div0_Divisor" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Clock Mux 19 Division value. <br />
                                                                Sets the MC_CGM_MUX_19_DC_0[DIV] field register. <br />
                                                                MC_CGM_MUX_19_DC_0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider. <br />
                                                                This parameter is enabled only if McuClkMux19Div0_En is true. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CGM0 Clock Mux19 Divisor0 (AES_CLK)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:95ef5c19-3dfe-6e06-ad12-6f9c8fc7ac67"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuClkMux19Div0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=63"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuClockMux19Divider0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                                Value calculated for user info. It is given in Hz. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Clock Mux19 Divider0 Frequency (AES_CLK)"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c86ff87f-5ad9-4b05-a69f-5831499265d1"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../McuClkMux19Div0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                            num:f(number(node:fallback(../McuClkMux19Div0_En, 'true') = 'true')) *
                                                            num:f(
                                                                num:f(
                                                                    num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                    num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(190000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='PLLAUX_PHI1_CLK')) *
                                                                    num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                    num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                    num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(80000000)))
                                                                ) div
                                                                num:f(
                                                                    node:fallback(../McuClkMux19Div0_Divisor, num:f(2)) + num:f(1)
                                                                )
                                                            )
                                                        )
                                                        "/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (
                                                                    (
                                                                        not( node:empty( node:fallback(., 800000000) ) )
                                                                        and
                                                                        (
                                                                            num:f( node:fallback(., 800000000) ) !=
                                                                            (
                                                                                num:f(
                                                                                    num:f(number(node:fallback(../McuClkMux19Div0_En, 'true') = 'true')) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:f(48000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                            num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='SWG_PAD_CLK')) *
                                                                                            num:f(node:fallback(../../../../../McuSWG_PAD_CLKFrequencyHz, num:f(190000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='PLL_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='PLLAUX_PHI0_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI0_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='PLLAUX_PHI1_CLK')) *
                                                                                            num:f(node:fallback(../../../McuPll_1/McuPll_Parameter/PLL_PHI1_Frequency, num:f(40000000))) +
                                                                                            num:f(number(node:fallback(../McuClkMux19_Source,'FIRC_CLK')='AIPS_PLAT_CLK')) *
                                                                                            num:f(node:fallback(../../McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, num:f(80000000)))
                                                                                        ) div
                                                                                        num:f(
                                                                                            node:fallback(../McuClkMux19Div0_Divisor, num:f(0)) + num:f(1)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &gt; num:f(ecu:get('MCU.AuxClock.Limits.AES_CLK.High'))
                                                                    )
                                                                    or
                                                                    (
                                                                        node:fallback(., num:f(40000000)) &lt; num:f(0)
                                                                    )
                                                                ) and
                                                                (
                                                                    contains(ecu:get('MCU.CGM0.ClockMuxes.List'), 'CLKMUX_19')
                                                                )
                                                            )
                                                            "
                                                            true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.AES_CLK.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.AuxClock.Limits.AES_CLK.Low') * num:i(number(node:fallback(../../McuCgm0ClockMux19/McuClkMux19Div0_En, 'false') = 'true'))))"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>

                                        </v:ctr>

                                        <v:ctr name="McuRtcClockSelect" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container selects the configuration clocks for RTC_CLK. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuRtcClockSelect"/>
                                            <a:a name="UUID" value="ECUC:71f43071-99df-4944-8697-e77f4b3960eb"/>

                                            <v:var name="McuClockMuxUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this clock mux is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="RTC Clock Select under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:cd8f6f24-c5b0-4ad0-9444-7a688a53dc7e"/>
                                                <a:da name="DEFAULT" value="true"/>
                                            </v:var>

                                            <v:var name="McuRtc_Source" type="ENUMERATION">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RTC_CLK Source Selection. <br />
                                                            Sets the RTCC[CLKSEL] field register. <br />
                                                            Sets the RTCC[CLKSEL] - This field selects the source clock for RTC_CLK. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                 </a:a>
                                                 <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="RTC Clock Select Source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:334287a2-2afe-4bf0-8c31-3cf46659c1d2"/>
                                                <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.RTC.ClockSelect.Default')"/>
                                                <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.RTC.ClockSelect.List')"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="(  (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true') and
                                                                    (node:fallback(., 'FIRC_CLK') = 'FXOSC_CLK') and
                                                                    (node:fallback(../../McuFXOSC/McuFxoscPowerDownCtr, 'false') = 'false')
                                                                 )"
                                                           true="If 'FXOSC_CLK' is selected as source clock, McuFxoscPowerDownCtr must be enabled (i.e. McuFXOSC/McuFxoscPowerDownCtr = 'true'). Otherwise uncheck McuClockMuxUnderMcuControl"/>
                                                    <a:tst expr="(  (node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true') and
                                                                    (node:fallback(., 'FIRC_CLK') = 'SXOSC_CLK') and
                                                                    (node:fallback(../../McuSXOSC/McuSxoscPowerDownCtr, 'false') = 'false')
                                                                 )"
                                                           true="If 'SXOSC_CLK' is selected as source clock, McuSxoscPowerDownCtr must be enabled (i.e. McuSXOSC/McuSxoscPowerDownCtr = 'true'). Otherwise uncheck McuClockMuxUnderMcuControl"/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuRtc_Frequency" type="FLOAT">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This is the frequency for the specific instance of the "McuClockReferencePoint" container.
                                                            Value calculated for user info. It is given in Hz. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="RTC_CLK Frequency"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:08430774-a7f3-4f60-9dd5-900550b3b673"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="
                                                    num:f( num:i(number(node:fallback(../McuClockMuxUnderMcuControl, 'false') = 'true')) *
                                                        num:f(
                                                            num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                            num:f(node:fallback(../../McuFIRC/McuFIRC_Frequency, num:i(48000000))) +
                                                            num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='SIRC_CLK')) *
                                                            num:f(node:fallback(../../McuSIRC/McuSIRC_Frequency, num:i(32000))) +
                                                            num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                            num:f(node:fallback(../../McuFXOSC/McuFXOSC_Frequency, num:i(160000000))) +
                                                            num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='SXOSC_CLK')) *
                                                            num:f(node:fallback(../../McuSXOSC/McuSXOSC_Frequency, num:i(32768)))
                                                        )
                                                    )
                                                    "/>
                                                </a:da>
                                                <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                not( node:empty( node:fallback(., 800000000) ) )
                                                                and
                                                                (
                                                                    num:f( node:fallback(., 800000000) ) !=
                                                                    (
                                                                        num:f(
                                                                            num:f(
                                                                                num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='FIRC_CLK')) *
                                                                                num:f(node:fallback(../../McuFIRC/McuFIRC_Frequency, num:i(48000000))) +
                                                                                num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='SIRC_CLK')) *
                                                                                num:f(node:fallback(../../McuSIRC/McuSIRC_Frequency, num:i(32000))) +
                                                                                num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='FXOSC_CLK')) *
                                                                                num:f(node:fallback(../../McuFXOSC/McuFXOSC_Frequency, num:i(8000000))) +
                                                                                num:f(number(node:fallback(../McuRtc_Source,'FIRC_CLK')='SXOSC_CLK')) *
                                                                                num:f(node:fallback(../../McuSXOSC/McuSXOSC_Frequency, num:i(32768)))
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                            or
                                                            (
                                                                node:fallback(., num:i(40000000)) &gt; num:i(ecu:get('MCU.AuxClock.Limits.RTC_CLK'))
                                                            )
                                                            or
                                                            (
                                                                node:fallback(., num:i(40000000)) &lt; num:i(0)
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                </a:da>
                                                <a:a name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=ecu:get('MCU.AuxClock.Limits.RTC_CLK')"/>
                                                    <a:tst expr="&gt;=num:i(0)"/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>


                                        <v:ctr name="McuPll_0" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container provides the specific configuration for the PLL.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuPLL"/>
                                            <a:a name="UUID" value="ECUC:bfa6250f-717b-4911-a690-6cb59e8da246"/>

                                            <v:var name="McuPLLUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this PLL is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PLL under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-7853067a63b0"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="PLL cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll0UnderMcuControl, 'false') = 'false' )
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll0UnderMcuControl must be set to 'true' when PLL is under MCU control."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPLLEnabled" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            0 - PLL is disabled.<br />
                                                            1 - PLL is enabled (and can be used as a clock source).<br />
                                                            Note: Implementation Specific Parameter.<br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PLL Enabled"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e06b-4db8-a8d7-758306a736f2"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true')
                                                        )"
                                                           true="The PLL cannot be enabled if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../McuFXOSC/McuFxoscPowerDownCtr, 'true') = 'false')
                                                        )"
                                                           true="The PLL cannot be enabled if FXOSC is disabled."/>
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0_Source, ecu:get('MCU.CGM0.ClockMux0.Default')) != 'PLL_PHI0_CLK')
                                                        )"
                                                           true="The PLL should only be enabled if it is used as the system clock source (i.e. McuCgm0ClockMux0/McuClkMux0_Source = 'PLL_PHI0_CLK').
                                                                 When the FIRC is used directly as the system clock, the PLL must be disabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:ctr name="McuPll_Configuration" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:bb7de1d2-ad18-443a-8dc4-a00f8159db55"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for PLL. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuPllDvRdiv" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Input clock predivider.<br />
                                                                Sets the PLL: PLLDIG_PLLDV[RDIV] field register.<br />
                                                                This field controls the value of the divider on the input clock. The output of the predivider circuit generates the reference clock to the PLL analog loop.<br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2b9c1a10-d5d6-407f-8706-bf6b2da7fe3d"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="LABEL" value="RDIV"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPLLEnabled,'false') = 'true')
                                                            )
                                                            and
                                                            (
                                                                (
                                                                 num:f(
                                                                     num:f( num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000)))
                                                                          ) div
                                                                            num:f( node:fallback(., num:f(1) ) )
                                                                      ) &gt; num:i(ecu:get('MCU.PLL.Limits.ClkIn.High'))
                                                                )
                                                                 or
                                                                (
                                                                 num:f(
                                                                     num:f( num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                          ) div
                                                                            num:f( node:fallback(., num:f(1) ) )
                                                                      ) &lt; num:i(ecu:get('MCU.PLL.Limits.ClkIn.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="The input frequency for the PLL (ReferenceClockFrequency/Rdiv) must be between 8 MHz and 40 MHz."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllDvMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Loop multiplication factor divider.<br />
                                                                Sets the PLL: PLLDIG_PLLDV[MFI] field register.<br />
                                                                This field controls the value of the divider in the feedback loop. The value specified by the MFI bits
                                                                establishes the multiplication factor applied to the reference frequency. Divider value = MFI, where MFI
                                                                should be choosen such that it does not violate VCO frequency specifications.<br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:395e17d0-f6cc-4be8-a528-8cb92aebebf2"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.PLL.MFI.Default')"/>
                                                    <a:a name="LABEL" value="MFI"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllDvOdiv2" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                ODIV2 Division value.<br />
                                                                PLLDIG_PLLDV[ODIV2] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV' times the time period of the current input clock to the divider. <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="ODIV2"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4ae5a4f-c1bc-4b1e-be5d-af0ab7e46c80"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=63"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmSscgbyp" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation enable.<br />
                                                                This bit enables spectrum modulation.<br />
                                                                Set the PLL: PLLDIG_PLLFM[SSCGBYP] field.<br />
                                                                0 - Spread spectrum modulation is not bypassed.<br />
                                                                1 - Spread spectrum modulation is bypassed.<br />
                                                                Note: PLLFM[SSCGBYP] must be cleared and PLLFD[SDMEN] must be set for the frequency modulation mechanism to be enabled.<br />
                                                                Note: Frequency Modulation is only possible if PLLDIG_PLLFM[STEPSIZE] * PLLDIG_PLLFM[STEPNO] less than 18432.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:127b4b4d-c94f-44c9-b048-7e06c469f6fa"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="LABEL" value="Spread spectrum modulation bypass"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'true') = 'false') and
                                                                    (node:fallback(../McuPllFdSdmen, 'false') = 'false')
                                                                )"
                                                               true="To enable spread spectrum modulation, please also enable PLLDIG_PLLFD[SDMEN]."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmSpreadctl" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation type selection:<br />
                                                                    - Center around nominal frequency.<br />
                                                                    - Spread below nominal frequency.<br />
                                                                Configure the PLLDIG_PLLFM[SPREADCTL] field register.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Spread Selection"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2dd7a89b-93fe-46ba-9a1b-2c4ed0222aa0"/>
                                                    <a:da name="DEFAULT" value="Center_Spread"/>
                                                    <a:da name="RANGE">
                                                        <a:v>Down_Spread</a:v>
                                                        <a:v>Center_Spread</a:v>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmStepSize" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Modulation period. <br />
                                                                Sets the PLL: PLLDIG_PLLFM[STEPSIZE] field register. <br />
                                                                STEPSIZE is the binary equivalent of the modulation period variable. <br />
                                                                It is calculated as: StepSize = [McuPllFdMdp * (McuPllDvMfi + McuPllFdMfn / 18432) * 18432] / (100 * McuPllFmStepNo). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2bbe4ea6-bdcb-48fb-b92d-d097d3ebc1f1"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:f( node:fallback(../McuPllFdMdp, num:f(0)) ) *
                                                                        num:f(
                                                                            num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                            num:f(
                                                                                num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                num:f( 18432 )
                                                                            )
                                                                        ) *
                                                                        num:f( 18432 )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( 100 ) *
                                                                        num:f( node:fallback(../McuPllFmStepNo, num:f(1)) )
                                                                    )
                                                                )
                                                            ),
                                                            num:i(0)
                                                        )"/>
                                                    </a:da>
                                                    <a:a name="LABEL" value="STEPSIZE"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=1023"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="( num:i(node:fallback(., 0)) * num:i(node:fallback(../McuPllFmStepNo, 1)) ) &gt; num:i(18432)"
                                                               true="McuPllFmStepSize * McuPllFmStepNo >= 18432. Please lower either StepSize or StepNo."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 0) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:f( node:fallback(../McuPllFdMdp, num:f(0)) ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../McuPllDvMfi, num:f(65)) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../McuPllFdMfn, num:f(0)) ) div
                                                                                            num:f( 18432 )
                                                                                        )
                                                                                    ) *
                                                                                    num:f( 18432 )
                                                                                ) div
                                                                                num:f(
                                                                                    num:f( 100 ) *
                                                                                    num:f( node:fallback(../McuPllFmStepNo, num:f(1)) )
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(0)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFmStepNo" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Increment step. <br />
                                                                Sets the PLL: PLLDIG_PLLFM[STEPNO] field register. <br />
                                                                This field is the binary equivalent of the STEPNO variable. <br />
                                                                It is calculated as: StepNo = McuClockReferencePointFrequency(McuPllClockSelection) / (2 * McuPllFdFmod * McuPllDvRdiv). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:1dcfd8cf-9c8d-4268-9ed3-1a98df1bc3c6"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        node:when(
                                                            ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                            num:i(
                                                                round(
                                                                    num:f(
                                                                        num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000)))
                                                                    ) div
                                                                    num:f(
                                                                        num:f(2) *
                                                                        num:f(node:fallback(../McuPllFdFmod, num:f(0))) *
                                                                        num:f(node:fallback(../McuPllDvRdiv, num:f(1)))
                                                                    )
                                                                )
                                                            ),
                                                            num:i(1)
                                                        )"/>
                                                    </a:da>
                                                    <a:a name="LABEL" value="STEPNO"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=2047"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="( num:i(node:fallback(., 1)) * num:i(node:fallback(../McuPllFmStepSize, 0)) ) &gt; num:i(18432)"
                                                               true="McuPllFmStepSize * McuPllFmStepNo >= 18432. Please lower either StepSize or StepNo."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 1) ) )
                                                            and
                                                            (
                                                                num:i( node:fallback(., 1) ) !=
                                                                (
                                                                    node:when(
                                                                        ( ( node:fallback(../McuPllFdFmod, num:f(0)) != num:f(0) ) and ( node:fallback(../McuPllFdMdp, num:f(0)) != num:f(0) ) ),
                                                                        num:i(
                                                                            round(
                                                                                num:f(
                                                                                    num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000)))
                                                                                ) div
                                                                                num:f(
                                                                                    num:f(2) *
                                                                                    num:f(node:fallback(../McuPllFdFmod, num:f(0))) *
                                                                                    num:f(node:fallback(../McuPllDvRdiv, num:f(1)))
                                                                                )
                                                                            )
                                                                        ),
                                                                        num:i(1)
                                                                    )
                                                                )
                                                            )
                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdFmod" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The modulation frequency. This should be set to the highest frequency component present in the modulating signal. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Modulation Frequency"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500545-8257-4c4c-8de7-b3c848d675d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=32000"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( ( num:f(node:fallback(., 0)) != num:f(0) ) and ( node:fallback(../McuPllFmSscgbyp, 'true') = 'true' ) )"
                                                               true="Cannot have non-zero FM parameters while PLLDIG_PLLFM[SSCGBYP] = 1.
                                                                     Please disable spread spectrum modulation bypassing (i.e. uncheck 'McuPllFmSscgbyp')"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdMdp" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                The modulation depth percentage. This value indicates by how much the modulated variable varies around its unmodulated level. <br />
                                                                It is calculated as the FrequencyDeviation (deviation from the carrier/nominal frequency) divided by the ModulatingSignalFrequency(Fmod). <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Modulation Depth Percentage"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500545-8257-4c4c-8de7-b3c575c362d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=3.0"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( ( num:f(node:fallback(., 0)) != num:f(0) ) and ( node:fallback(../McuPllFmSscgbyp, 'true') = 'true' ) )"
                                                               true="Cannot have non-zero FM parameters while PLLDIG_PLLFM[SSCGBYP] = 1.
                                                                     Please disable spread spectrum modulation bypassing (i.e. uncheck 'McuPllFmSscgbyp')"/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            ( node:fallback(../McuPllFmSpreadctl, 'Center_Spread') = 'Center_Spread')
                                                            and
                                                            (
                                                                ( num:f( node:fallback(., 0) ) &lt; 0.25 )
                                                                or
                                                                ( num:f( node:fallback(., 0) ) &gt; 1.5 )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the supported min/max modulation depth limits for center spread modulation."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            ( node:fallback(../McuPllFmSpreadctl, 'Center_Spread') = 'Down_Spread')
                                                            and
                                                            (
                                                                ( num:f( node:fallback(., 0) ) &lt; 0.5 )
                                                                or
                                                                ( num:f( node:fallback(., 0) ) &gt; 3.0 )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the supported min/max modulation depth limits for down spread modulation."/>
                                                        <a:tst expr="
                                                        (
                                                            not( node:empty( node:fallback(., 0) ) )
                                                            and
                                                            ( node:fallback(../McuPllFmSscgbyp, 'true') = 'false' )
                                                            and
                                                            (
                                                                num:f( node:fallback(., 0) ) &gt;
                                                                (
                                                                    num:f( num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000)))
                                                                    ) div
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) div
                                                                    num:f( node:fallback(../../McuPll_Parameter/PLL_VCO_Frequency, num:f(ecu:get('MCU.PLL.Limits.VCO.High')) ) ) *
                                                                    num:f( 100 )
                                                                )
                                                            )
                                                        )"
                                                        true="The inserted value exceeds the maximum peak-to-peak MDP, which is calculated as ((Fref / McuPllDvRdiv) / PLL_VCO_Frequency) * 100"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdMfn" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Numerator for fractional loop division factor - PLLDIG_PLLFD[MFN]. <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="MFN"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ce500545-8257-4c4c-8de7-a1b919d675d0"/>
                                                    <a:da name="DEFAULT" value="0"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=32767"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                                (
                                                                    (num:i(node:fallback(., 0)) != 0) and
                                                                    (node:fallback(../McuPllFdSdmen, 'false') != 'true')
                                                                )"
                                                               true="Fractional loop division factor works only when PLLDIG_PLLFD[SDMEN] is enabled."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllFdSdmen" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Sigma Delta Modulation Enable. <br />
                                                                Set the PLL: PLLDIG_PLLFD[SDMEN] field register. <br />
                                                                0 - Sigma delta modulation disabled. <br />
                                                                1 - Sigma delta modulation enabled. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:7ae1a21a-e1b3-422b-8976-9096d3cc8c1d"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="LABEL" value="Sigma Delta Modulation Enable"/>
                                                </v:var>

                                                <v:var name="McuPllFdSdm2" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Second Order Sigma Delta Modulation Select.<br />
                                                                Set the PLL: PLLDIG_PLLFD[SDM2] field register.<br />
                                                                0 - 2nd order sigma delta modulation disabled.<br />
                                                                1 - 2nd order sigma delta modulation enabled.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:9f452933-01a1-9886-bc02-5c99511902d1"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="LABEL" value="Second Order Sigma Delta Modulation Enable"/>
                                                </v:var>

                                                <v:var name="McuPllFdSdm3" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Third Order Sigma Delta Modulation Select.<br />
                                                                Set the PLL: PLLDIG_PLLFD[SDM3] field register.<br />
                                                                0 - 3nd order sigma delta modulation disabled.<br />
                                                                1 - 3nd order sigma delta modulation enabled.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84858b59-c913-8338-939d-b74b544d76ac"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="LABEL" value="Third Order Sigma Delta Modulation Enable"/>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI0 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PLL.Terminals.PHI0.Connected') = 'true') or ((ecu:get('MCU.PLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PLL must be enabled before enabling PLL_ODIV0."/>
                                                        <a:tst expr="(ecu:get('MCU.PLL.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true')"
                                                               true="This feature is not supported on this platform. The value of this node should be set to false"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Division value. <br />
                                                                PLLDIG_PLLODIV0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI0 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4ae5a4f-c1bc-4b1e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PLL.Limits.Divider.PHI0')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV1[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI1 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-c913-81d8-9a9d-b74b888e67db"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PLL.Terminals.PHI1.Connected') = 'true') or ((ecu:get('MCU.PLL.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PLL must be enabled before enabling PLL_ODIV1."/>
                                                        <a:tst expr="(ecu:get('MCU.PLL.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true')"
                                                               true="This feature is not support on this platform. The value of this node should be set to false"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Division value. <br />
                                                                PLLDIG_PLLODIV1[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI1 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4ae5a4f-c1bc-4b1e-be5d-bf1cb7e47c80"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv1_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PLL.Limits.Divider.PHI1')"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPll_Parameter" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:7a0ad0a6-0dc2-43c3-8b64-4cafd115af5a"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Calculated values for PLL. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="PLL_PHI0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PLL_PHI0_CLK frequency</strong>. <br />
                                                                The valid range is [48 ... 320] MHz for S32K3XX/S32M27x. <br />
                                                                The valid range is [48 ... 640] MHz for S32K39x. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI0 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:24b24094-5537-49a7-9733-9f25cf0bfd4a"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                             (
                                                                 num:f( num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                             )
                                                                         ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                         (node:when(
                                                                                    node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                    node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:f(19)),
                                                                                    num:f(0)
                                                                                   ) + num:f(1))
                                                                         )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PLL.Limits.PHI0.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.PLL.Limits.PHI0.Low') * num:i(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En, 'false') = 'true'))))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 160000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 160000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:f(19)),
                                                                                                       num:f(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI1_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_PLL_PHI1_CLK frequency</strong>. <br />
                                                                The valid range is [48 ... 320] MHz for S32K3XX/S32M27x. <br />
                                                                The valid range is [48 ... 640] MHz for S32K39x. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI1 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:24b24094-5537-49a7-9733-9d52fc0dfb5a"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                             (
                                                                 num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f( 18432 )
                                                                        )
                                                                    ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PLL.Limits.PHI1.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.PLL.Limits.PHI1.Low') * num:i(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En, 'false') = 'true'))))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 240000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 240000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                 num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                                                 (
                                                                                     num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                            num:f(
                                                                                                num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                                num:f( 18432 )
                                                                                            )
                                                                                        ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                    )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_VCO_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>VCO frequency</strong>. <br />
                                                                The valid range is [640 ... 1280] MHz. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_VCO Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3d15f604-8bbb-4c35-b0ce-e102cb54f572"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPLLEnabled, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                            num:f(
                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                (
                                                                    num:f(
                                                                        num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                             ) div
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                    ) *
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                        num:f(
                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                            num:f(18432)
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PLL.Limits.VCO.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.PLL.Limits.VCO.Low') * num:i(number(node:fallback(../../McuPLLEnabled, 'false') = 'true'))))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPLLEnabled,'false') = 'true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 1280000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 1280000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                                (
                                                                                    num:f(
                                                                                        num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                             ) div
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                                    ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) +
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllFdMfn, num:f(0) ) ) div
                                                                                            num:f(18432)
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(../../McuPLLEnabled,'false')='false') and
                                                            (num:f(node:fallback(., 0)) != 0)
                                                        )"
                                                        true="Please enable PLL ('McuPLLEnabled') before calculating the frequency."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                        </v:ctr>

                                        <v:ctr name="McuPll_1" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This container provides the specific configuration for the PLL.
                                                        Note: Implementation Specific Container.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuPLLAUX"/>
                                            <a:a name="UUID" value="ECUC:bfa6250f-a67b-4911-a690-6cb59e8da246"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PLL.List'), 'PLL_1')" />
                                            </a:a>

                                            <v:var name="McuPLLUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if this PLL is under mcu control <br />
                                                            If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                            The user must still set the values - they are used by the clock reference points  <br />
                                                            Note: Implementation Specific Parameter. <br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PLL under MCU control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1beb37fc-e06b-4db8-a8d7-7853067a63b0"/>
                                                <a:da name="DEFAULT" type="XPath">
                                                    <a:tst expr="(node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'false')"/>
                                                </a:da>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true') and
                                                            (contains(ecu:get('MCU.PLL.List'), 'PLL_1'))
                                                        )"
                                                           true="PLL cannot be under MCU control if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll1UnderMcuControl, 'false') = 'false' ) and
                                                            (contains(ecu:get('MCU.PLL.List'), 'PLL_1'))
                                                        )"
                                                        true="The field McuGeneralConfiguration/McuControlledClocksConfiguration/McuPll1UnderMcuControl must be set to 'true' when PLL is under MCU control."/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuPLLEnabled" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            0 - PLL is disabled.<br />
                                                            1 - PLL is enabled (and can be used as a clock source).<br />
                                                            Note: Implementation Specific Parameter.<br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="PLL Enabled"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:1be167fc-e9fb-4db8-a8d7-758306a736f2"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../../../../McuGeneralConfiguration/McuNoPll, 'true') = 'true') and
                                                            (contains(ecu:get('MCU.PLL.List'), 'PLL_1'))
                                                        )"
                                                           true="The PLL cannot be enabled if McuNoPll is enabled."/>
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(., 'false') = 'true') and
                                                            (node:fallback(../../McuFXOSC/McuFxoscPowerDownCtr, 'true') = 'false') and
                                                            (contains(ecu:get('MCU.PLL.List'), 'PLL_1'))
                                                        )"
                                                           true="The PLL cannot be enabled if FXOSC is disabled."/>
                                                </a:da>
                                            </v:var>

                                            <v:ctr name="McuPll_Configuration" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:127de1d2-ad18-443a-8dc4-a00f8159db55"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Configuration values for PLL. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="McuPllDvRdiv" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Input clock predivider.<br />
                                                                Sets the PLL: PLLDIG_PLLDV[RDIV] field register.<br />
                                                                This field controls the value of the divider on the input clock. The output of the predivider circuit generates the reference clock to the PLL analog loop.<br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2b9cf510-d5d6-407f-8706-bf6b2da7fe3d"/>
                                                    <a:da name="DEFAULT" value="2"/>
                                                    <a:a name="LABEL" value="RDIV"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=7"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPLLEnabled,'false') = 'true')
                                                            )
                                                            and
                                                            (
                                                                (
                                                                 num:f(
                                                                     num:f( num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000)))
                                                                          ) div
                                                                            num:f( node:fallback(., num:f(1) ) )
                                                                      ) &gt; num:i(ecu:get('MCU.PLLAUX.Limits.ClkIn.High'))
                                                                )
                                                                 or
                                                                (
                                                                 num:f(
                                                                     num:f( num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                          ) div
                                                                            num:f( node:fallback(., num:f(1) ) )
                                                                      ) &lt; num:i(ecu:get('MCU.PLLAUX.Limits.ClkIn.Low'))
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="The input frequency for the PLLAUX (ReferenceClockFrequency/Rdiv) must be between 8 MHz and 40 MHz."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllDvMfi" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Loop multiplication factor divider.<br />
                                                                Sets the PLL: PLLDIG_PLLDV[MFI] field register.<br />
                                                                This field controls the value of the divider in the feedback loop. The value specified by the MFI bits
                                                                establishes the multiplication factor applied to the reference frequency. Divider value = MFI, where MFI
                                                                should be choosen such that it does not violate VCO frequency specifications.<br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:395e17d0-f6cc-4be8-af68-8cb92aebebf2"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.PLLAUX.MFI.Default')"/>
                                                    <a:a name="LABEL" value="MFI"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=255"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllDvOdiv2" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                ODIV2 Division value.<br />
                                                                PLLDIG_PLLDV[ODIV2] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV' times the time period of the current input clock to the divider. <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="ODIV2"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4f75a4f-c1bc-4b1e-be5d-af0ab7e46c80"/>
                                                    <a:da name="DEFAULT" value="1"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=63"/>
                                                        <a:tst expr="&gt;=1"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV0[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI0 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:84848bc4-cf83-81d8-9a9d-b74b444d76ac"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PLLAUX.Terminals.PHI0.Connected') = 'true') or ((ecu:get('MCU.PLLAUX.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PLL must be enabled before enabling PLL_ODIV0."/>
                                                        <a:tst expr="(ecu:get('MCU.PLLAUX.Terminals.PHI0.Connected') = 'false') and (node:fallback(., 'false') = 'true')"
                                                               true="This feature is not supported on this platform. The value of this node should be set to false"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv0_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI0 Division value. <br />
                                                                PLLDIG_PLLODIV0[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI0 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4ae5a4f-c1bc-4f9e-be5d-af0ab7e64c80"/>
                                                    <a:da name="DEFAULT" value="3"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv0_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=31"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV1[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI1 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8a048bc4-c913-81d8-9a9d-b74b888e67db"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PLLAUX.Terminals.PHI1.Connected') = 'true') or ((ecu:get('MCU.PLLAUX.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PLL must be enabled before enabling PLL_ODIV1."/>
                                                        <a:tst expr="(ecu:get('MCU.PLLAUX.Terminals.PHI1.Connected') = 'false') and (node:fallback(., 'false') = 'true')"
                                                               true="This feature is not support on this platform. The value of this node should be set to false"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv1_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI1 Division value. <br />
                                                                PLLDIG_PLLODIV1[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI1 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4ae5a4f-c1bc-a11e-be5d-bf1cb7e47c80"/>
                                                    <a:da name="DEFAULT" value="3"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv1_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=31"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv2_En" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI2 Divider enable. <br />
                                                                Set the PLL: PLLDIG_PLLODIV2[DE] field register. <br />
                                                                0 - Divider is disabled <br />
                                                                1 - Divider is enabled <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PHI2 Divider enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:8a048bc4-c913-81e2-9a9d-b74b888e67db"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(ecu:get('MCU.PLLAUX.Terminals.PHI2.Connected') = 'true') or ((ecu:get('MCU.PLLAUX.Terminals.PHI2.Connected') = 'false') and (node:fallback(., 'false') = 'true')) "/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="( (node:fallback(., 'false') = 'true') and (node:fallback(../../McuPLLEnabled, 'false') = 'false') )"
                                                               true="PLL must be enabled before enabling PLL_ODIV2."/>
                                                        <a:tst expr="(ecu:get('MCU.PLLAUX.Terminals.PHI2.Connected') = 'false') and (node:fallback(., 'false') = 'true')"
                                                               true="This feature is not support on this platform. The value of this node should be set to false"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPllOdiv2_Div" type="INTEGER">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                PHI2 Division value. <br />
                                                                PLLDIG_PLLODIV2[DIV] - This field provides the division value for the clock divider. The clock period of the clock after division
                                                                would be 'DIV+1' times the time period of the current input clock to the divider <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="PHI2 Division value"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f4ae5a4f-c1bc-a11e-be5d-bf1cd3e47c80"/>
                                                    <a:da name="DEFAULT" value="3"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="node:fallback(../McuPllOdiv2_En, 'true') = 'true'"/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=31"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                            </v:ctr>

                                            <v:ctr name="McuPll_Parameter" type="IDENTIFIABLE">
                                                <a:a name="UUID" value="ECUC:b22ae191-f192-4e0d-bd07-7cbbf90d2898"/>
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Calculated values for PLL. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>

                                                <v:var name="PLL_PHI0_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>PLLAUX_PHI0_CLK frequency</strong>. <br />
                                                                The valid range is [48 ... 320] MHz for S32K3XX. <br />
                                                                The valid range is [48 ... 640] MHz for S32K39x. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI0 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a2b24094-5537-49a7-9733-9f25cf0bfd4a"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                             (
                                                                 num:f( num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                         (node:when(
                                                                                    node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                    node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:f(19)),
                                                                                    num:f(0)
                                                                                   ) + num:f(1))
                                                                         )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PLLAUX.Limits.PHI0.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.PLLAUX.Limits.PHI0.Low') * num:i(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En, 'false') = 'true'))))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 160000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 160000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false')='true')) *
                                                                                (
                                                                                     num:f( num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:f(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv0_Div,num:f(19)),
                                                                                                       num:f(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI1_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_PLL_PHI1_CLK frequency</strong>. <br />
                                                                The valid range is [48 ... 320] MHz for S32K3XX. <br />
                                                                The valid range is [48 ... 640] MHz for S32K39x. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI1 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:24ba3094-5537-49a7-9733-9d52fc0dfb5a"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                             (
                                                                 num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PLLAUX.Limits.PHI1.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.PLLAUX.Limits.PHI1.Low') * num:i(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En, 'false') = 'true'))))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 240000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 240000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                 num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false')='true')) *
                                                                                 (
                                                                                     num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv1_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                    )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_PHI2_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>CORE_PLL_PHI2_CLK frequency</strong>. <br />
                                                                The valid range is [48 ... 320] MHz for S32K3XX. <br />
                                                                The valid range is [48 ... 640] MHz for S32K39x. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_PHI2 Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:24ba3094-53f7-49a7-9733-9d52fc0dfb5a"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPll_Configuration/McuPllOdiv2_En, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                        num:f(
                                                             num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'false')='true')) *
                                                             (
                                                                 num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                      ) *
                                                                num:f(
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) div
                                                                    num:f(
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                        (node:when(
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'false') = 'true',
                                                                                   node:fallback(../../McuPll_Configuration/McuPllOdiv2_Div,num:i(19)),
                                                                                   num:i(0)
                                                                                  ) + num:f(1))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PLLAUX.Limits.PHI2.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.PLLAUX.Limits.PHI2.Low') * num:i(number(node:fallback(../../McuPll_Configuration/McuPllOdiv2_En, 'false') = 'true'))))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'false')='true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 240000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 240000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                 num:f(number(node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'false')='true')) *
                                                                                 (
                                                                                     num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                          ) *
                                                                                    num:f(
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) ) div
                                                                                        num:f(
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) ) *
                                                                                            num:f( node:fallback(../../McuPll_Configuration/McuPllDvOdiv2, num:f(6) ) ) *
                                                                                            (node:when(
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv2_En,'false') = 'true',
                                                                                                       node:fallback(../../McuPll_Configuration/McuPllOdiv2_Div,num:i(19)),
                                                                                                       num:i(0)
                                                                                                      ) + num:f(1))
                                                                                            )
                                                                                        )
                                                                                    )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="PLL_VCO_Frequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Output value for <strong>VCO frequency</strong>. <br />
                                                                The valid range is [640 ... 1280] MHz. <br />
                                                                Note: This field must not be manually modified. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PLL_VCO Frequency (Calculated)"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:3d15f604-8bbb-4c35-a4ce-e102cb54f572"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="( node:empty(node:fallback(., 0)) ) or ( num:f(node:fallback(., 0)) != 0 ) or (node:fallback(../../McuPLLEnabled, 'false') = 'true')"/>
                                                    </a:a>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="
                                                            num:f(
                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                (
                                                                    num:f(
                                                                        num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                             ) div
                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                    ) *
                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) )
                                                                )
                                                            )
                                                        "/>
                                                    </a:da>
                                                    <a:a name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=ecu:get('MCU.PLLAUX.Limits.VCO.High')"/>
                                                        <a:tst expr="&gt;=((ecu:get('MCU.PLLAUX.Limits.VCO.Low') * num:i(number(node:fallback(../../McuPLLEnabled, 'false') = 'true'))))"/>
                                                    </a:a>
                                                    <a:da name="RANGE" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            (
                                                                (node:fallback(../../McuPLLEnabled,'false') = 'true') or
                                                                (num:f(node:fallback(., 0)) != 0)
                                                            )
                                                            and
                                                            (
                                                                (
                                                                    not( node:empty( node:fallback(., 1280000000) ) )
                                                                    and
                                                                    (
                                                                        num:f( node:fallback(., 1280000000) ) !=
                                                                        (
                                                                            num:f(
                                                                                num:f(number(node:fallback(../../McuPLLEnabled, 'false') = 'true')) *
                                                                                (
                                                                                    num:f(
                                                                                        num:f( num:i(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000)))
                                                                                             ) div
                                                                                        num:f( node:fallback(../../McuPll_Configuration/McuPllDvRdiv, num:f(1) ) )
                                                                                    ) *
                                                                                    num:f( node:fallback(../../McuPll_Configuration/McuPllDvMfi, num:f(65) ) )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        "
                                                        true="Please press the button to calculate the value automatically."/>
                                                    <a:tst expr="
                                                        (
                                                            (node:fallback(../../McuPLLEnabled,'false')='false') and
                                                            (num:f(node:fallback(., 0)) != 0)
                                                        )"
                                                        true="Please enable PLL ('McuPLLEnabled') before calculating the frequency."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>

                                        </v:ctr>

                                        <v:lst name="McuClkMonitor" type="MAP">
                                            <a:da name="MIN" type="XPath" expr="num:i(count(ecu:list('MCU.CMU_FC.List')))"/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="count(./*) &gt; num:i(count(ecu:list('MCU.CMU_FC.List')))"
                                                    true="The number of McuClkMonitor more than maximum value allowed"/>
                                            </a:da>
                                            <v:ctr name="McuClkMonitor" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the specific configuration (parameters) of the Clock Monitor Unit. <br />
                                                            Each CMU is independently programmed. FIRC and FXOSC are used as the clock monitor references. <br />
                                                            Detailed information on the CMUs can be found in the Clock Monitor Unit chapter. <br />
                                                            This parameter is enabled only if "McuClockSrcFailureNotification" is enabled. <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="REQUIRES-INDEX" value="true"/>
                                                <a:a name="TAB" value="McuClkMonitor"/>
                                                <a:a name="UUID" value="ECUC:8cbac65c-6a3d-4b29-b3a4-b1bebf97a468"/>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS"  type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                </a:a>

                                                <v:var name="McuClockMonitorUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if this clock monitor is under mcu control <br />
                                                                If it is FALSE then the mcu driver will not write the corresponding registers. <br />
                                                                The user must still set the values - they are used by the clock reference points  <br />
                                                                Note: Implementation Specific Parameter. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Mcu Clock Monitor under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e424418b-1f93-453a-b9b2-ac018578243e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuClkMonitorEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Enables/Disables the clock monitor (CMU_FC_GCR[FCE]). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="CMU Enable"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7aee6bc-63df-462e-b6d3-ff74458067e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                               (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuModuleConfiguration/McuClockSrcFailureNotification, 'ENABLED') = 'DISABLED')
                                                               )"
                                                               true="The CMU can be enabled only if 'McuModuleConfiguration/McuClockSrcFailureNotification' is set to 'ENABLED'."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuCmuName" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the name of the CMU. <br />
                                                                With name convention: CMU_FC_[Number Of CMU Unit]_[Name of Monitored clock]. <br />
                                                                Note: The CMU_FC_5 is monitoring HSE_CLK, it accessible only by HSE_B Cortex-M0+ core.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Mcu CMU Name"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:0fef779b-bf2c-466a-9110-56a48d8e3e16"/>
                                                    <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.CMU_FC.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.CMU_FC.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="text:uniq(node:fallback(../../*/McuCmuName, ecu:list('MCU.CMU_FC.List')), node:fallback(., ecu:get('MCU.CMU_FC.Default')))"
                                                            false="Duplicated value, McuCmuName must be unique across McuClkMonitor."/>
                                                        <a:tst expr="node:fallback(., ecu:get('MCU.CMU_FC.Default')) = ecu:list('MCU.CMU_FC.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"
                                                            false="Number of CMU_FC Unit must be increased according to the index. Please press the button to calculate the value automatically."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuFHHAsyncEventEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field is used to enable/disable FHH asynchronous event at the module boundary. (CMU_FC_IER[FHHAEE]).<br />
                                                                0 - Asynchronous FHH Event is Disabled<br />
                                                                1 - Asynchronous FHH Event is Enabled<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Enable FHH Asynchronous Event"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7a166bc-63df-462e-b6d3-ff74458067e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                         <a:tst expr="(
                                                                        (node:fallback(.,'false') = 'true') and
                                                                        (node:fallback(../McuFHHInterruptEn,'false') = 'true')
                                                                      )"
                                                                true="Asynchronous FHH and synchronous FHH interrupts cannot be simultaneously enabled.
                                                                       To enable asynchronous FHH interrupts, check 'McuFHHAsyncEventEn' and uncheck 'McuFHHInterruptEn'.
                                                                       To enable synchronous FHH interrupts, check 'McuFHHInterruptEn' and uncheck 'McuFHHAsyncEventEn'."/>
                                                    </a:da>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(node:fallback(../McuClkMonitorEn, 'true') = 'true')"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuFLLAsyncEventEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field is used to enable/disable FLL asynchronous event at the module boundary. (CMU_FC_IER[FLLAEE]).<br />
                                                                0 - Asynchronous FLL Event is Disabled<br />
                                                                1 - Asynchronous FLL Event is Enabled<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Enable FLL Asynchronous Event"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7a166bc-63df-462e-b6d3-ff74459067e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:da name="INVALID" type="XPath">
                                                         <a:tst expr="(
                                                                        (node:fallback(.,'false') = 'true') and
                                                                        (node:fallback(../McuFLLInterruptEn,'false') = 'true')
                                                                      )"
                                                                true="Asynchronous FLL and synchronous FLL interrupts cannot be simultaneously enabled.
                                                                       To enable asynchronous FLL interrupts, check 'McuFLLAsyncEventEn' and uncheck 'McuFLLInterruptEn'.
                                                                       To enable synchronous FLL interrupts, check 'McuFLLInterruptEn' and uncheck 'McuFLLAsyncEventEn'."/>
                                                    </a:da>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(node:fallback(../McuClkMonitorEn, 'true') = 'true')"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuFHHInterruptEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field is used to enable/disable FHH interrupt at the module boundary. (CMU_FC_IER[FHHIE]).<br />
                                                                0 - FHH Interrupt is Disabled<br />
                                                                1 - FHH Interrupt is Enabled<br />
                                                                This field is only supported for CMU_FC_0.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Enable FHH Interrupt"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7a16eba-63df-462e-b6d3-ff74f57a67e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(node:fallback(../McuClkMonitorEn, 'true') = 'true')
                                                                 and (
                                                                        (text:contains(node:value(../McuCmuName),'CMU_FC_0'))
                                                                     )"/>
                                                    </a:a>
                                                </v:var>

                                                <v:var name="McuFLLInterruptEn" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This field is used to enable/disable FLL interrupt at the module boundary. (CMU_FC_IER[FLLIE]).<br />
                                                                0 - FLL Interrupt is Disabled<br />
                                                                1 - FLL Interrupt is Enabled<br />
                                                                This field is only supported for CMU_FC_0.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Enable FLL Interrupt"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c7a16eba-63df-462e-b6d3-ff74db9e67e5"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                    <a:a name="EDITABLE" type="XPath">
                                                        <a:tst expr="(node:fallback(../McuClkMonitorEn, 'true') = 'true')
                                                                 and (
                                                                        (text:contains(node:value(../McuCmuName),'CMU_FC_0'))
                                                                     )"/>
                                                    </a:a>
                                                </v:var>
                                            </v:ctr>
                                        </v:lst>

                                        <!-- /** @implements McuClockReferencePoint_Object */ -->
                                        <v:lst name="McuClockReferencePoint" type="MAP">
                                            <a:da name="MIN" value="1"/>
                                            <v:ctr name="McuClockReferencePoint" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container defines a reference point in the Mcu Clock tree. It defines the frequency which then can be used by other modules as an input value. Lower multiplictiy is 1, as even in the simpliest case (only one frequency is used), there is one frequency to be defined.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="REQUIRES-INDEX" value="true"/>
                                                <a:a name="UUID" value="ECUC:dcc84cdf-93ef-4cca-821b-b1a7f56dcfec"/>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                </a:a>

                                                <!-- /** @implements McuClockReferencePointFrequency_Object */ -->
                                                <v:var name="McuClockReferencePointFrequency" type="FLOAT">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This is the frequency for the specific instance of the McuClockReferencePoint container.
                                                                It shall be given in Hz.
                                                                Calculated value.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="LABEL" value="Mcu Clock Reference Point Frequency"/>
                                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56f2133a-6d79-4c14-8608-708988a4fd7e"/>
                                                    <a:da name="DEFAULT" type="XPath">
                                                        <a:tst expr="num:f
                                                                        (   (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'CORE_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'AIPS_PLAT_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'AIPS_SLOW_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider2_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'HSE_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider3_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'DCM_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider4_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'LBIST_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider5_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'QSPI_MEM_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider6_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'CM7_CORE_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider7_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'STM0_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux1/McuClockMux1Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'STM1_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux2/McuClockMux2Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FLEXCAN_PE_CLK0_2'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux3/McuClockMux3Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FLEXCAN_PE_CLK3_5'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux4/McuClockMux4Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FLEXCAN_PE_CLK3_7'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux4/McuClockMux4Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'CLKOUT_STANDBY'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux5/McuClockMux5Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'CLKOUT_RUN'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux6/McuClockMux6Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'EMAC_CLK_RX'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux7/McuClockMux7Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'EMAC_CLK_TX'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux8/McuClockMux8Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'EMAC_CLK_TS'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux9/McuClockMux9Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'QuadSPI_SFCK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'QSPI_2XSFIF'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'QSPI_SFCK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, 48000000)) div num:f(2))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'RTC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuRtcClockSelect/McuRtc_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'TRACE_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux11/McuClockMux11Divider0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'EMAC_TX_RMII_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux12/McuClockMux12Divider0_Frequency, 50000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'STM2_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux13/McuClockMux13Divider0_Frequency, 120000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'USDHC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux14/McuClockMux14Divider0_Frequency, 120000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'LFAST_REF_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClockMux15Divider0_Frequency, 20000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'GMAC1_RX_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClockMux15Divider0_Frequency, 20000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'SWG_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux16/McuClockMux16Divider0_Frequency, 20000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'GMAC1_TX_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux16/McuClockMux16Divider0_Frequency, 20000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'GMAC1_RMII_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux17/McuClockMux17Divider0_Frequency, 20000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'STM3_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux18/McuClockMux18Divider0_Frequency, 20000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'AES_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux19/McuClockMux19Divider0_Frequency, 20000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FIRC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:i(48000000))))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'SIRC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuSIRC/McuSIRC_Frequency, num:i(32000))))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'SXOSC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuSXOSC/McuSXOSC_Frequency, 32768)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FXOSC_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, 40000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'PLL_PHI0_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'PLL_PHI1_CLK'))) *
                                                                                (num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, 48000000)))
                                                                            ) +
                                                                            (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'SCS_CLK'))) *
                                                                                (((num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, 48000000))) *
                                                                                 (num:f(number( node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0_Source, 'FIRC_CLK') = 'PLL_PHI0_CLK')))) +
                                                                                 ((num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, 48000000))) *
                                                                                 (num:f(number( node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0_Source, 'FIRC_CLK') = 'FIRC_CLK'))))
                                                                                )
                                                                            )
                                                                        )"/>
                                                    </a:da>
                                                    <a:a name="RANGE" type="XPath">
                                                        <a:tst expr="not(node:empty(node:fallback(., 48000000))) and
                                                                        (   num:f(node:fallback(., 0)) !=
                                                                            num:f
                                                                                (
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'CUSTOM'))) *
                                                                                        (num:f(node:fallback(../McuClockReferencePointFrequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'CORE_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'AIPS_PLAT_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider1_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'AIPS_SLOW_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider2_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'HSE_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider3_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'DCM_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider4_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'LBIST_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider5_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'QSPI_MEM_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider6_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'CM7_CORE_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClockMux0Divider7_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'STM0_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux1/McuClockMux1Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'STM1_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux2/McuClockMux2Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FLEXCAN_PE_CLK0_2'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux3/McuClockMux3Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FLEXCAN_PE_CLK3_5'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux4/McuClockMux4Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FLEXCAN_PE_CLK3_7'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux4/McuClockMux4Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'CLKOUT_STANDBY'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux5/McuClockMux5Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'CLKOUT_RUN'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux6/McuClockMux6Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'EMAC_CLK_RX'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux7/McuClockMux7Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'EMAC_CLK_TX'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux8/McuClockMux8Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'EMAC_CLK_TS'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux9/McuClockMux9Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'QuadSPI_SFCK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'QSPI_2XSFIF'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'QSPI_SFCK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClockMux10Divider0_Frequency, 48000000)) div num:f(2))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'RTC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuRtcClockSelect/McuRtc_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'TRACE_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux11/McuClockMux11Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'STM2_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux13/McuClockMux13Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'USDHC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux14/McuClockMux14Divider0_Frequency, 48000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'LFAST_REF_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClockMux15Divider0_Frequency, 20000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'GMAC1_RX_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClockMux15Divider0_Frequency, 20000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'SWG_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux16/McuClockMux16Divider0_Frequency, 20000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'GMAC1_TX_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux16/McuClockMux16Divider0_Frequency, 20000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'GMAC1_RMII_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux17/McuClockMux17Divider0_Frequency, 20000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'STM3_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux18/McuClockMux18Divider0_Frequency, 20000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'AES_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux19/McuClockMux19Divider0_Frequency, 20000000)))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FIRC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, num:i(48000000))))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'SIRC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuSIRC/McuSIRC_Frequency, num:i(32000))))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'SXOSC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuSXOSC/McuSXOSC_Frequency, num:i(32768))))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'FXOSC_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuFXOSC/McuFXOSC_Frequency, num:i(40000000))))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'PLL_PHI0_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, num:i(160000000))))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'PLL_PHI1_CLK'))) *
                                                                                        (num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI1_Frequency, num:i(240000000))))
                                                                                    ) +
                                                                                    (   (num:f(number( node:fallback(../McuClockFrequencySelect, 'CORE_CLK') = 'SCS_CLK'))) *
                                                                                        (((num:f(node:fallback(../../../McuPll_0/McuPll_Parameter/PLL_PHI0_Frequency, 48000000))) *
                                                                                        (num:f(number( node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0_Source, 'FIRC_CLK') = 'PLL_PHI0_CLK')))) +
                                                                                        ((num:f(node:fallback(../../../McuFIRC/McuFIRC_Frequency, 48000000))) *
                                                                                        (num:f(number( node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0_Source, 'FIRC_CLK') = 'FIRC_CLK'))))
                                                                                        )
                                                                                    )
                                                                                )
                                                                        )"
                                                        true="Please press the button to calculate the value automatically."/>
                                                    </a:a>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=5000000000"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuClockFrequencySelect" type="ENUMERATION">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Select clock source for the specific instance of the McuClockReferencePoint container. <br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="LABEL" value="Mcu Clock Frequency Select" />
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e699f695-3db5-4f60-a174-5aa4454a697f"/>
                                                    <a:da name="DEFAULT" value="CORE_CLK"/>
                                                    <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.ClockReferencePoints.List')"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='CORE_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider0 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='AIPS_PLAT_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div1_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider1 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div1_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='AIPS_SLOW_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div2_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider2 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div2_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='HSE_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div3_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider3 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div3_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='DCM_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div4_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider4 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div4_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='LBIST_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div5_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider5 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div5_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='QSPI_MEM_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div6_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider6 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div6_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='CM7_CORE_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux0/McuClkMux0Div7_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux0 Divider7 should be enabled. Please check node McuCgm0ClockMux0/McuClkMux0Div7_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='STM0_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux1/McuClkMux1Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux1 Divider0 should be enabled. Please check node McuCgm0ClockMux1/McuClkMux1Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='STM1_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux2/McuClkMux2Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux2 Divider0 should be enabled. Please check node McuCgm0ClockMux2/McuClkMux2Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='FLEXCAN_PE_CLK0_2') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux3/McuClkMux3Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux3 Divider0 should be enabled. Please check node McuCgm0ClockMux3/McuClkMux3Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='FLEXCAN_PE_CLK3_5') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux4/McuClkMux4Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux4 Divider0 should be enabled. Please check node McuCgm0ClockMux4/McuClkMux4Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='CLKOUT_STANDBY') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux5/McuClkMux5Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux5 Divider0 should be enabled. Please check node McuCgm0ClockMux5/McuClkMux5Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='CLKOUT_RUN') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux6/McuClkMux6Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux6 Divider0 should be enabled. Please check node McuCgm0ClockMux6/McuClkMux6Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='EMAC_CLK_RX') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux7/McuClkMux7Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux7 Divider0 should be enabled. Please check node McuCgm0ClockMux7/McuClkMux7Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='EMAC_CLK_TX') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux8/McuClkMux8Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux8 Divider0 should be enabled. Please check node McuCgm0ClockMux8/McuClkMux8Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='EMAC_CLK_TS') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux9/McuClkMux9Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux9 Divider0 should be enabled. Please check node McuCgm0ClockMux9/McuClkMux9Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='QuadSPI_SFCK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClkMux10Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux10 Divider0 should be enabled. Please check node McuCgm0ClockMux10/McuClkMux10Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='QSPI_2XSFIF') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClkMux10Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux10 Divider0 should be enabled. Please check node McuCgm0ClockMux10/McuClkMux10Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='QSPI_SFCK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux10/McuClkMux10Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux10 Divider0 should be enabled. Please check node McuCgm0ClockMux10/McuClkMux10Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='TRACE_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux11/McuClkMux11Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux11 Divider0 should be enabled. Please check node McuCgm0ClockMux11/McuClkMux11Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='EMAC_TX_RMII_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux12/McuClkMux12Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux12 Divider0 should be enabled. Please check node McuCgm0ClockMux12/McuClkMux12Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='STM2_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux13/McuClkMux13Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux13 Divider0 should be enabled. Please check node McuCgm0ClockMux13/McuClkMux13Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='USDHC_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux14/McuClkMux13Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux14 Divider0 should be enabled. Please check node McuCgm0ClockMux14/McuClkMux14Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='LFAST_REF_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClkMux15Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux15 Divider0 should be enabled. Please check node McuCgm0ClockMux15/McuClkMux15Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='GMAC1_RX_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux15/McuClkMux15Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux15 Divider0 should be enabled. Please check node McuCgm0ClockMux15/McuClkMux15Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='SWG_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux16/McuClkMux16Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux16 Divider0 should be enabled. Please check node McuCgm0ClockMux16/McuClkMux16Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='GMAC1_TX_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux16/McuClkMux16Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux16 Divider0 should be enabled. Please check node McuCgm0ClockMux16/McuClkMux16Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='GMAC1_RMII_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux17/McuClkMux17Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux17 Divider0 should be enabled. Please check node McuCgm0ClockMux17/McuClkMux17Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='STM3_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux18/McuClkMux18Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux18 Divider0 should be enabled. Please check node McuCgm0ClockMux18/McuClkMux18Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='AES_CLK') and
                                                                        (node:fallback(../../../McuCgm0SettingConfig/McuCgm0ClockMux19/McuClkMux19Div0_En,'true')='false')
                                                                     )"
                                                            true=" Error: CGM0 Clock Mux19 Divider0 should be enabled. Please check node McuCgm0ClockMux19/McuClkMux19Div0_En"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='SXOSC_CLK') and
                                                                        (node:fallback(../../../McuSXOSC/McuSxoscPowerDownCtr,'true')='false')
                                                                     )"
                                                            true=" Error: SXOSC_CLK should be enabled. Please check node McuSXOSC/McuSxoscPowerDownCtr"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='FXOSC_CLK') and
                                                                        (node:fallback(../../../McuFXOSC/McuFxoscPowerDownCtr,'true')='false')
                                                                     )"
                                                            true=" Error: FXOSC_CLK should be enabled. Please check node McuFXOSC/McuFxoscPowerDownCtr"/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='PLL_PHI0_CLK') and
                                                                        (node:fallback(../../../McuPll_0/McuPLLEnabled,'true')='false')
                                                                     )"
                                                            true=" Error: PLL_CLK should be enabled. Please check node McuPLLEnabled on McuPll_0."/>
                                                        <a:tst expr="(  (node:fallback(., 'CORE_CLK')='PLL_PHI1_CLK') and
                                                                        (node:fallback(../../../McuPll_0/McuPLLEnabled,'true')='false')
                                                                     )"
                                                            true=" Error: PLL_CLK should be enabled. Please check node McuPLLEnabled on McuPll_0."/>
                                                    </a:da>
                                                </v:var>
                                            </v:ctr>
                                        </v:lst>

                                    </v:ctr>
                                </v:lst>

                                <!-- /** @implements McuDemEventParameterRefs_Object */ -->
                                <v:ctr name="McuDemEventParameterRefs" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="McuDemEventParameterRefs"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                Container for the references to DemEventParameter elements which shall be invoked using the API Dem_SetEventStatus API in case the corresponding error occurs.  <br />
                                                The EventId is taken from the referenced DemEventParameter&apos;s DemEventId value.
                                                The standardized errors are provided in the container and can be extended by vendor specific error references. <br />
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="UUID" value="ECUC:092fb5e2-9ecc-45ad-8121-e1210e335cec"/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                    </a:a>

                                    <v:ref name="MCU_E_TIMEOUT_FAILURE" type="SYMBOLIC-NAME-REFERENCE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Reference to configured DEM event to report Timeout failure. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:8f45d08b-315d-421b-8457-c3c09bc5feda"/>
                                        <a:a name="OPTIONAL" value="true"/>
                                        <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                                        <a:da name="INVALID" type="XPath">
                                             <a:tst expr="node:refvalid(.)" false="Invalid XPath or empty reference."/>
                                        </a:da>
                                    </v:ref>

                                    <v:ref name="MCU_E_INVALIDFXOSC_CONFIG" type="SYMBOLIC-NAME-REFERENCE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Reference to configured DEM event to report a FXOSC invalid configuration event.<br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:5b3ee483-b632-4e06-838d-8f4924370747"/>
                                        <a:a name="OPTIONAL" value="true"/>
                                        <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                                        <a:da name="INVALID" type="XPath">
                                             <a:tst expr="node:refvalid(.)" false="Invalid XPath or empty reference."/>
                                        </a:da>
                                    </v:ref>

                                    <v:ref name="MCU_E_CLOCKMUXSWITCH_FAILURE" type="SYMBOLIC-NAME-REFERENCE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Reference to configured DEM event to report a failed clock switch request. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:5b3ee483-f132-4e06-838d-8f4924370747"/>
                                        <a:a name="OPTIONAL" value="true"/>
                                        <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                                        <a:da name="INVALID" type="XPath">
                                             <a:tst expr="node:refvalid(.)" false="Invalid XPath or empty reference."/>
                                        </a:da>
                                    </v:ref>

                                    <!-- /** @implements MCU_E_CLOCK_FAILURE_Object */ -->
                                    <v:ref name="MCU_E_CLOCK_FAILURE" type="REFERENCE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Reference to configured DEM event to report Clock source failure. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                        <a:a name="REQUIRES-SYMBOLIC-NAME-VALUE" value="true"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:7b1e9402-2922-49e6-a094-efe3ce59f8c0"/>
                                        <a:a name="OPTIONAL" value="true"/>
                                        <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                                        <a:da name="INVALID" type="XPath">
                                             <a:tst expr="node:refvalid(.)" false="Invalid XPath or empty reference."/>
                                        </a:da>
                                    </v:ref>
                                </v:ctr>

                                <!-- /** @implements McuModeSettingConf_Object */ -->
                                <v:lst name="McuModeSettingConf" type="MAP">
                                    <a:da name="MIN" value="1"/>
                                    <v:ctr name="McuModeSettingConf" type="IDENTIFIABLE">
                                        <a:a name="REQUIRES-INDEX" value="true"/>
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the Mode setting of the MCU. <br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:9d338d97-6006-469a-8111-ac7c93ba66ec"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>


                                        <!-- /** @implements McuMode_Object */ -->
                                        <v:var name="McuMode" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter shall represent the ID of the MCU mode.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="Mode ID"/>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:f296ee65-d7f7-4f6d-ae0c-562449d649b4"/>
                                            <a:da name="DEFAULT" type="XPath" expr="num:i(node:fallback(node:current()/../@index, num:i(0)))"/>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="text:uniq(node:fallback(../../*/McuMode, text:split('1 2 3')), node:fallback(., 0))"
                                                    false="Duplicated value, McuMode ID must be unique across McuModeSettingConf. Use the Calculate button to calculate correct default value."/>
                                                <a:tst expr="node:fallback(., 0) &lt; count(node:fallback(../../*, 1))"
                                                    false="Value out of range: must be in range 0 to N-1 (N is number of configured Mode setting). Use the Calculate button to calculate correct default value."/>
                                            </a:da>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=255"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                        </v:var>

                                        <v:var name="McuPowerMode" type="ENUMERATION">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter selects the Power Mode to be used. <br />
                                                        For valid Mode transitions refers to "MC_ME Mode Diagram" from Reference Manual. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="Operating Mode"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:4e601bd3-e1bf-40ea-8318-740303d8615e"/>
                                            <a:da name="DEFAULT" value="RUN"/>
                                            <a:da name="RANGE">
                                                <a:v>RUN</a:v>
                                                <a:v>CORE_STANDBY</a:v>
                                                <a:v>SOC_PREPARE_STANDBY</a:v>
                                                <a:v>SOC_STANDBY</a:v>
                                                <a:v>STANDBY</a:v>
                                                <a:v>SOC_PREPARE_FAST_STANDBY</a:v>
                                                <a:v>SOC_FAST_STANDBY</a:v>
                                                <a:v>FAST_STANDBY</a:v>
                                                <a:v>FUNC_RESET</a:v>
                                                <a:v>DEST_RESET</a:v>
                                            </a:da>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst
                                                    expr="
                                                    (
                                                        (
                                                            ( node:fallback(., 'RUN') = 'CORE_STANDBY' ) or
                                                            ( node:fallback(., 'RUN') = 'SOC_PREPARE_STANDBY' ) or
                                                            ( node:fallback(., 'RUN') = 'SOC_STANDBY' ) or
                                                            ( node:fallback(., 'RUN') = 'STANDBY' ) or
                                                            ( node:fallback(., 'RUN') = 'SOC_PREPARE_FAST_STANDBY' ) or
                                                            ( node:fallback(., 'RUN') = 'SOC_FAST_STANDBY' ) or
                                                            ( node:fallback(., 'RUN') = 'FAST_STANDBY' )
                                                        ) and
                                                        ( node:fallback(../../../../McuGeneralConfiguration/McuEnterLowPowerMode, 'false') = 'false' )
                                                    )"
                                                       true="Standby mode transitions are invalid when 'McuGeneralConfiguration/McuEnterLowPowerMode' is disabled."/>
                                            </a:da>
                                        </v:var>

                                        <v:var name="McuMainCoreSelect" type="ENUMERATION">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:
                                                        <html>
                                                        This field is used to select which core will be designated as the Main Core. <br />
                                                        The driver will configure the MC_ME_MAIN_COREID[PIDX] and MC_ME_MAIN_COREID[CIDX]
                                                        register fields based on this parameter. <br />
                                                        This field is modifiable only when McuPowerMode = 'SOC_STANDBY'. <br />
                                                        Note: Implementation Specific Parameter. <p/>
                                                        </html>
                                                    ]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="Main Core Select" />
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:aac952ef-7cb7-4b94-acc5-a7c1ed34fd5b"/>
                                            <a:da name="DEFAULT" type="XPath" expr="ecu:get('MCU.MC_ME.Cores.Default')"/>
                                            <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.MC_ME.Cores.List')"/>
                                            <a:a name="EDITABLE" type="XPath" expr="(node:fallback(../McuPowerMode, 'RUN') = 'SOC_STANDBY') or (node:fallback(../McuPowerMode, 'RUN') = 'STANDBY') or (node:fallback(../McuPowerMode, 'RUN') = 'SOC_FAST_STANDBY') or (node:fallback(../McuPowerMode, 'RUN') = 'FAST_STANDBY')"/>
                                        </v:var>

                                        <v:var name="McuCoreLockStepEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        Configures the MC_ME_PRTN0_CORE_LOCKSTEP[LS2] register field.<br />
                                                        This bit provides the lockstep indication to Core 4 & Core 5 in partition 0. <br />
                                                        0 - Lockstep Disabled. <br />
                                                        1 - Lockstep Enabled. <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="Core Lockstep Enable"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:c1a8f304-b7c8-41c3-a237-4076f6112233"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="
                                                    (
                                                        (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_4')) and
                                                        (node:fallback(., 'false') = 'true') and
                                                        (node:fallback(../McuPartitionConfiguration/McuPartition0Config/McuCore4Configuration/McuCoreClockEnable, 'true') = 'false')
                                                    )"
                                                    true="The clock to core 4 must be enabled first in order to enable the Lockstep Mode of the CM7_2 core within the partition 0 (i.e. ../McuPartitionConfiguration/McuPartition0Config/McuCore4Configuration/McuCoreClockEnable = 'true')."/>
                                                <a:tst expr="not(contains(node:value(as:modconf('Resource')[1]/ResourceGeneral/ResourceSubderivative), 's32k39')) and (node:fallback(., 'false') = 'true')"
                                                    true="Lockstep control just support on S32K39x for Core CM_2."/>
                                            </a:da>
                                        </v:var>

                                        <v:var name="McuEnableSleepOnExit" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        Indicates sleep-on-exit when returning from Handler mode to Thread mode:<p/>
                                                        0 - Do not sleep when returning to Thread mode.<p/>
                                                        1 - Enter sleep, or deep sleep, on return from an ISR.<p/>
                                                        Setting this bit to 1 enables an interrupt driven application to avoid returning to an empty main application.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="LABEL" value="Mcu Enable Sleep On Exit"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:28436a22-daa7-4eee-8862-0a368a3c80ef"/>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="EDITABLE" type="XPath">
                                                <a:tst expr="
                                                    (node:fallback(../McuPowerMode, 'RUN') = 'CORE_STANDBY') or
                                                    (node:fallback(../McuPowerMode, 'RUN') = 'SOC_STANDBY') or
                                                    (node:fallback(../McuPowerMode, 'RUN') = 'STANDBY')
                                                "/>
                                            </a:a>
                                        </v:var>

                                        <v:ctr name="McuPartitionConfiguration" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This section generates control signals based on the logic partitions
                                                        implemented inside it. The logic partition refers to SoC blocks controlled by single
                                                        partition of MC_ME. Each of the MC_ME partition implements or control a set of logic
                                                        functionality using the MC_ME partition processes hardware.
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="UUID" value="ECUC:4eb413e5-e88d-4fe5-8e29-28badf24b6c9"/>

                                            <v:ctr name="McuPartition0Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                        This container contains the configuration for Partition 0.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition0Config"/>
                                                <a:a name="UUID" value="ECUC:6d197fc7-452a-4168-af62-3f05f950e135"/>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0 or PRST0). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition0 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-32d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 0 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_PCONF). <br />
                                                                This means that the setting configured by node "McuPartitionClockEnable" will be left untouched
                                                                (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition0 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23b836d63c52"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 0's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN0_COFB0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_COFB0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN0_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN0_COFB0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a89255b4-f30b-41da-a545-e607c188037e"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition0.COFBs.List'),'COFB_0')" />
                                                    </a:a>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (contains(ecu:get('MCU.MC_ME.Partition0.COFBs.List'),'COFB_0')) and
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN0_COFB0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb1UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN0_COFB1 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_COFB1). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN0_COFB1'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN0_COFB1 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23b836c36b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN0_COFB1 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN0_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled. <br />
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition0 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-35b9cac34438"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:ctr name="McuCore0Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the CM7_0 core within Partition 0. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51dd8220-8b81-4cc9-9cff-346e19b4558d"/>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if CM7_0 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_CORE0 and PRST0_0).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CM7_0 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56613a64-57c3-4935-bb5f-23b843c16b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when CM7_0 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE0_PCONF[CCE] register field.<br />
                                                                    This bit controls whether the clock to CM7_0 is enabled or disabled. <br />
                                                                    0 - CM7_0 Core Clock is Disabled. <br />
                                                                    1 - CM7_0 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN0_CORE0_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_0 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:f68ae507-338e-4c1a-8e94-76cacdafd0c5"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 0 must be enabled first in order to enable the clock of the CM7_0 core within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE0_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_0 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_0 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_0 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:cab556a4-fd92-4e77-80db-6809aebd6a11"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE0_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_0 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_0 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_0 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5179e367-2481-4677-b488-51c3eb1cd797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>
                                                </v:ctr>

                                                <v:ctr name="McuCore1Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the CM7_1 core within Partition 0. <br />
                                                                This node is not supported on S32K344/S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:51dd8220-8b81-4cc9-9c2d-346e19b4558d"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_1')" />
                                                    </a:a>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if CM7_1 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_CORE1 and PRST0_0).<br />
                                                                    This node is not supported on S32K344/S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CM7_1 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:56612e64-57c3-4935-bb5f-23b843c16b54"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when CM7_1 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE1_PCONF[CCE] register field.<br />
                                                                    This bit controls whether the clock to CM7_1 is enabled or disabled. <br />
                                                                    0 - CM7_1 Core Clock is Disabled. <br />
                                                                    1 - CM7_1 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN0_CORE1_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    This node is not supported on S32K344/S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_1 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:a68a3e07-33e9-bc1a-8a04-74fe9aa2e03f"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 0 must be enabled first in order to enable the clock of the CM7_1 core within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE1_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_1 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_1 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    This node is not supported on S32K344/S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_1 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:18e656a4-fd92-4e7e-81d0-3e24a97c4bb6"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE1_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_1 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_1 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    This node is not supported on S32K344/S32K314/S32K312/S32K311/S32K310/S32M27x derivatives. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_1 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:5177f367-2481-4677-b488-51c3eb1cd797"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>

                                                <v:ctr name="McuCore4Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the CM7_2 core within Partition 0. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:75a6e888-55da-4630-b776-05fac94b8f93"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_4')" />
                                                    </a:a>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if CM7_2 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_CORE4).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CM7_2 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:f28ae780-4aa8-41ff-a902-bbb28f91418b"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_4')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when CM7_2 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE4_PCONF[CCE] register field.<br />
                                                                    This bit controls whether the clock to CM7_2 is enabled or disabled. <br />
                                                                    0 - CM7_2 Core Clock is Disabled. <br />
                                                                    1 - CM7_2 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN0_CORE4_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_2 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:c1a8f304-b7c8-41c3-a237-4076f626e260"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_4')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 0 must be enabled first in order to enable the clock of the CM7_2 core within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE4_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_2 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_2 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_2 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:2ba8e5c6-9ec7-4d11-8a49-72586c9393ef"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_4')) and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE4_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_2 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_2 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_2 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:7a57eba2-bc06-467b-94b3-702ee767c778"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_4')) and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>
                                                </v:ctr>
                                                <v:ctr name="McuCore3Configuration" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This container contains the configuration for the CM7_3 core within Partition 0. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="UUID" value="ECUC:75a6e888-55da-4630-b776-05fac94b8f94"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_3')" />
                                                    </a:a>

                                                    <v:var name="McuCoreUnderMcuControl" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Set this to TRUE if CM7_3 is under MCU control.<br />
                                                                    If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN0_CORE3).<br />
                                                                    Note: Implementation Specific Parameter.<br />
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="CM7_3 Under MCU Control"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:f28ae780-4aa8-41ff-a902-bbb28f91428b"/>
                                                        <a:da name="DEFAULT" value="true"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_3')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionUnderMcuControl, 'true') = 'false')
                                                                )"
                                                                true="The field McuPartition0Config/McuPartitionUnderMcuControl must be set to 'true' when CM7_3 is under MCU control."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE3_PCONF[CCE] register field.<br />
                                                                    This bit controls whether the clock to CM7_3 is enabled or disabled. <br />
                                                                    0 - CM7_3 Core Clock is Disabled. <br />
                                                                    1 - CM7_3 Core Clock is Enabled. <br />
                                                                    <strong>Warning:</strong> When disabling the core clock, the driver
                                                                    will busy-wait until the corresponding MC_ME_PRTN0_CORE3_STAT[WFI]
                                                                    flag is set. This means that the core to be shutdown must always
                                                                    execute an WFI as its last instruction. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_3 Core Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:c1a8f304-b7c8-41c3-a237-4076f626e360"/>
                                                        <a:da name="DEFAULT" value="false"/>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_3')) and
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (node:fallback(../../McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 0 must be enabled first in order to enable the clock of the CM7_3 core within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddress" type="INTEGER">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE3_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_3 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_3 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_3 Boot Address"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:2ba8e5c6-9ec7-4d11-8a49-72586c9394ef"/>
                                                        <a:da name="DEFAULT" value="0"/>
                                                        <a:a name="INVALID" type="Range">
                                                            <a:tst expr="&lt;=4294967292"/>
                                                            <a:tst expr="&gt;=0"/>
                                                        </a:a>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_3')) and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(node:fallback(., 4294967292) mod 4) != 0" true="The boot address must be aligned on a 4-byte boundary."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuCoreBootAddressLinkerSym" type="STRING">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTN0_CORE3_ADDR[ADDR] register field.<br />
                                                                    This register controls the boot address of the CM7_3 core. <br />
                                                                    The value from this field will be masked with 0xFFFFFFFC (i.e.
                                                                    the boot address must be aligned on a 4-byte boundary). <br />
                                                                    This field is modifiable only when the corresponding CM7_3 core
                                                                    clock is enabled and McuCoreControlConfiguration/McuCoreBootAddressControl
                                                                    is 'true'. <br />
                                                                    <strong>Note:</strong> If this parameter is empty, then the boot address
                                                                    (integer value) defined by 'McuCoreBootAddress' will be used. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="CM7_3 Boot Address Linker Symbol"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:7a57eba2-bc06-467b-94b3-702ee767c788"/>
                                                        <a:da name="DEFAULT" value=""/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (contains(ecu:get('MCU.MC_ME.Partition0.Cores.List'),'CORE_3')) and
                                                                    (node:fallback(../McuCoreClockEnable, 'false') = 'true') and
                                                                    (node:fallback(as:modconf('Mcu')[1]/McuCoreControlConfiguration/McuCoreBootAddressControl, 'false') = 'true')
                                                                )"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                               false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                                        </a:da>
                                                    </v:var>
                                                </v:ctr>
                                            </v:ctr>

                                            <v:ctr name="McuPartition1Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 1.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition1Config"/>
                                                <a:a name="UUID" value="ECUC:6d197fc7-412a-4168-af62-3f05f950e135"/>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 1 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1 or PRST1). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition1 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-7635-bb5f-32d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 1 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_PCONF or
                                                                PRST1_0[PERIPH_64_RST] or RDC1). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable" and "McuPartitionResetEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition1 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23c259d63c52"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 1's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN1_COFB0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_COFB0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN1_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN1_COFB0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:e8934f47-cee9-45b7-a775-6f99f6aec50d"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN1_COFB0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb1UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN1_COFB1 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_COFB1). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN1_COFB1'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN1_COFB1 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:ef2879cc-eb2b-4613-92bd-ffda080c5300"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN1_COFB1 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb2UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN1_COFB2 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_COFB2). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN1_COFB2'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN1_COFB2 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:2458c1a3-22e2-4db7-9c7d-c1169aed98cd"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN1_COFB0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb3UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN1_COFB3 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN1_COFB3). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN1_COFB3'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN1_COFB3 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:41613a64-57c3-4935-bb5f-23b836c36b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition1Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN1_COFB3 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN1_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled. <br />
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition1 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-35b45ac34438"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuPartition2Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 2.
                                                            This node is not supported on S32K312 derivative.<br />
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition2Config"/>
                                                <a:a name="UUID" value="ECUC:6d9c7fc7-452a-4168-af62-3f05f950e135"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.Partitions.List'),'Partition2')" />
                                                </a:a>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 2 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN2 or PRST2). <br />
                                                                This node is not supported on S32K312 derivative.<br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition2 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:56613a64-57c3-4935-b14f-32d841f15b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 2 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN2_PCONF or
                                                                PRST2_0[PERIPH_128_RST] or RDC2). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable" and "McuPartitionResetEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                This node is not supported on S32K312 derivative.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition2 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:32613a64-57c3-4935-bb5f-23d235c63c52"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition2Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 2's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN2_COFB0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN2_COFB0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN2_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                This node is not supported on S32K312 derivative.<br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN2_COFB0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:4190ca71-1114-41cf-9b53-c1c8e6b29065"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition2Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN2_COFB0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb1UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN2_COFB1 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN2_COFB1). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN2_COFB1'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                This node is not supported on S32K312 derivative.<br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN2_COFB1 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:69613a64-57c3-4935-bb5f-23b836c36b54"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition2Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN2_COFB1 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb2UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN2_COFB1 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN2_COFB2). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN2_COFB2'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN2_COFB2 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:40351d53-6e50-4d9c-9f59-8a795fc7eb75"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:a name="VISIBLE" type="XPath">
                                                        <a:tst expr="contains(ecu:get('MCU.MC_ME.Partition2.COFBs.List'),'COFB_2')" />
                                                    </a:a>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (contains(ecu:get('MCU.MC_ME.Partition2.COFBs.List'),'COFB_2')) and
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition2Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN2_COFB1 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN2_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled. <br />
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                This node is not supported on S32K312 derivative.<br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition2 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:a68ae507-8e89-4c1a-8e04-35b9cac34548"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="McuPartition3Config" type="IDENTIFIABLE">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            This container contains the configuration for Partition 3.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="TAB" value="McuPartition3Config"/>
                                                <a:a name="UUID" value="ECUC:ca751a6e-78bb-4293-85ca-f62f905a4a47"/>
                                                <a:a name="VISIBLE" type="XPath">
                                                    <a:tst expr="contains(ecu:get('MCU.Partitions.List'),'Partition3')" />
                                                </a:a>

                                                <v:var name="McuPartitionUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 3 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN3). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition3 Under MCU control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:b3710004-d712-4498-b661-e89ec6f3cd49"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>

                                                <v:var name="McuPartitionPowerUnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if Partition 3 Power Management is under MCU control. <br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN3_PCONF). <br />
                                                                This means that the settings configured by nodes "McuPartitionClockEnable"
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="Partition3 Power Management Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:c1f1ab56-0c2d-4dc9-8f67-59bc7e603f5a"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (contains(ecu:get('MCU.Partitions.List'),'Partition3')) and
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition3Config/McuPartitionUnderMcuControl must be set to 'true' when Partition 3's power management is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb0UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN3_COFB0 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN3_COFB0). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN3_COFB0'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN3_COFB0 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:76a0b914-e478-4b82-a58f-ddcbe250db44"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (contains(ecu:get('MCU.Partitions.List'),'Partition3')) and
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition3Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN3_COFB0 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb1UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN3_COFB1 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN3_COFB1). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN3_COFB1'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN3_COFB1 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:9547bd63-62b0-412f-8696-0411d1016a45"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (contains(ecu:get('MCU.Partitions.List'),'Partition3')) and
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition3Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN3_COFB1 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPrtnCofb2UnderMcuControl" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Set this to TRUE if PRTN3_COFB1 is under MCU control.<br />
                                                                If it is FALSE, then the MCU driver will not write the corresponding registers (PRTN3_COFB2). <br />
                                                                This means that all the peripherals under the 'McuPeripheral' list prefixed by 'PRTN3_COFB2'
                                                                will be left untouched (i.e. the configuration will not have any effect in hardware). <br />
                                                                Note: Implementation Specific Parameter.<br />
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="LABEL" value="PRTN3_COFB2 Under MCU Control"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:470c20fc-cf14-43ee-8d88-637fbac07ee3"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="
                                                            (
                                                                (contains(ecu:get('MCU.Partitions.List'),'Partition3')) and
                                                                (node:fallback(., 'false') = 'true') and
                                                                (node:fallback(../McuPartitionUnderMcuControl, 'true') = 'false')
                                                            )"
                                                            true="The field McuPartition3Config/McuPartitionUnderMcuControl must be set to 'true' when PRTN3_COFB1 is under MCU control."/>
                                                    </a:da>
                                                </v:var>

                                                <v:var name="McuPartitionClockEnable" type="BOOLEAN">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                Configures the MC_ME_PRTN3_PCONF[PCE] register field. <br />
                                                                This bit controls whether the clock to IPs (other than core(s)) in the partition are enabled or disabled. <br />
                                                                0b - Disable the clock to IPs. <br />
                                                                1b - Enable the clock to IPs. <br />
                                                                Note: Implementation Specific Parameter.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="LABEL" value="Partition3 Clock Enable"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                    <a:a name="UUID" value="ECUC:f6a60fdc-f5e8-4f88-aab5-f0ad0de138e7"/>
                                                    <a:da name="DEFAULT" value="true"/>
                                                </v:var>
                                            </v:ctr>

                                            <v:lst name="McuPeripheral" type="MAP">
                                                <a:da name="MIN" type="XPath" expr="num:i(count(ecu:list('MCU.Peripherals.List')))"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="num:i(count(./*)) &gt; num:i(count(ecu:list('MCU.Peripherals.List')))"
                                                        true="The number of McuPeripherals exceeds the maximum allowed."/>
                                                </a:da>

                                                <v:ctr name="McuPeripheral" type="IDENTIFIABLE">
                                                    <a:a name="DESC">
                                                        <a:v>
                                                            <![CDATA[EN:<html>
                                                                This contains the power state configuration for the current peripheral.<br />
                                                                Note: Implementation Specific Container.
                                                            </html>]]>
                                                        </a:v>
                                                    </a:a>
                                                    <a:a name="REQUIRES-INDEX" value="true"/>
                                                    <a:a name="TAB" value="McuPeripheral"/>
                                                    <a:a name="UUID" value="ECUC:0983ec47-86a6-4940-ae8d-5cf0e543929b"/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS"  type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>

                                                    <v:var name="McuPeripheralName" type="ENUMERATION">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the name of the peripheral. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="Peripheral Name"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                                        <a:a name="UUID" value="ECUC:0fef779b-bf2c-5e91-9110-5f848d8e3e16"/>
                                                        <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.Peripherals.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                        <a:da name="RANGE" type="XPath" expr="ecu:list('MCU.Peripherals.List')"/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="contains(ecu:get('Mcu.Peripheral.editable'), 'true')"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(
                                                                            (text:contains(node:fallback(., ecu:get('MCU.Peripherals.Default')),'NONE')) or
                                                                            (text:uniq(node:fallback(../../*/McuPeripheralName, ecu:list('MCU.Peripherals.List')), node:fallback(., ecu:get('MCU.Peripherals.Default'))))
                                                                        )"
                                                                   false="Duplicated value, McuPeripheralName must be unique across McuPeripheral."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuModeEntrySlot" type="ENUMERATION">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    This is the MC_ME slot corresponding to the peripheral. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="LABEL" value="MC_ME Slot"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                                        <a:a name="UUID" value="ECUC:0fef779b-bf2c-466a-9110-5f848d8e3e16"/>
                                                        <a:da name="DEFAULT" type="XPath" expr="ecu:list('MCU.MC_ME.Peripherals.Slots.List')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                                                        <!-- Return a unique list of possible values for RANGE. Duplicated values in RANGE will result in VSMD errors  -->
                                                        <a:da name="RANGE" type="XPath" expr="text:split(concat(text:replaceAll(text:join(ecu:list('MCU.MC_ME.Peripherals.Slots.List')), 'NONE', ''), ' NONE'))"/>
                                                        <a:a name="EDITABLE" type="XPath">
                                                            <a:tst expr="contains(ecu:get('Mcu.Peripheral.editable'), 'true')"/>
                                                        </a:a>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="(
                                                                            (text:contains(node:fallback(., ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE')) or
                                                                            (text:uniq(node:fallback(../../*/McuModeEntrySlot, ecu:list('MCU.MC_ME.Peripherals.Slots.List')), node:fallback(., ecu:get('MCU.MC_ME.Peripherals.Slots.Default'))))
                                                                        )"
                                                                   false="Duplicated value, McuModeEntrySlot must be unique across McuPeripheral."/>
                                                        </a:da>
                                                    </v:var>

                                                    <v:var name="McuPeripheralClockEnable" type="BOOLEAN">
                                                        <a:a name="DESC">
                                                            <a:v>
                                                                <![CDATA[EN:<html>
                                                                    Configures the MC_ME_PRTNx_COFBx_CLKEN[REQx] register field. <br />
                                                                    0 - Peripheral Clock is Gated. <br />
                                                                    1 - Peripheral Clock is Running. <br />
                                                                    Note: Implementation Specific Parameter.
                                                                </html>]]>
                                                            </a:v>
                                                        </a:a>
                                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                        </a:a>
                                                        <a:a name="ORIGIN" value="NXP"/>
                                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                        <a:a name="LABEL" value="Peripheral Clock Enable"/>
                                                        <a:a name="SCOPE" value="LOCAL"/>
                                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                        <a:a name="UUID" value="ECUC:898a2ef7-3fa9-4c1a-8a93-eeef17ba4a10"/>
                                                        <a:da name="DEFAULT" type="XPath">
                                                            <a:tst expr="
                                                            (
                                                                node:when(
                                                                    text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'),
                                                                    true(),
                                                                    text:contains(ecu:list('MCU.MC_ME.Peripherals.DefaultClockEnabled.List'), node:fallback(../McuPeripheralName, 'NONE'))
                                                                )
                                                            )
                                                            "/>
                                                        </a:da>
                                                        <a:da name="EDITABLE" type="XPath">
                                                            <a:tst expr="not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))"/>
                                                        </a:da>
                                                        <a:da name="INVALID" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuModeEntrySlot, 'PRTN0'), 'PRTN')) = num:i(0)) and
                                                                    (node:fallback(../../../McuPartition0Config/McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 0 must be enabled first in order to enable the clock of any other IP within the partition (i.e. McuPartition0Config/McuPartitionClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuModeEntrySlot, 'PRTN0'), 'PRTN')) = num:i(1)) and
                                                                    (node:fallback(../../../McuPartition1Config/McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 1 must be enabled first in order to enable the clock of any other IP within the partition (i.e. McuPartition1Config/McuPartitionClockEnable = 'true')."/>
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuModeEntrySlot, 'PRTN0'), 'PRTN')) = num:i(2)) and
                                                                    (node:fallback(../../../McuPartition2Config/McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 2 must be enabled first in order to enable the clock of any other IP within the partition (i.e. McuPartition2Config/McuPartitionClockEnable = 'true')."/>

                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'false') = 'true') and
                                                                    (not(text:contains(node:fallback(../McuModeEntrySlot, ecu:get('MCU.MC_ME.Peripherals.Slots.Default')),'NONE'))) and
                                                                    (num:i(substring-after(node:fallback(../McuModeEntrySlot, 'PRTN0'), 'PRTN')) = num:i(3)) and
                                                                    (node:fallback(../../../McuPartition3Config/McuPartitionClockEnable, 'true') = 'false')
                                                                )"
                                                                true="The clock to partition 3 must be enabled first in order to enable the clock of any other IP within the partition (i.e. McuPartition3Config/McuPartitionClockEnable = 'true')."/>
                                                        </a:da>
                                                        <a:da name="WARNING" type="XPath">
                                                            <a:tst expr="
                                                                (
                                                                    (node:fallback(., 'true') = 'false') and
                                                                    (node:fallback(../McuPeripheralName, 'TRGMUX') = 'MSCM') and
                                                                    (node:fallback(../../../McuPartition1Config/McuPartitionClockEnable, 'true') = 'true')
                                                                )"
                                                                true="In RTD's default implementation OsIf_GetCoreId is using MSCM, so if the peripheral is disabled then a HardFault will be entered at Mcu_SetMode call. OsIf_GetCoreId is used as part of the default implementation of the SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA and SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA."/>
                                                        </a:da>
                                                    </v:var>

                                                </v:ctr>
                                            </v:lst>

                                        </v:ctr>

                                        <v:ctr name="McuDcmGprConfiguration" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This DCM_GPR Control Register contains the various control settings of the DCM_GPR block.<br />
                                                        Note: Implementation Specific Parameter.<br />
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="TAB" value="McuDcmGprConfiguration"/>
                                            <a:a name="UUID" value="ECUC:a76f1591-ab79-4586-95d9-c657bb134d88"/>

                                            <v:var name="McuDcmGprUnderMcuControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Set this to TRUE if DCM_GPR is under MCU control. <br />
                                                            If it is FALSE, then the MCU driver will not write the corresponding registers (DCMRWF2). <br />
                                                            (i.e. the configuration will not have any effect in hardware). <br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="DCM_GPR Under MCU Control"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:c1f1ab66-0c2d-4dc9-8f67-59bc7e603f5a"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:da name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (((node:fallback(../../McuPowerMode, 'RUN') = 'RUN') or
                                                        (node:fallback(../../McuPowerMode, 'RUN') = 'CORE_STANDBY') or
                                                        (node:fallback(../../McuPowerMode, 'RUN') = 'SOC_STANDBY') or
                                                        (node:fallback(../../McuPowerMode, 'RUN') = 'SOC_FAST_STANDBY') or
                                                        (node:fallback(../../McuPowerMode, 'RUN') = 'FUNC_RESET') or
                                                        (node:fallback(../../McuPowerMode, 'RUN') = 'DEST_RESET')) and
                                                        (node:fallback(., 'false') = 'true'))"
                                                        true="DcmGPR just configured when (../../McuPowerMode) is SOC_PREPARE_STANDBY/SOC_PREPARE_FAST_STANDBY/STANDBY/FAST_STANDBY"/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuBootBaseAddress" type="INTEGER">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            Cortex-M7_0 base address of vector table to be used after exiting Standby mode (only to be considered in Fast Standby mode.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="LABEL" value="Boot Base Address"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:4ed60578-049f-4514-a189-0121d770c42a"/>
                                                <a:da name="DEFAULT" value="0"/>
                                                <a:a name="EDITABLE" type="XPath" expr="(node:fallback(../../McuPowerMode, 'RUN') = 'FAST_STANDBY') or (node:fallback(../../McuPowerMode, 'RUN') = 'SOC_PREPARE_FAST_STANDBY')"/>
                                                <a:da name="INVALID" type="Range">
                                                    <a:tst expr="&lt;=4294967295"/>
                                                    <a:tst expr="&gt;=0"/>
                                                </a:da>
                                            </v:var>

                                            <v:var name="McuSIRC_TRIM_BYP_STDBY_EXTControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            DCM_GPR_DCMRWF2[SIRC_TRIM_BYP_STDBY_EXT] field configuration.<br />
                                                            Control to bypass the SIRC trimming on standby exit.<br />
                                                            Unchecked - Not bypassed.<br />
                                                            Checked - Bypassed.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:3fdebd85-c152-5ba94-9ebd-692a6054e6dc"/>
                                                <a:a name="LABEL" value="SIRC Trimming Control"/>
                                            </v:var>

                                            <v:var name="McuPMC_TRIM_RGM_DCF_BYP_STDBY_EXTControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            DCM_GPR_DCMRWF2[PMC_TRIM_RGM_DCF_BYP_STDBY_EXT] field configuration.<br />
                                                            Control to bypass the PMC trimming and RGM DCF loading on standby exit.<br />
                                                            Unchecked - Not bypassed.<br />
                                                            Checked - Bypassed.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:3fdebd85-c152-5ba95-9ebd-692a6054e6dc"/>
                                                <a:a name="LABEL" value="PMC Trimming And RGM DCF Loading Control"/>
                                            </v:var>

                                            <v:var name="McuFIRC_TRIM_BYP_STDBY_EXTControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            DCM_GPR_DCMRWF2[FIRC_TRIM_BYP_STDBY_EXT] field configuration.<br />
                                                            Control to bypass the FIRC trimming on standby exit.<br />
                                                            Unchecked - Not bypassed.<br />
                                                            Checked - Bypassed.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:3fdebd85-c152-5ba96-9ebd-692a6054e6dc"/>
                                                <a:a name="LABEL" value="FIRC Trimming Control"/>
                                            </v:var>

                                            <v:var name="McuDCM_SCAN_BYP_STDBY_EXTControl" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            DCM_GPR_DCMRWF2[DCM_SCAN_BYP_STDBY_EXT] field configuration.<br />
                                                            Control to bypass the DCM scanning on standby exit.<br />
                                                            Unchecked - Not bypassed.<br />
                                                            Checked - Bypassed.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:3fdebd85-c152-5ba97-9ebd-692a6054e6dc"/>
                                                <a:a name="LABEL" value="DCM Scanning Control"/>
                                            </v:var>
                                            <v:var name="McuGlobalPadkeepingEnable" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            If this parameter has been configured to 'TRUE', the effect is that the DCMRWF1[STANDBY_IO_CONFIG] will be written to 0 before entering Standby mode. <br/>
                                                            If this parameter has been configured to 'FALSE', the effect is that the DCMRWF1[STANDBY_IO_CONFIG] will be written to 1
                                                            before entering Standby mode, the isolation removal hardware removes pad keeping on Standby mode exit. This is useful in case of low-power debug.<br/>
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="LABEL" value="Global Padkeeping Enable" />
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="UUID" value="ECUC:4451632d-b60e-4d48-8e66-550991dbde5d"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:da name="READONLY" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                <a:tst expr="
                                                    (((node:fallback(../../McuPowerMode, 'RUN') = 'RUN') or
                                                    (node:fallback(../../McuPowerMode, 'RUN') = 'CORE_STANDBY') or
                                                    (node:fallback(../../McuPowerMode, 'RUN') = 'FUNC_RESET') or
                                                    (node:fallback(../../McuPowerMode, 'RUN') = 'DEST_RESET')) and
                                                    (node:fallback(., 'false') = 'true'))"
                                                    true="The Operating Mode need to be STANDBY related when enabling Global Padkeeping."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>
                                    </v:ctr>
                                </v:lst>

                                <v:lst name="McuRamSectorSettingConf" type="MAP">

                                    <v:ctr name="McuRamSectorSettingConf" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This container contains the configuration for the RAM Sector setting.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="REQUIRES-INDEX" value="true"/>
                                        <a:a name="UUID" value="ECUC:2ec4ce5f-1c38-47ec-b1c6-9d01a6589e0d"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                                        </a:a>

                                        <v:var name="McuRamSectorId" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter shall represent the ID of the MCU RAM Sector configuration.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="RAM Sector ID"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:2e5b0f55-dce2-46d3-ac26-2b8fd1fd7772"/>
                                            <a:da name="DEFAULT" type="XPath" expr="node:fallback(node:current()/../@index, num:i(0))"/>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="text:uniq(node:fallback(../../*/McuRamSectorId, text:split('1 2 3')), node:fallback(., 0))"
                                                    false="Duplicated value, McuRamSectorId ID must be unique across McuRamSectorSettingConf. Use the Calculate button to calculate correct default value."/>
                                                <a:tst expr="node:fallback(., 0) &lt; count(node:fallback(../../*, 1))"
                                                    false="Value out of range: must be in range 0 to N-1 (N is number of configured RAM Sector setting). Use the Calculate button to calculate correct default value."/>
                                            </a:da>
                                            <a:a name="INVALID" type="Range">
                                                <a:tst expr="&lt;=4294967295"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:a>
                                        </v:var>

                                        <!-- /** @implements McuRamDefaultValue_Object */ -->
                                        <v:var name="McuRamDefaultValue" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter shall represent the Data pre-setting to be initialized.
                                                        Default value is 0.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Default Value"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:9d2319c7-8658-4e05-af6e-db52438353dc"/>
                                            <a:da name="DEFAULT" value="0"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=255"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                        </v:var>


                                        <!-- /** @implements McuRamSectionBaseAddress_Object */ -->
                                        <v:var name="McuRamSectionBaseAddress" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter represents the RAM section base address.
                                                        The address must be aligned to 4 bytes.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Base Address"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:4ed60578-049f-4504-a189-0121d770c42a"/>
                                            <a:da name="DEFAULT" type="XPath"  expr="num:i(ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionBaseAddress.low'))"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionBaseAddress.high')"/>
                                                <a:tst expr="&gt;=ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionBaseAddress.low')"/>
                                            </a:da>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="(node:fallback(., 541065216) mod 4) != 0" true="The Ram base address must be 4 byte aligned."/>
                                            </a:da>
                                        </v:var>


                                        <!-- /** @implements McuRamSectionSize_Object */ -->
                                        <v:var name="McuRamSectionSize" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter represents the RAM section size in bytes.
                                                        The size must be a multiple of 4.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Size"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:b8e5c869-b036-4015-a0c4-d38886825a25"/>
                                            <a:da name="DEFAULT" value="32768"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionSize')"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="(node:fallback(., 327680) mod 4) != 0" true="The Ram size must be 4 byte aligned."/>
                                            </a:da>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="num:i(node:fallback(., 327680)) + num:i(node:fallback(../McuRamSectionBaseAddress, 541065216)) &gt; num:i(ecu:get('MCU.McuModuleConfiguration.McuRamSectorSettingConf.McuRamSectionBaseAddress.high'))"
                                                    true="The Ram size is out of range. Please keep Ram Base Address (after adding the Ram Size) in range address."/>
                                            </a:da>
                                        </v:var>


                                        <!-- /** @implements McuRamSectionWriteSize_Object */ -->
                                        <v:var name="McuRamSectionWriteSize" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter shall define the size in bytes of data which can be written into RAM at once.
                                                        The ram write size is currently restricted to {1, 2, 4, 8} bytes.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Write Size"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:b8e5c869-b036-4015-ac04-38d86885a225"/>
                                            <a:da name="DEFAULT" value="8"/>
                                            <a:da name="INVALID" type="Range">
                                                <a:tst expr="&lt;=4294967295"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:da>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="( num:i(node:fallback(../McuRamSectionSize, 327680)) mod num:i(node:fallback(., 8)) ) != 0" true="The McuRamSectionWriteSize must divide McuRamSectionSize (i.e. McuRamSectionSize must be a multiple of McuRamSectionWriteSize)."/>
                                                <a:tst expr="
                                                    (
                                                        ( num:i(node:fallback(., 8)) != 1 ) and
                                                        ( num:i(node:fallback(., 8)) != 2 ) and
                                                        ( num:i(node:fallback(., 8)) != 4 ) and
                                                        ( num:i(node:fallback(., 8)) != 8 )
                                                    )"
                                                        true="The ram write size is currently restricted to {1, 2, 4, 8} bytes."/>
                                            </a:da>
                                        </v:var>


                                        <v:var name="McuRamSectionBaseAddrLinkerSym" type="STRING">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter represents the RAM section base address.
                                                        The address must be aligned to 4 bytes.
                                                        If this parameter is empty, then the integer values from "McuRamSectionBaseAddress" will be used.
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Base Address Linker Symbol"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:5179e367-2481-4677-b488-15f5be2dc797"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                   false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                            </a:da>
                                        </v:var>

                                        <v:var name="McuRamSectionSizeLinkerSym" type="STRING">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        This parameter represents the RAM section size in bytes.
                                                        The size must be multiple of 4.
                                                        If this parameter is empty, then the integer values from "McuRamSectionSize" will be used.
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="LABEL" value="RAM Section Size Linker Symbol"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:2abc7efe-8cea-407a-a89a-fe033dc7c3a8"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="( node:empty(.) or (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$')) )"
                                                   false="Invalid identifier. The field must specify a valid C identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)."/>
                                            </a:da>
                                        </v:var>

                                    </v:ctr>
                                </v:lst>

                                <v:ctr name="McuResetConfig" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="McuResetConfig"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>
                                                The reset generation module (MC_RGM) centralizes the different reset sources and manages the reset sequence of the device. <br />
                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="UUID" value="ECUC:28115898-f56e-45f7-98d8-02bb15ee7e03"/>

                                    <v:var name="McuResetType" type="ENUMERATION">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This parameter selects the type of the reset to be performed through the McuPerformReset API.
                                                    A 'destructive' reset source is associated with an event related to a critical - usually
                                                    hardware - error or dysfunction. When a 'destructive' reset event occurs, the full reset
                                                    sequence is applied to the chip. This resets the full chip ensuring a safe start-up state for
                                                    both digital and analog modules, and the memory content must be considered to be
                                                    unknown. <br />
                                                    A 'functional' reset source is associated with an event related to a less-critical - usually
                                                    non-hardware - error or dysfunction. When a 'functional' reset event occurs, a partial
                                                    reset sequence is applied to the chip. In this case, most digital modules are reset
                                                    normally, while the state of analog modules or specific digital modules (e.g., debug
                                                    modules, flash modules) as well as the system memory content is preserved. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:da name="DEFAULT" value="FunctionalReset"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                        <a:a name="UUID" value="ECUC:9da822b3-8070-440e-aa67-2e8a31ad8a24"/>
                                        <a:a name="LABEL" value="Mcu Reset Type"/>
                                        <a:da name="RANGE">
                                            <a:v>FunctionalReset</a:v>
                                            <a:v>DestructiveReset</a:v>
                                        </a:da>
                                    </v:var>

                                    <v:var name="McuFuncResetEscThreshold" type="INTEGER">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    RGM_FRET[FRET] field configuration. <br />
                                                    If the value of this field is 0, the functional reset escalation function is disabled.
                                                    Any other value is the number of 'functional' resets which will cause a 'destructive' reset. <br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="Mcu Functional Reset Escalation Threshold"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                        <a:a name="UUID" value="ECUC:c7988d5c-a1a0-432d-868c-d8da2118b812"/>
                                        <a:da name="DEFAULT" value="15"/>
                                        <a:a name="INVALID" type="Range">
                                            <a:tst expr="&lt;=15"/>
                                            <a:tst expr="&gt;=0"/>
                                        </a:a>
                                    </v:var>

                                    <v:var name="McuDestResetEscThreshold" type="INTEGER">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    RGM_DRET[DRET] field configuration. <br />
                                                    If the value of this field is 0, the destructive reset escalation function is disabled.
                                                    Any other value is the number of 'destructive' resets which will keep the chip in the reset state
                                                    until the next power-on reset. <br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                        </a:a>
                                        <a:a name="LABEL" value="Mcu Destructive Reset Escalation Threshold"/>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                        <a:a name="UUID" value="ECUC:1478ee17-3755-408a-8857-c044fda72aec"/>
                                        <a:da name="DEFAULT" value="0"/>
                                        <a:a name="INVALID" type="Range">
                                            <a:tst expr="&lt;=15"/>
                                            <a:tst expr="&gt;=0"/>
                                        </a:a>
                                    </v:var>

                                    <v:ctr name="McuResetSourcesConfig" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Configuration of reset sources.<br />
                                                    Note: Implementation Specific Parameter.
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="LABEL" value="Reset Sources"/>
                                        <a:a name="UUID" value="ECUC:28351898-f56e-45f7-98d8-02bb15ee7e03"/>

                                        <v:ctr name="McuFCCU_RST_ResetSource" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        'FCCU Reset Reaction' reset source configuration.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="FCCU Reset Source"/>
                                            <a:a name="UUID" value="ECUC:a02d47fe-ab5c-4e98-ba60-c043dad765ac"/>

                                            <v:var name="McuDisableReset" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RGM_FERD[D_FCCU_RST] field configuration.<br />
                                                            0 - Functional reset event FCCU_RST triggers a reset sequence.<br />
                                                            1 - Functional reset event FCCU_RST generates an interrupt request.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Disable reset source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-d475ef5e3bda"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuAlternateResetIsrUsed, 'false') = 'false' )
                                                        )"
                                                           true="The field McuGeneralConfiguration/McuAlternateResetIsrUsed must be set to 'true' when demoting a reset source to IRQ."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuSWT0_RST_ResetSource" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        'SWT Timeout 0' reset source configuration.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="SWT Timeout 0 Reset Source"/>"/>
                                            <a:a name="UUID" value="ECUC:a0ad47fe-ab5c-4e98-ba60-c34fada765ac"/>

                                            <v:var name="McuDisableReset" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RGM_FERD[D_SWT0_RST] field configuration.<br />
                                                            0 - Functional reset event SWT0_RST triggers a reset sequence.<br />
                                                            1 - Functional reset event SWT0_RST generates an interrupt request.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Disable reset source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-d475bce51bda"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuAlternateResetIsrUsed, 'false') = 'false' )
                                                        )"
                                                           true="The field McuGeneralConfiguration/McuAlternateResetIsrUsed must be set to 'true' when demoting a reset source to IRQ."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuSWT1_RST_ResetSource" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        'SWT Timeout 1' reset source configuration.<br />
                                                        This node is not supported on S32K344/S32K314/S32K312 derivatives.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="SWT Timeout 1 Reset Source"/>
                                            <a:a name="UUID" value="ECUC:a0ad47fe-ab5c-4e98-ba60-c04afa7d6a5c"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.MC_RGM.FuncRstDis.List'), 'SWT_1')" />
                                            </a:a>

                                            <v:var name="McuDisableReset" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RGM_FERD[D_SWT1_RST] field configuration.<br />
                                                            0 - Functional reset event SWT1_RST triggers a reset sequence.<br />
                                                            1 - Functional reset event SWT1_RST generates an interrupt request.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Disable reset source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-d475ef53edba"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuAlternateResetIsrUsed, 'false') = 'false' )
                                                        )"
                                                           true="The field McuGeneralConfiguration/McuAlternateResetIsrUsed must be set to 'true' when demoting a reset source to IRQ."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuSWT2_RST_ResetSource" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        'SWT Timeout 2' reset source configuration.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="SWT Timeout 2 Reset Source"/>
                                            <a:a name="UUID" value="ECUC:a0ad47fe-ab5c-4e98-ba60-c04afaeeffdd"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.MC_RGM.FuncRstDis.List'), 'SWT_2')" />
                                            </a:a>

                                            <v:var name="McuDisableReset" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RGM_FERD[D_SWT2_RST] field configuration.<br />
                                                            0 - Functional reset event SWT2_RST triggers a reset sequence.<br />
                                                            1 - Functional reset event SWT2_RST generates an interrupt request.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Disable reset source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-11223f53edba"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuAlternateResetIsrUsed, 'false') = 'false' )
                                                        )"
                                                           true="The field McuGeneralConfiguration/McuAlternateResetIsrUsed must be set to 'true' when demoting a reset source to IRQ."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuSWT3_RST_ResetSource" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        'SWT Timeout 3' reset source configuration.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="SWT Timeout 3 Reset Source"/>
                                            <a:a name="UUID" value="ECUC:a0ad47fe-ab5c-4e98-ba60-c14afaeeffdd"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.MC_RGM.FuncRstDis.List'), 'SWT_3')" />
                                            </a:a>

                                            <v:var name="McuDisableReset" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RGM_FERD[D_SWT3_RST] field configuration.<br />
                                                            0 - Functional reset event SWT3_RST triggers a reset sequence.<br />
                                                            1 - Functional reset event SWT3_RST generates an interrupt request.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Disable reset source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-11223f54edba"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuAlternateResetIsrUsed, 'false') = 'false' )
                                                        )"
                                                           true="The field McuGeneralConfiguration/McuAlternateResetIsrUsed must be set to 'true' when demoting a reset source to IRQ."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuJTAG_RST_ResetSource" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        'JTAG Reset' reset source configuration.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="JTAG Reset Source"/>
                                            <a:a name="UUID" value="ECUC:a0ad47fe-ab5c-4e98-ba60-c04ae6bf6a5c"/>

                                            <v:var name="McuDisableReset" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RGM_FERD[D_JTAG_RST] field configuration.<br />
                                                            0 - Functional reset event JTAG_RST triggers a reset sequence.<br />
                                                            1 - Functional reset event JTAG_RST generates an interrupt request.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Disable reset source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-d472ef53abde"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuAlternateResetIsrUsed, 'false') = 'false' )
                                                        )"
                                                           true="The field McuGeneralConfiguration/McuAlternateResetIsrUsed must be set to 'true' when demoting a reset source to IRQ."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>

                                        <v:ctr name="McuDEBUG_FUNC_ResetSource" type="IDENTIFIABLE">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        'Debug Functional Reset' reset source configuration.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="LABEL" value="DEBUG_FUNC Reset Source"/>
                                            <a:a name="UUID" value="ECUC:a0ad47fe-ab5c-4e98-ba60-c04ae2fb4a5c"/>

                                            <v:var name="McuDisableReset" type="BOOLEAN">
                                                <a:a name="DESC">
                                                    <a:v>
                                                        <![CDATA[EN:<html>
                                                            RGM_FERD[D_DEBUG_FUNC] field configuration.<br />
                                                            0 - Functional reset event 'Debug Functional Reset' triggers a reset sequence.<br />
                                                            1 - Functional reset event 'Debug Functional Reset' generates an interrupt request.<br />
                                                            Note: Implementation Specific Parameter.
                                                        </html>]]>
                                                    </a:v>
                                                </a:a>
                                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                                </a:a>
                                                <a:a name="ORIGIN" value="NXP"/>
                                                <a:a name="LABEL" value="Disable reset source"/>
                                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                <a:a name="SCOPE" value="LOCAL"/>
                                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                                <a:a name="UUID" value="ECUC:e28566ec-ee10-466f-a25c-d472fe35adbe"/>
                                                <a:da name="DEFAULT" value="false"/>
                                                <a:a name="INVALID" type="XPath">
                                                    <a:tst expr="
                                                        (
                                                            ( node:fallback(., 'false') = 'true' ) and
                                                            ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuAlternateResetIsrUsed, 'false') = 'false' )
                                                        )"
                                                           true="The field McuGeneralConfiguration/McuAlternateResetIsrUsed must be set to 'true' when demoting a reset source to IRQ."/>
                                                </a:a>
                                            </v:var>
                                        </v:ctr>
                                    </v:ctr>

                                    <v:ctr name="McuResetGeneratorConfiguration" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    Configures AEC_AE_RSTGEN_CFG[RSTGEN_CFG]- Configures reset generator. <p/>
                                                    Set this bit to activate IP (this deasserts hard reset input port of IP). <p/>
                                                    Individual control over: <p/>
                                                    0: regs_otp (resets OTP register interface, not mirror regs) <p/>
                                                    1: can_phy (do not activate CANPHY if VERID.VARIANT says CANPHY is disabled) <p/>
                                                    2: lin_phy HP (do not activate LINPHY if VERID.VARIANT says LINPHY is disabled) <p/>
                                                    3: lin_phy LP (do not activate LINPHY if VERID.VARIANT says LINPHY is disabled) <p/>
                                                    4: gdu <p/>
                                                    5: hvi <p/>
                                                    6: dpga <p/>
                                                    7: tempsensor <p/>
                                                    8: cxpi (do not activate CXPI if VERID.VARIANT says CXPI is disabled, or if using LINPHY in noncxpi mode) <p/>
                                                    Note: Implementation specific Container. <p/>
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:462da4ed-8948-5594-b31e-286f8fb26b97"/>
                                        <a:da name="VISIBLE" type="XPath">
                                            <a:tst  expr="(ecu:get('MCU.AEC.RSTGENCFG.SUPPORT') = 'true')"/>
                                        </a:da>

                                        <v:var name="McuRegsOtpReset" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v >
                                                    <![CDATA[EN:<html>
                                                        Regs_otp (resets OTP register interface, not mirror regs) <p/>
                                                        0 - Regs Otp Reset disabled.<p/>
                                                        1 - Regs Otp Reset enabled.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="Regs Otp Reset"/>
                                            <a:a name="DEFAULT" value="true"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:343ebf50-d3d2-4df2-a8a7-ca3ad594f830"/>
                                        </v:var>

                                        <v:var name="McuCanPhyReset" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v >
                                                    <![CDATA[EN:<html>
                                                        Can_phy (do not activate CANPHY if VERID.VARIANT says CANPHY is disabled)<p/>
                                                        0 - CANPHY Reset disabled.<p/>
                                                        1 - CANPHY Reset enabled.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="CANPHY Reset"/>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:443ebf50-d3d2-4df2-a8a7-ca3ad594f830"/>
                                        </v:var>

                                        <v:var name="McuLinPhyHpReset" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v >
                                                    <![CDATA[EN:<html>
                                                        Lin_phy HP (do not activate LINPHY if VERID.VARIANT says LINPHY is disabled).<p/>
                                                        0 - LINPHY HP Reset disabled.<p/>
                                                        1 - LINPHY HP Reset enabled.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="LINPHY HP Reset"/>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:543ebf50-d3d2-4df2-a8a7-ca3ad594f830"/>
                                        </v:var>

                                        <v:var name="McuLinPhyLpReset" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v >
                                                    <![CDATA[EN:<html>
                                                        Lin_phy LP (do not activate LINPHY if VERID.VARIANT says LINPHY is disabled).<p/>
                                                        0 - LINPHY LP Reset disabled.<p/>
                                                        1 - LINPHY LP Reset enabled.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="LINPHY LP Reset"/>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:553ebf50-d3d2-4df2-a8a7-ca3ad594f830"/>
                                        </v:var>

                                        <v:var name="McuGduReset" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v >
                                                    <![CDATA[EN:<html>
                                                        GDU resset.<p/>
                                                        0 - GDU Reset disabled.<p/>
                                                        1 - GDU Reset enabled.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="GDU Reset"/>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:554ebf50-d3d2-4df2-a8a7-ca3ad594f830"/>
                                        </v:var>

                                        <v:var name="McuHviReset" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v >
                                                    <![CDATA[EN:<html>
                                                        HVI resset.<p/>
                                                        0 - HVI Reset disabled.<p/>
                                                        1 - HVI Reset enabled.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="HVI Reset"/>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:555ebf50-d3d2-4df2-a8a7-ca3ad594f830"/>
                                        </v:var>

                                        <v:var name="McuDpgaReset" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v >
                                                    <![CDATA[EN:<html>
                                                        DPGA resset.<p/>
                                                        0 - DPGA Reset disabled.<p/>
                                                        1 - DPGA Reset enabled.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="DPGA Reset"/>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:555ebf60-d3d2-4df2-a8a7-ca3ad594f830"/>
                                        </v:var>

                                        <v:var name="McuTempsensorReset" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v >
                                                    <![CDATA[EN:<html>
                                                        Tempsensor resset.<p/>
                                                        0 - Tempsensor Reset disabled.<p/>
                                                        1 - Tempsensor Reset enabled.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="Tempsensor Reset"/>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:555ebf61-d3d2-4df2-a8a7-ca3ad594f830"/>
                                        </v:var>

                                        <v:var name="McuCxpiReset" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v >
                                                    <![CDATA[EN:<html>
                                                        Cxpi (do not activate CXPI if VERID.VARIANT says CXPI is disabled, or if using LINPHY in noncxpi mode).<p/>
                                                        0 - Cxpi Reset disabled.<p/>
                                                        1 - Cxpi Reset enabled.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="CXPI Reset"/>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:555ebf61-d3d3-4df2-a8a7-ca3ad594f830"/>
                                        </v:var>

                                    </v:ctr>
                                </v:ctr>

                                <!-- /**@implements  McuPowerControl_Object */ -->
                                <v:ctr name="McuPowerControl" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="McuPowerControlUnit"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:<html>

                                                Note: Implementation Specific Parameter.
                                            </html>]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="UUID" value="ECUC:96aa5819-ac80-4bbe-b43b-7d3ebe2807ef"/>

                                    <v:ctr name="McuPMC_Config" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This PMC Control Register contains the various control settings of the PMC block.<br />
                                                    Note: Implementation Specific Parameter.<br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:a76f1590-ab79-4586-95d9-c657bb134d88"/>

                                        <v:var name="McuLMAUTOENEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LMAUTOEN] field configuration.<br />
                                                        Last Mile regulator auto turn over bit.<br />
                                                        This bit enables to turn over automatically from Boot Regulator Mode to Last Mile regulator mode and vice versa
                                                        depending on the V15 voltage status (LVD15S). As long as LMEN=0 software must make sure that the
                                                        system clock is on FIRC clock or slower. To use higher clock speed software must set LMEN=1. <br />
                                                        0 - Auto turnover disabled.<br />
                                                        1 - Auto turnover enabled.<br />
                                                        This node is not supported on S32K312 derivative.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3fdebd85-c152-5ba93-9ebd-692a6054e6dc"/>
                                            <a:a name="LABEL" value="Last Mile Regulator Auto Turn Over Enable"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMAUTOEN')" />
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuLVDIEEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LVDIE] field configuration.<br />
                                                        This bit enables hardware interrupt requests if one of the following flags is set: LVD5AF, LVD15F.
                                                        LVD interrupt must be disabled before going in Low Power Mode (LPM). <br />
                                                        0 - LVD hardware interrupt is disabled (use polling).<br />
                                                        1 - Request a LVD hardware interrupt when LVDA5F=1 or LVD15F=1.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3fd18f85-c152-4b33-9ebd-692ea146e6dc"/>
                                            <a:a name="LABEL" value="Low Voltage Detect Interrupt Enable"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LVDIE')" />
                                            </a:a>
                                            <a:a name="INVALID" type="XPath">
                                                <a:tst expr="
                                                    (
                                                        ( node:fallback(., 'false') = 'true' ) and
                                                        ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuVoltageErrorIsrUsed, 'false') = 'false' )
                                                    )"
                                                    true="The field McuGeneralConfiguration/McuVoltageErrorIsrUsed must be set to 'true' when voltage monitoring IRQs are enabled."/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuHVDIEEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[HVDIE] field configuration.<br />
                                                        This bit enables hardware interrupt requests if one of the following flags is set: HVDAF, HVDBF, HVD25F, HVD11F. <br />
                                                        0 - HVD hardware interrupt is disabled (use polling).<br />
                                                        1 - Request a HVD hardware interrupt when HVDAF=1 or HVDBF=1 or HVD25F=1 or HVD11F=1.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3fdebd85-c152-4b33-9ebd-692ae144e6dc"/>
                                            <a:a name="LABEL" value="High Voltage Detect Interrupt Enable"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'HVDIE')" />
                                            </a:a>
                                            <a:a name="INVALID" type="XPath">
                                                <a:tst expr="
                                                    (
                                                        ( node:fallback(., 'false') = 'true' ) and
                                                        ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuVoltageErrorIsrUsed, 'false') = 'false' )
                                                    )"
                                                    true="The field McuGeneralConfiguration/McuVoltageErrorIsrUsed must be set to 'true' when voltage monitoring IRQs are enabled."/>
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuLMSMPSENEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LMSMPSEN] field configuration.<br />
                                                        This bit V15 Switched-mode power supply enable bit. <br />
                                                        0 - Switched-mode power supply (SMPS) for V15 disabled.<br />
                                                        1 - Switched-mode power supply (SMPS) for V15 enabled.<br />
                                                        Note: The configuration need to be corresponding to the jump setting (DC 1.5V supply configuration) on board:<br />
                                                              - Switched-mode power supply (SMPS) for V15 disabled: 1.5V must be supplied from other source (external power screw connector, sourced from Motherboard (J56A), on board PMIC FS26).
                                                              - Switched-mode power supply (SMPS) for V15 enabled: 1.5V must be sourced from on chip SMPS.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="true"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:cd464584-de1b-4493-89c1-9693dd42f891"/>
                                            <a:a name="LABEL" value="V15 Switched-mode power supply enable"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMSMPSEN')" />
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuLVRBLPENEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LVRBLPEN] field configuration.<br />
                                                        This bit controls whether the low voltage reset detection (LVRBLP) on VDD_HV_B power domain is
                                                        active or inactive in Low Power Mode (LPM).<br />
                                                        0 - Low voltage reset detection (LVRBLP) is disabled in LPM.<br />
                                                        1 - Low voltage reset detection (LVRBLP) is enabled in LPM.<br />
                                                        This node is not supported on S32K312 derivative.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3fdebd85-c152-4b33-9ebd-692aeb84e6dc"/>
                                            <a:a name="LABEL" value="VDD_HVD_B Low Voltage Reset Detection In LPM"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LVRBLPEN')" />
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuLPM25ENEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LPM25EN] field configuration.<br />
                                                        This bit controls whether the V25 regulator and low voltage reset detection (LVR25LP) is active
                                                        or inactive in Low Power Mode (LPM). <br />
                                                        0 - V25 regulator and LVR25LP is disabled in LPM.<br />
                                                        1 - V25 regulator and LVR25LP is enabled in LPM.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3fdebd85-c152-4b33-9ebd-692a8584e6dc"/>
                                            <a:a name="LABEL" value="V25 Regulator And Low Voltage Reset Detection In LPM"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LPM25EN')" />
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuFASTRECEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[FASTREC] field configuration.<br />
                                                        Fast Recovery from LPM Enable Bit.<br />
                                                        This bit controls the recovery time from Low Power Mode (LPM) to Full Performance Mode (FPM). At
                                                        recovery from Low Power Mode, all the tank capacitors from the secondary supplies have to re-recharged.
                                                        This causes a high current demand, that might not be met by the supply driving the VDD_HV_A primary
                                                        domain. When selecting the fast recovery time, the current for recharging is approximately 3 times higher
                                                        than for FASTREC=0. Please refer to data sheet for normal and fast recovery time specification.
                                                        Application must determine from the drive capability of the external VDD_HV_A regulator, the size of tank
                                                        caps on the secondary supply pins and the selected recovery time if this is suffient to start up from Low
                                                        Power Mode in time. <br />
                                                        0 - Normal recovery time from LPM.<br />
                                                        1 - Fast recovery time from LPM.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3fdebd85-c152-4b33-9ebd-692a8c64e6dc"/>
                                            <a:a name="LABEL" value="Fast Recovery from LPM Enable"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'FASTREC')" />
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuLMBCTLENEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LMBCTLEN] field configuration.<br />
                                                        Last Mile Regulator Base Control Enable Bit.<br />
                                                        This bit must be set to 1 if external BJT between VDD_HV_A and V15 is used on the PCB.
                                                        The base of this BJT must be connected to the VRC_CTRL pin and is controlled by the PMC
                                                        to regulate a voltage of 1.5V on V15 pin.<br />
                                                        0 - External BCTL regulator for V15 disabled.<br />
                                                        1 - External BCTL regulator for V15 enabled.<br />
                                                        This node is not supported on S32K312 derivative.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="true"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3fdebd85-c152-4a93-9ebd-692a8c46ed4c"/>
                                            <a:a name="LABEL" value="Last Mile Regulator Base Control Enable"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMBCTLEN')" />
                                            </a:a>
                                        </v:var>

                                        <v:var name="McuLMENEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LMEN] field configuration.<br />
                                                        Last Mile Regulator Enable Bit.<br />
                                                        Enables the Last Mile regulator, which regulates an external 1.5V voltage on V15 down to the core and
                                                        logic supply (V11 power domain), which is typically 1.1V. Setting LMEN=1 hands over the V11 voltage
                                                        generation from the Boot regulator to the Last Mile regulator. The software must ensure that before
                                                        enabling the Last Mile regulator, the voltage on V15 is sufficiently high as indicated by the LVD15S
                                                        status field (LVD15S=0). To use external BJT between VDD_HV_A and V15, the LMBCTLEN field must
                                                        be set before the LMEN field, and the software must wait until 1.5V is up (LVD15S=0). If LMAUTOEN=0
                                                        then to disable the Last Mile regulator, LMEN and LMBCTLEN must be cleared simultaneously (single
                                                        register write). The software must disable (LMEN=0) the Last Mile regulator before going into LPM. After
                                                        setting LMEN=1, software must wait a minimum time of 1.5us before changing clock rate. <br />
                                                        0 - Last Mile Regulator disabled.<br />
                                                        1 - Last Mile Regulator enabled.<br />
                                                        This node is not supported on S32K312 derivative.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="true"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3fdebd85-c152-4a93-9ebd-692a6e04e6dc"/>
                                            <a:a name="LABEL" value="Last Mile Regulator Enable"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMEN')" />
                                            </a:a>
                                            <a:da name="WARNING" type="XPath">
                                                <a:tst expr="(node:fallback(., 'false') = 'false') and contains(ecu:get('MCU.PMC.Config.List'), 'LMEN')"
                                                true="If the PLL is configured to run in full performance mode, there is required to enable Last Mile Regulator"/>
                                            </a:da>
                                        </v:var>
                                        <v:var name="McuSMPSConfSelect" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        SMPSCONFIG[CFG] configuration select. <br />
                                                        Select a configuration for period and duty cycle(ontime) of the Switched-mode power
                                                        supply driving via PMOS_CTRL the external power FET.<br />
                                                        CFG[3:0] bits       |PMOS_CTRL Frequency        | PMOS_CTRL Duty cycle 3V     |PMOS_CTRL Duty cycle 5V <br />
                                                        0001                |470 kHz                    | 64.7%                       |52.9%                   <br />
                                                        0010                |470 kHz                    | 52.9%                       |41.2%                   <br />
                                                        0011                |533 kHz                    | 60%                         |46.7%                   <br />
                                                        0100                |533 kHz                    | 66.7%                       |53.5%                   <br />
                                                        0101                |533 kHz                    | 53.3%                       |40%                     <br />
                                                        0110                |421 kHz                    | 57.9%                       |47.4%                   <br />
                                                        0111                |421 kHz                    | 63.2%                       |52.6%                   <br />
                                                        1000                |421 kHz                    | 52.6%                       |42.1%                   <br />
                                                        1001 to 1110        |Reserved                   | Reserved                    |Reserved                <br />
                                                        1111                |8MHz/(PERIOD+1)            | ONTIME3V/(PERIOD+1)         |ONTIME5V/(PERIOD+1)     <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="SMPS configuration select"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:c7988d5c-a1a0-432d-868c-11223318b812"/>
                                            <a:da name="DEFAULT" value="15"/>
                                            <a:da name="EDITABLE" type="XPath" expr="(node:fallback(../McuLMSMPSENEnable, 'true') = 'true')"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMSMPSEN')" />
                                            </a:a>
                                            <a:a name="INVALID" type="Range">
                                                <a:tst expr="&lt;=15"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:a>
                                        </v:var>
                                        <v:var name="McuSMPSPeriod" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        SMPSCONFIG[PERIOD] field configuration.<br />
                                                        Determine the period and frequency of the output signal at PMOS_CTRL pin.<br />
                                                        It calculates as: Freq_pmos_ctrl = 8 MHz/(PERIOD + 1)<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="SMPS Period"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:c7988d5c-2134-3444-1122-11223318b812"/>
                                            <a:da name="DEFAULT" value="0"/>
                                            <a:da name="EDITABLE" type="XPath" expr="(node:fallback(../McuLMSMPSENEnable, 'true') = 'true') and (node:value(../McuSMPSConfSelect)=15)"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMSMPSEN')" />
                                            </a:a>
                                            <a:a name="INVALID" type="Range">
                                                <a:tst expr="&lt;=31"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:a>
                                        </v:var>
                                        <v:var name="McuSMPSOnTime3V" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        SMPSCONFIG[ONTIME3V] Duty Cycle for 3V range. <br />
                                                        Determine the duty cycle of the output signal at PMOS_CTRL pin.
                                                        This duty cycle is applied while VDD_DCDC is smaller than 4V.
                                                        It calculates as: Duty_pmos_ctrl = ONTIME3V/(PERIOD+1)<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="SMPS Duty cycle for 3V range"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:c7988d5c-a1a0-432d-1122-11223318b812"/>
                                            <a:da name="DEFAULT" value="0"/>
                                            <a:da name="EDITABLE" type="XPath" expr="(node:fallback(../McuLMSMPSENEnable, 'true') = 'true') and (node:value(../McuSMPSConfSelect)=15)"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMSMPSEN')" />
                                            </a:a>
                                            <a:a name="INVALID" type="Range">
                                                <a:tst expr="&lt;=31"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:a>
                                        </v:var>
                                        <v:var name="McuSMPSOnTime5V" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        SMPSCONFIG[ONTIME5V] Duty Cycle for 5V range. <br />
                                                        Determine the duty cycle of the output signal at PMOS_CTRL pin.
                                                        This duty cycle is applied while VDD_DCDC is greater or equal than 4V.
                                                        It calculates as: Duty_pmos_ctrl = ONTIME5V/(PERIOD+1)<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="SMPS Duty cycle for 5V range"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:c7988d5c-2134-432d-1122-11223318b812"/>
                                            <a:da name="DEFAULT" value="0"/>
                                            <a:da name="EDITABLE" type="XPath" expr="(node:fallback(../McuLMSMPSENEnable, 'true') = 'true') and (node:value(../McuSMPSConfSelect)=15)"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMSMPSEN')" />
                                            </a:a>
                                            <a:a name="INVALID" type="Range">
                                                <a:tst expr="&lt;=31"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:a>
                                        </v:var>
                                        <v:var name="McuSMPSLPM15EN" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        SMPSCONFIG[LPM15EN] field configuration.<br />
                                                        V15 domain enable bit during LPM.<br />
                                                        Enables the V15 in LPM. This is useful for fast recovery to FPM when using the SMPS mode to generate the V15. <br />
                                                        This feature is only active in LPM, in FPM it is turned off. For this purpose there is a small LDO inside the PMC
                                                        that regulates the V15 to target value during LPM.<br />

                                                        Note: LPM15EN is only allowed to use, when using the SMPS to geenrate the V15. For other options to generate the V15
                                                        it is forbidden.<br />
                                                        0 - V15 not kept on target in LPM.<br />
                                                        1 - V15 kept on target in LPM.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3f112233-c152-4a93-9ebd-692a6e04e6dc"/>
                                            <a:a name="LABEL" value="V15 domain enable during LPM"/>
                                            <a:da name="EDITABLE" type="XPath" expr="(node:fallback(../McuLMSMPSENEnable, 'true') = 'true')"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMSMPSEN')" />
                                            </a:a>
                                        </v:var>
                                        <v:var name="McuSMPSDitherEn" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        SMPSCONFIG[DITHEREN] field configuration.<br />
                                                        IRC Dither Enable.<br />
                                                        Enables dithering of the 8 MHz IRC.<br />
                                                        0 - 8MHz IRC dithering disabled.<br />
                                                        1 - 8MHz IRC dithering enabled.<br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:da name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:3f112233-c152-4a93-ccdd-692a6e04e6dc"/>
                                            <a:a name="LABEL" value="IRC Dither Enable"/>
                                            <a:da name="EDITABLE" type="XPath" expr="(node:fallback(../McuLMSMPSENEnable, 'true') = 'true')"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMSMPSEN')" />
                                            </a:a>
                                        </v:var>
                                        <v:var name="McuSMPSDitherConf" type="INTEGER">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        SMPSCONFIG[DITHERCFG] field configuration. <br />
                                                        Configuration to select IRC dithering amplitude and frequency. <br />
                                                        This feature is to spread the spectrum of driving PMOS_CTRL pin to reduce radiated emission.<br />
                                                        DITHERCFG[1:0] bits             |Dither Amplitude               | Dither Frequency <br />
                                                        00                              |+/-0.4 MHz                     | 400 kHz          <br />
                                                        01                              |+/-0.6 MHz                     | 286 kHz          <br />
                                                        10                              |+/-0.8 MHz                     | 222 kHz          <br />
                                                        11                              |+/-1   MHz                     | 182 kHz          <br />
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="IRC Dither configuration"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:c7988d5c-2134-432d-1122-56783318b812"/>
                                            <a:da name="DEFAULT" value="0"/>
                                            <a:da name="EDITABLE" type="XPath" expr="(node:fallback(../McuLMSMPSENEnable, 'true') = 'true') and (node:fallback(../McuSMPSDitherEn, 'true') = 'true')"/>
                                            <a:a name="VISIBLE" type="XPath">
                                                <a:tst expr="contains(ecu:get('MCU.PMC.Config.List'), 'LMSMPSEN')" />
                                            </a:a>
                                            <a:a name="INVALID" type="Range">
                                                <a:tst expr="&lt;=3"/>
                                                <a:tst expr="&gt;=0"/>
                                            </a:a>
                                        </v:var>
                                    </v:ctr>

                                    <v:ctr name="McuPMC_AE_Config" type="IDENTIFIABLE">
                                        <a:a name="DESC">
                                            <a:v>
                                                <![CDATA[EN:<html>
                                                    This PMC_AE Control Register contains the various control settings of the PMC_AE block. <br />
                                                    Note: Implementation Specific Parameter. <br />
                                                </html>]]>
                                            </a:v>
                                        </a:a>
                                        <a:a name="UUID" value="ECUC:a76f1590-ab79-4586-95d9-c657bb134d98"/>
                                        <a:da name="VISIBLE" type="XPath">
                                            <a:tst  expr="(ecu:get('MCU.PMC.AE.SUPPORT') = 'true')"/>
                                        </a:da>

                                        <v:var name="McuLowVoltageDetectInterruptsOnVLSEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_MONITOR[LVDVLSIE] - LVD on VLS interrupt enable.<p/>
                                                        This is to enable interrupt for low voltage detect on VLS (GDU) power domain.<p/>
                                                        An interrupt will be requested in case of LVDVLSF=1.<p/>
                                                        0 - Low voltage detect interrupts on VLS disabled.<p/>
                                                        1 - Low voltage detect interrupts on VLS enabled.<p/>
                                                        Note:<p/>
                                                        - Implementation Specific Parameter.<p/>
                                                        - Only support for S32M2xx series of devices.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="INVALID" type="XPath">
                                                <a:tst expr="
                                                    (
                                                        ( node:fallback(., 'false') = 'true' ) and
                                                        ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuVoltageErrorIsrUsed, 'false') = 'false' )
                                                    )"
                                                    true="The field McuGeneralConfiguration/McuVoltageErrorIsrUsed must be set to 'true' when voltage monitoring IRQs are enabled."/>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:fc7bf90e-fd80-472a-9621-9e3c65a91c97"/>
                                            <a:a name="LABEL" value="Enable Low Voltage Detect Interrupts On VLS"/>
                                        </v:var>

                                        <v:var name="McuLowVoltageDetectInterruptsOnVDDCEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_MONITOR[LVDCIE] - LVD on VDDC interrupt enable.<p/>
                                                        This is to enable interrupt for low voltage detect on VDDC power domain.<p/>
                                                        An interrupt will be requested in case of LVDCF=1.<p/>
                                                        0 - Low voltage detect interrupts on VDDC disabled.<p/>
                                                        1 - Low voltage detect interrupts on VDDC enabled.<p/>
                                                        Note:<p/>
                                                        - Implementation Specific Parameter.<p/>
                                                        - Only support for S32M2xx series of devices.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="INVALID" type="XPath">
                                                <a:tst expr="
                                                    (
                                                        ( node:fallback(., 'false') = 'true' ) and
                                                        ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuVoltageErrorIsrUsed, 'false') = 'false' )
                                                    )"
                                                    true="The field McuGeneralConfiguration/McuVoltageErrorIsrUsed must be set to 'true' when voltage monitoring IRQs are enabled."/>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:fc7bf90e-fd80-472a-9621-9e3c65a92c97"/>
                                            <a:a name="LABEL" value="Enable Low Voltage Detect Interrupts On VDDC"/>
                                        </v:var>

                                        <v:var name="McuHighVoltageDetectInterruptOnVDDEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_MONITOR[HVDVDDIE] - HVD on VDD interrupt enable.<p/>
                                                        This is to enable interrupt for high voltage detection on VDD supply.<p/>
                                                        An interrupt will be requested in case of HVDVDDF=1.<p/>
                                                        0 - High voltage detect interrupt disabled.<p/>
                                                        1 - High voltage detect interrupt enabled.<p/>
                                                        Note:<p/>
                                                        - Implementation Specific Parameter.<p/>
                                                        - Only support for S32M2xx series of devices.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="INVALID" type="XPath">
                                                <a:tst expr="
                                                    (
                                                        ( node:fallback(., 'false') = 'true' ) and
                                                        ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuVoltageErrorIsrUsed, 'false') = 'false' )
                                                    )"
                                                    true="The field McuGeneralConfiguration/McuVoltageErrorIsrUsed must be set to 'true' when voltage monitoring IRQs are enabled."/>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:fc7bf90e-fd80-473a-9621-9e4c65a92c97"/>
                                            <a:a name="LABEL" value="Enable HVD On VDD Interrupt"/>
                                        </v:var>

                                        <v:var name="McuHighVoltageDetectInterruptOnVDDINTAndVDD15Enable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_MONITOR[HVDINT15IE] - HVD on VDD interrupt enable.<p/>
                                                        This is to enable interrupt for high voltage detection on the A10 internal supplies VDDINT or VDD15.<p/>
                                                        An interrupt will be requested in case of HVD15F=1 or HVDINTF=1.<p/>
                                                        0 - High voltage detect interrupt disabled.<p/>
                                                        1 - High voltage detect interrupt enabled.<p/>
                                                        Note:<p/>
                                                        - Implementation Specific Parameter.<p/>
                                                        - Only support for S32M2xx series of devices.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="INVALID" type="XPath">
                                                <a:tst expr="
                                                    (
                                                        ( node:fallback(., 'false') = 'true' ) and
                                                        ( node:fallback(as:modconf('Mcu')[1]/McuGeneralConfiguration/McuVoltageErrorIsrUsed, 'false') = 'false' )
                                                    )"
                                                    true="The field McuGeneralConfiguration/McuVoltageErrorIsrUsed must be set to 'true' when voltage monitoring IRQs are enabled."/>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:fc7bf90e-fd80-472a-9621-9e5c65a92c97"/>
                                            <a:a name="LABEL" value="Enable HVD On VDDINT Or VDD15 Interrupt"/>
                                        </v:var>

                                        <v:var name="McuLinphySupplyEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LINSUPEN] - LINPHY supply enable bit.<p/>
                                                        Enables the LINPHY supply. If disabled LINPHY is turned high ohmic.<p/>
                                                        In case LINPHY is generally not used setting LINSUPEN=0 will save power.<p/>
                                                        0 - LINPHY supply is high ohmic (off).<p/>
                                                        1 - LINPHY supply is as selected by LINSUPSEL bit.<p/>
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="DEFAULT" value="true"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:f36126c1-df43-44ae-b8c6-b435138ca270"/>
                                            <a:a name="LABEL" value="LINPHY Supply Enable"/>
                                        </v:var>

                                        <v:var name="McuVDDCEnable" type="BOOLEAN">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[VDDCEN] - VDDC enable bit.<p/>
                                                        This Bit enables the VDDC supply.<p/>
                                                        A PMC internal regulator generates the VDDC from VPRE supply.<p/>
                                                        VDDC is the 5V supply for the CAN physical interface IP.<p/>
                                                        0 - VDDC is disabled.<p/>
                                                        1 - VDDC is enabled and regulated to 5V.<p/>
                                                        Note: Implementation Specific Parameter.
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="DEFAULT" value="false"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:f36126c1-df43-44ae-b8c5-b435138ca270"/>
                                            <a:a name="LABEL" value="VDDC Enable"/>
                                        </v:var>

                                        <v:var name="McuLvdVlsSelect" type="ENUMERATION">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LVDVLSSEL] - LVD VLS select.<p/>
                                                        The LVD (Low-Voltage-Dectection) threshold for generated VLS supply is selectable. There are two options.<p/>
                                                        5_5V - LVD threshold on VLS supply is 5.5V.<p/>
                                                        6_5V - LVD threshold on VLS supply is 6.5V.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="LVD VLS Select"/>
                                            <a:da name="RANGE">
                                                <a:v>LVD_5_5V</a:v>
                                                <a:v>LVD_6_5V</a:v>
                                            </a:da>
                                            <a:da name="DEFAULT" value="LVD_6_5V"/>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:04cace0d-ec58-470d-8f89-99675f554c8c"/>
                                        </v:var>

                                        <v:var name="McuLinphySupplySelect" type="ENUMERATION">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[LINSUPSEL] - LINPHY supply select.<p/>
                                                        Selects LINPHY supply to be either connected to VSUP pin or HD pin (GDU).<p/>
                                                        In case using the boost option in GDU, the LINPHY supply must be on HD pin.<p/>
                                                        0b - LINPHY supply connects to VSUP pin.<p/>
                                                        1b - LINPHY supply connects to HD pin (of GDU).<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="LINPHY Supply Select"/>
                                            <a:da name="DEFAULT" value="VSUP_PIN"/>
                                            <a:da name="RANGE">
                                                <a:v>VSUP_PIN</a:v>
                                                <a:v>HD_PIN</a:v>
                                            </a:da>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:04cace0d-ec58-470d-9f89-99675f554c8c"/>
                                        </v:var>

                                        <v:var name="McuVddVoltageLevelSelect" type="ENUMERATION">
                                            <a:a name="DESC">
                                                <a:v>
                                                    <![CDATA[EN:<html>
                                                        PMC_CONFIG[VDDSEL5V] - VDD voltage level select.<p/>
                                                        Selects VDD (supply for MCU) to be either 3.3V or 5V.<p/>
                                                        3_3V - VDD is regulated to 3.3V.<p/>
                                                        5V - VDD is regulated to 5V.<p/>
                                                        Note: Implementation Specific Parameter.<p/>
                                                    </html>]]>
                                                </a:v>
                                            </a:a>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                            </a:a>
                                            <a:a name="LABEL" value="VDD Voltage Level Select"/>
                                            <a:da name="DEFAULT" value="VDD_3_3V"/>
                                            <a:da name="RANGE">
                                                <a:v>VDD_3_3V</a:v>
                                                <a:v>VDD_5V</a:v>
                                            </a:da>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                            <a:a name="UUID" value="ECUC:04cace0d-ec58-570d-9f89-99675f554c8c"/>
                                        </v:var>
                                    </v:ctr>
                                </v:ctr>


                            </v:ctr>
                        </v:ctr>
                    </d:chc>

                    <d:chc name="Mcu_EcuParameterDefinition" type="AR-ELEMENT" value="ECU_PARAMETER_DEFINITION">
                        <d:ctr type="AR-ELEMENT">
                            <a:a name="UUID" value="ECUC:c5d9411f-2fff-545c-8395-901b51b401de"/>
                            <a:a name="DEF" value="ASPath:/AR_PACKAGE_SCHEMA/ECU_PARAMETER_DEFINITION"/>
                            <d:lst name="MODULE_REF">
                                <d:ref type="MODULE_REF" value="ASPath:/TS_T40D34M30I0R0/Mcu"/>
                            </d:lst>
                        </d:ctr>
                    </d:chc>
                    <d:chc name="Mcu_ModuleDescription" type="AR-ELEMENT" value="BSW_MODULE_DESCRIPTION">
                        <d:ctr type="AR-ELEMENT">
                            <a:a name="DEF" value="ASPath:/AR_PACKAGE_SCHEMA/BSW_MODULE_DESCRIPTION"/>
                            <d:var name="MODULE_ID" type="INTEGER" >
                                <a:a name="EDITABLE" value="false"/>
                                <a:a name="IMPORTER_INFO" value="@DEF"/>
                            </d:var>
                            <d:ref type="RECOMMENDED_CONFIGURATION" >
                                <a:a name="EDITABLE" value="false"/>
                                <a:a name="IMPORTER_INFO" value="@DEF"/>
                            </d:ref>
                            <d:ref type="PRE_CONFIGURED_CONF" >
                                <a:a name="EDITABLE" value="false"/>
                                <a:a name="IMPORTER_INFO" value="@DEF"/>
                            </d:ref>
                            <d:ref type="VENDOR_SPECIFIC_MODULE_DEF" value="ASPath:/TS_T40D34M30I0R0/Mcu"/>
                        </d:ctr>
                    </d:chc>

                </d:lst>
            </d:ctr>
        </d:lst>
    </d:ctr>
</datamodel>
