1. Example Description
    This application demonstrates the usage of MPU Platform HLD.
    The application includes an S32DS project that configures the Platform driver.
    1.1 The application software functionality
                - Declare variables
                - Call Clock_Ip_Init, Power_Ip_SetMode to initialize Clock and power mode
                - Call Dma_Ip_Init to initialize DMA
                - Synchronize cache before update mpu
                - Call Mpu_M7_Ip_Init to initialize 5 regions, with 5 regions configured as follows:
                  - Region 0 - RegionConfig_Flash     - MEM_NORMAL_IO_WR_BACK1 - PRIV_RWX_UNPRIV_RWX - POLICY_W_THROUGH_NO_W_ALLOCATE
                  - Region 1 - RegionConfig_Cache     - MEM_NORMAL_IO_WR_BACK1 - PRIV_RWX_UNPRIV_RWX - POLICY_W_THROUGH_NO_W_ALLOCATE
                  - Region 2 - RegionConfig_NoCache   - MEM_STRONG_ORDER       - PRIV_RW_UNPRIV_RW   - POLICY_NO_CACHE
                  - Region 3 - RegionConfig_Shareable - MEM_DEVICE_SHARED      - PRIV_RWX_UNPRIV_RWX - POLICY_NO_CACHE
                  - Region 4 - RegionConfig_Result    - MEM_STRONG_ORDER       - PRIV_RWX_UNPRIV_RWX - POLICY_NO_CACHE
                - Enable cache
                - 1. Access Data To Read/Write/Execute MPU Region
                        - Copy data from .mcal_data_no_cacheable section (MPU Region 2) to .mcal_shared_data section (MPU Region 3)
                        - Verification Point: CPU transfer successfully
                - 2. Access Read Data To Non-Read/Write MPU Region
                        - Call Mpu_M7_Ip_SetAccessRight to change permission access (MPU_M7_PRIV_UNPRIV_NONE) for the .mcal_data_no_cacheable section (MPU Region 2)
                        - Verification Point: CPU read failed
                - 3. Access Write Data to Read-only MPU Region
                        - Call Mpu_M7_Ip_SetAccessRight to change permission access (MPU_M7_PRIV_R_UNPRIV_R) for the .mcal_data_no_cacheable section (MPU Region 3)
                        - Verification Point: CPU write failed
                - 4. Fetch Code From Non-Execution MPU Region
                        - Create new MPU region 5 - MEM_NORMAL_IO_WR_THROUGH - PRIV_RW_UNPRIV_RW - POLICY_W_THROUGH_NO_W_ALLOCATE
                        - Call SetupRamCodeMpuRegion() to setup new region (MPU_M7_PRIV_RW_UNPRIV_RW) for .ramcode section (New MPU Region 5)
                        - Call MpuTestFunc()
                        - Verification Point: CPU fetch code failed
                - 5. Cache Coherence - Access Data to Write Back & Write Allocate MPU Region
                        - Call Mpu_M7_Ip_SetRegionConfig() to change cache policy (CACHE_POLICY_W_BACK_WR_ALLOCATE)
                        - Call Cache_Ip_CleanByAddr()
                        - Write dummy value to do cache miss for first time accessing memory, make sure cache hit for next access time
                        - Copy data by calling PerformDmaTransfer()
                        - Verification Point: At this time, data is available on Cache Memory but not on SRAM due to CACHE_POLICY_W_BACK_WR_ALLOCATE cache policy
                        - Calling Cache_Ip_InvalidateByAddr() to result in a cache miss when CPU tries to read in the next access time
                        - Verification Point: Now, data is available on both Cache Memory and SRAM when CPU read
                - 6. Cache Coherence - Access Data to Write Through & Write No Allocate MPU Region
                        - Call Mpu_M7_Ip_SetRegionConfig() to change cache policy (POLICY_W_THROUGH_NO_W_ALLOCATE)
                        - Call Cache_Ip_CleanByAddr()
                        - Write dummy value to do cache miss for first time accessing memory, make sure cache hit for next access time
                        - Copy data by calling PerformDmaTransfer()
                        - Verification Point: Data is available on both Cache Memory and SRAM when CPU read due to POLICY_W_THROUGH_NO_W_ALLOCATE
                - Exit example
2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - Boards/ EVBs: S32K3X4EVB-Q257 47827 PCB RevX1 SCH RevA & S32K3X4EVB-Q172 51972 PCB RevA SCH RevA
            - Silicon: P32K344EHVMMS 0P55A CTSK2038A & P32K344EHVPBS 1P55A CTZX2128B
        2.1.2 Connections
            - Powered board through power Adapter 12V
        2.1.3 Debugger
            - S32K3X4EVB-Q172: The debugger must be connected to J12 20-pin JTAG Cortex Debug connector or J40 for openSDA.
            - S32K3X4EVB-Q257: The debugger must be connected to J365 20-pin JTAG Cortex Debug connector or J55 for openSDA.
    2.2 Software installation
        Make sure that all RTD plugins are already installed in the S32DS plugins directory
    2.2 Software installation
        - Make sure that all RTD plugins are already installed in the S32DS plugins directory
3. How to run
    3.1 Importing the project into the workspace
        After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select "Platform_MPU_IP_Example_S32K344". Then click on "Finish".
        The project should now be copied into you current workspace.
        Wait for the S32 Configuration was initialized and ready.
    3.2 Generating the S32 configuration
        The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
        The initial configuration will have the same settings as the default example settings.
        Right click on the current project, then click "S32 Configuration Tool" choose "Open Peripherals".
        Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
        Make the desired changes (if any) then click "Update Code".
    3.3 Building the project
            Select the configuration to be built: RAM (Debug_RAM), or FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
            Use Project > Build to build the project.
            Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file should be created.
    3.4 Running the project
            Go to Run and select Debug Configurations. There will be a debug configuration for this project:

            Configuration Name                                    Description
            -------------------------------                       -----------------------
            Platform_MPU_IP_Example_S32K344_Debug_FLASH_PNE       Debug the FLASH configuration using PEmicro probe

            Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
            Use the controls to control the program flow.