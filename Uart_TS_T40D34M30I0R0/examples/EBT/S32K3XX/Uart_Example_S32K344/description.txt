1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers that are included in this code drop. It is not part of the production code deliverables.
    This is a simple application which shows the usage of Uart driver on EBT for S32K344 derivative.
    1.1 The aplication software functionality
            - Port_Init
                    Initialize the pins used by the application using the Port driver.
            - Mcu_Init, Mcu_InitClock, Mcu_SetMode
                    Initialize the clock sources for project.
            - Mcl_Init
                    Initialize the Mcl module for Flexio common part.
            - Platform_Init
              Platform_InstallIrqHandler
                    Install the ISR for the Uart
            - Uart_Init
                    Initialize the Uart driver
            - Uart_Deinit
                    Deinitialize the Uart driver
            - Uart_AsyncSend
                    Send Uart data
            - Uart_AsyncReceive
                    Receive Uart data
            - Uart_GetStatus
                    Get status of Uart
            - Uart_Deinit
                    Uninitialize the Uart driver
            - Mcl_Deinit
                    Uninitialize the Mcl driver
    1.2 The aplication description
            - The first welcome message is sent via UART: "Hello, This message is sent via Uart!"
            - The second welcome message is sent via UART: "Have a nice day!"
            - User need to check return status of Send_Data() function for verifying example.
2. Installation steps
    2.1 Hardware installation
        2.1.1 Hardware preparation
            - S32K3X4EVB-Q257 47827 PCB RevX1 SCH RevA or S32K3XXEVB-Q172 51972 PCB RevA SCH RevA
            - 1 S32Debugger: Lauterbach
        2.2.2 Connections
            - It uses Lpuart instance 3, comunicates with Flexio instance 0 channel 0 for Tx and channel 1 for Rx
            - With S32K3X4EVB-Q257 47827 PCB RevX1 SCH RevA: Connect PTD0(J358.4) - PTD3(J352.10) and PTD1(J358.1) - PTD2(J352.7)
            - With S32K3XXEVB-Q172 51972 PCB RevA SCH RevA: Connect PTD0(J37.3) - PTD3(J2.10) and PTD1(J37.1) - PTD2(J2.7)
        2.2.3 Debugger
            - Connect Lauterbach to JTAG port on the board.

    2.2 Software installation
        2.2.1 Tresos Project Installation
            The following procedure requires that the user has EB Tresos Studio installed and it is only needed for viewing, updating and generating the driver's configuration.
            Procedure:
                1. Make sure that all RTD plugins are already installed in the Tresos Studio plugins directory
                2. Open Tresos Studio
                3. Import example application project
                    a. Click on "File" and select "Import"
                    b. Select "Existing Projects into Workspace" and click on "Next" button
                    c. Select "Select root directory" and click on "Browse"
                    d. Select the location of the [project] folder in the installed example application package folder
                    e. Optional* - Select "Copy projects into workspace"
                    f. Click on "Finish" button
        2.2.2 Example configuration
            The following procedure requires that the user has EB Tresos Studio installed and the toolchains versions specified in the Release Notes.
            The toolchain that will be used needs to be installed for correct operation and the path to the installation location shall be added into the system environment variable(s):
            - TRESOS_DIR the installation path of Electrobit Tresos (used for generating the project from command line)
                Ex: TRESOS_DIR = C:/EB/tresos
            - GCC_DIR The path to the GCC instalation dir
                Ex: GCC_DIR = C:/build_tools/gcc_v9.2/gcc-9.2-arm32-eabi
            - PLUGINS_DIR The path to the RTD plugins directory
                Ex: PLUGINS_DIR = C:/NXP/SW32_RTD/eclipse/plugins
            Procedure:
                1. Open project_parameters.mk file in a text editor and update the variables mentioned above with the correct paths
                2. Open "Makefile" file in a text editor and add path to the Uart header directory to INCLUDE_DIRS+=
                    Ex: $(PLUGINS_DIR)/Uart_$(AR_PKG_NAME)/include
3. Building the example application
    3.1 Compiling the application
        Procedure:
            1. Open the Windows command prompt window
            2. Change the current directory to the example application folder
            3. To build the example, execute the following command to build: make build
            4. The object files and linker output file (main.elf) shall be generated in the /out subdirectory
    3.2 Running the application on the board
        To execute the example application from your command line execute make run. For executing the script in a T32 window already open the paths from run.cmm need to be changed relative to the debug folder instead of the example root folder.
    3.3 Modifying the configuration in Tresos and generating the code
        Users may change the application configuration according to their needs.
        Procedure:
            1. Open the EB Tresos Studio GUI
            2. Open previously imported Example Application project
            3. Use the Tresos Studio GUI to modify configuration parameter values and save the changes.
            4. Select the Example Application project and click on "Generate" button to generate the configuration files.
