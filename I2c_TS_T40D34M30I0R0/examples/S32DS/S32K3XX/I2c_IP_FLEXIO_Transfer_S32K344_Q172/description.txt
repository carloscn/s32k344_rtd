1. Example Description
    The application includes an S32 Design Studio project that configures the I2c driver.
 1.1 The application software functionality
        With Platform_Init it initializes the interrupt controller and it applies the interrupt configuration according to the Platform configuration. The interrupt handlers are mapped using calls of  Platform_InstallIrqHandler.
        The application will initialize two I2C instances, one initialize as master and the other as slave. The master initiate a send transfer on the I2C bus. After the transfer is completed, and both master and slave are idle, the rx buffer of the slave is checked against the master tx buffer, and in case the transfer was successful the checkOk variable will be TRUE.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - EVB: S32K3X4EVB-Q172 51972 PCB RevA SCH RevA.
            - Silicon: P32K344EHVPBS 1P55A CTZX2128B
        2.2.2 Connections
            - Connections: SCL: J4.19 - J38.8
                           SDA: J4.17 - J3.30.
            - Pull up resistors of 2.2K each, one connected between SDA, SCL and VDD(J39.13).
        2.2.3 Debugger
            The debugger must be connected to J12 20-pin JTAG Cortex Debug connector.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select the example. Then click on "Finish".
            The project should now be copied into you current workspace.
         
3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated. First go to Project Explorer View in S32DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: RAM (Debug_RAM), or FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse. 
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, I2c_HLD_FLEXIO_Transfer_S32K344_Q172.elf or I2c_IP_FLEXIO_Transfer_S32K344_Q172.elf binary file
        should be created.
    3.2 Running the application on the board in one of two ways below:
        3.2.1 To execute the example application load the executable file to the evaluation board using the Lauterbach debugger and the s32k3xx.cmm script.
        Open the cmm script in a text editor and replace the following strings:
            - __TARGET_MEMORY - replace with RAM (for RAM configuration), or FLASH (for FLASH configuration)
            - __PATH_TO_ELF - replace with the path to the elf binary files built with S32DS
        Run this script using T32 Lauterbach debugger after making the changes.
        3.2.2 Go to Run and select Debug Configurations. There will be a debug configuration for this project:
        
        Configuration Name                  Description
        -------------------------------     -----------------------
        $(example)_Debug_FLASH_PNE       |  Debug the FLASH configuration using PE Micro Debugger
        
        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.