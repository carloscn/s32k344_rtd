<?xml version='1.0'?>
<datamodel version="5.0"
           xmlns="http://www.tresos.de/_projects/DataModel2/12/root.xsd"
           xmlns:a="http://www.tresos.de/_projects/DataModel2/12/attribute.xsd"
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd"
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">
<!--
*   @file    Crypto.xdm
*   @version 3.0.0
*
*   @brief   AUTOSAR Crypto - Tresos Studio plugin schema file
*   @details This file contains the schema configuration for and Crypto Tresos Studio plugin.
-->
<!--
====================================================================================================
*   Project              : RTD AUTOSAR 4.7
*   Platform             : CORTEXM
*   Peripheral           : HSE
*   Dependencies         : none
*
*   Autosar Version      : 4.7.0
*   Autosar Revision     : ASR_REL_4_7_REV_0000
*   Autosar Conf.Variant :
*   SW Version           : 3.0.0
*   Build Version        : S32K3_RTD_3_0_0_D2303_ASR_REL_4_7_REV_0000_20230331
*
*   Copyright 2020 - 2023 NXP Semiconductors
*
*   NXP Confidential. This software is owned or controlled by NXP and may only be
*   used strictly in accordance with the applicable license terms. By expressly
*   accepting such terms or by downloading, installing, activating and/or otherwise
*   using the software, you are agreeing that you have read, and that you agree to
*   comply with and are bound by, such license terms. If you do not agree to be
*   bound by the applicable license terms, then you may not retain, install,
*   activate or otherwise use the software.
====================================================================================================
-->

  <d:ctr type="AUTOSAR" factory="autosar"
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd"
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd"
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd"
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
    <!-- @implements Crypto_Object -->
      <d:ctr name="TS_T40D34M30I0R0" type="AR-PACKAGE">
        <a:a name="UUID" value="ECUC:35cab853-b883-496d-98d6-c2226b4d6856"/>
            <d:lst type="ELEMENTS">
              <d:chc name="Crypto" type="AR-ELEMENT" value="MODULE-DEF">
                <v:ctr type="MODULE-DEF">
                        <a:a name="RELEASE" value="asc:4.7"/>
                    <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                        <ad:ADMIN-DATA>
                            <ad:DOC-REVISIONS>
                            <ad:DOC-REVISION>
                            <ad:REVISION-LABEL>4.4.0</ad:REVISION-LABEL>
                            <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                            </ad:DOC-REVISION>
                        </ad:DOC-REVISIONS>
                    </ad:ADMIN-DATA>
                    </a:a>
                    <a:a name="DESC" value="EN: Configuration of the Crypto (CryptoDriver) module"/>
                    <a:a name="LOWER-MULTIPLICITY" value="0"/>
                    <a:a name="POSTBUILDVARIANTSUPPORT" value="false"/>
                    <a:a name="UPPER-MULTIPLICITY" value="*"/>
                    <a:a name="UUID" value="ECUC:1e8f8d52-ca03-d4f1-21e2-21367143d9d5"/>

                    <v:var name="POST_BUILD_VARIANT_USED" type="BOOLEAN">
                        <a:a name="DESC" value="Indicates whether a module implementation has or plans to have (i.e., introduced at link or post-build time) new post-build variation points."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="Post Build Variant Used"/>
                        <a:a name="ORIGIN" value="EB"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="READONLY" value="true"/>
                    </v:var>
                    <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                        <a:a name="LABEL" value="Config Variant"/>
                        <a:a name="UUID" value="ECUC:1a6b36f0-eb4c-46d6-87b5-9360aa3b226c"/>
                        <a:a name="DESC">
                            <a:v>
                                <![CDATA[EN:
                                    <html><p>
                                        VariantPreCompile: Only precompile time configuration parameters.<br>
                                        The files Crypto_Cfg.h and Crypto_Cfg.c are used.<br>
                                    </p></html>
                                ]]>
                            </a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:da name="DEFAULT" value="VariantPreCompile"/>
                        <a:da name="RANGE">
                            <a:v>VariantPreCompile</a:v>
                        </a:da>
                    </v:var>

                    <!-- @implements CryptoDriverObjects_Object -->
                    <v:ctr name="CryptoDriverObjects" type="IDENTIFIABLE">
                        <a:a name="DESC" value="EN: Container for CRYPTO Objects, there can be maximum 2 Crypto Driver
                                   Objects configured: one for symmetric primitives and one for asymmetric primitives."/>
                        <a:a name="UUID" value="ECUC:1a1b756a-02a3d-3cf7-436f-5827bb56e618"/>

                        <v:lst name="CryptoDriverObject" type="MAP">
                            <a:da name="MIN" value="1"/>

                            <!-- @implements CryptoDriverObject_Object -->
                            <v:ctr name="CryptoDriverObject" type="IDENTIFIABLE">
                                <a:a name="DESC" value="EN: Configuration of a CryptoDriverObject"/>
                                <a:a name="UUID" value="ECUC:1f3e21d8-4e16-439c-a782-bf560503fb5c"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:da name="INVALID" type="XPath">
                                    <a:tst expr="num:i(count(../../../CryptoGeneral/CryptoEcucPartitionRef/*)) > 0 and num:i(count(./CryptoDriverObjectEcucPartitionRef/*)) != 1" true="When multicore is enabled (number of ECUC references configured in 'CryptoGeneral/CryptoEcucPartitionRef' is not zero), the 'CryptoDriverObjectEcucPartitionRef' list of the Crypto Driver Object should contain exactly one reference to an ECUC partition."/>
                                    <a:tst expr="num:i(count(../../../CryptoGeneral/CryptoEcucPartitionRef/*)) > 0 and num:i(count(text:grep(text:concat(../*/MuInstance, ../*/CryptoDriverObjectEcucPartitionRef/*[1]), concat('^(', (./MuInstance), ')(.*)$')))) > 1 and text:uniq(text:grep(text:concat(../*/MuInstance, ../*/CryptoDriverObjectEcucPartitionRef/*[1]), concat('^(', (./MuInstance), ')(.*)$')), concat((./MuInstance), ./CryptoDriverObjectEcucPartitionRef/*[1]))" true="When multicore is enabled (number of ECUC references configured in 'CryptoGeneral/CryptoEcucPartitionRef' is not zero), the Crypto Driver Objects mapped on the same MU instance should have the same ECUC partition configured in 'CryptoDriverObjectEcucPartitionRef' list."/>
                                    <a:tst expr="num:i(count(../../../CryptoGeneral/CryptoEcucPartitionRef/*)) > 0 and not(text:uniq(text:concat(../*/CryptoPrimitiveType, ../*/CryptoDriverObjectEcucPartitionRef/*), concat(./CryptoPrimitiveType, ./CryptoDriverObjectEcucPartitionRef/*[1])))" true="When multicore is enabled (number of ECUC references configured in 'CryptoGeneral/CryptoEcucPartitionRef' is not zero), each set of Crypto Driver Objects mapped on the same MU instance should have distinct ECUC partitions configured in 'CryptoDriverObjectEcucPartitionRef' list."/>
                                    <a:tst expr="num:i(count(../../../CryptoGeneral/CryptoEcucPartitionRef/*)) > 0 and count(text:grep(../*/MuInstance,./MuInstance)) != count(text:grep(../*/CryptoDriverObjectEcucPartitionRef/*[1],./CryptoDriverObjectEcucPartitionRef/*[1]))" true="When multicore is enabled (number of ECUC references configured in 'CryptoGeneral/CryptoEcucPartitionRef' is not zero), Crypto Driver Objects mapped on the different MU instances should have distinct ECUC partitions configured in 'CryptoDriverObjectEcucPartitionRef' list."/>
                                </a:da>

                                <!-- @implements CryptoDriverObjectId_Object -->
                                <v:var name="CryptoDriverObjectId" type="INTEGER">
                                    <a:a name="DESC" value="EN: Identifier of the Crypto Driver Object. The Crypto Driver Object offers different crypto primitives."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                    <a:a name="UUID" value="ECUC:124a14e8-b0e9-c04c-dcce-eec074c10faf"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="text:uniq(../../*/CryptoDriverObjectId, .)" false="Duplicated value, CryptoDriverObjectId must be unique."/>
                                        <a:tst expr="(node:value(.) > num:i(count(../../*/.)) - 1)" true="CryptoDriverObjectId is out of range. Maximum value is given by the number of items in the list minus 1."/>
                                    </a:da>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=4294967295"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                    <a:da name="DEFAULT" type="XPath" expr="num:i(node:fallback(node:current()/../@index, num:i(0)))" />
                                </v:var>
                                <!-- @implements CryptoQueueSize_Object -->
                                <v:var name="CryptoQueueSize" type="INTEGER">
                                    <a:a name="DESC" value="EN: Size of the queue in the Crypto Driver. Defines the maximum number of jobs in the Crypto Driver Object queue. If it is set to 0, queueing is disabled in the Crypto Driver Object.
                                                            Note: The node value will be used as the element number when declaring an array variable for the QUEUE feature. So the maximum value depends on the memory space of each platform."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:a6ec78cd-1a48-44c4-1013-16ad126e1923"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=4294967295"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                    <a:da name="DEFAULT" value="0"/>
                                </v:var>
                                <v:var name="MuInstance" type="ENUMERATION">
                                    <a:a name="LABEL" value="MU Instance"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Selects one of the MU (Messaging Units) instances available on the platform to use for communication with HSE."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:dacb2411-31e1-493f-8e05-3716f0464317"/>
                                    <a:da name="DEFAULT" type="XPath" expr="ecu:list('Crypto.MuInstances.List')[1]"/>
                                    <a:da name="RANGE" type="XPath" expr="ecu:list('Crypto.MuInstances.List')"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="num:i(count(../../../../CryptoGeneral/CryptoEcucPartitionRef/*)) = 0 and num:i(count(../../*/MuInstance)) > 1 and text:uniq(../../*/MuInstance, .)" true="When multicore is not enabled (number of ECUC references configured in 'CryptoGeneral/CryptoEcucPartitionRef' is zero), the configured Crypto Driver Objects should use the same MU instance to communicate with HSE."/>
                                        <a:tst expr="num:i(count(../../../../CryptoGeneral/CryptoEcucPartitionRef/*)) > 0 and not(text:uniq(text:concat(../../*/MuInstance, ../../*/CryptoPrimitiveType), concat(../MuInstance, ../CryptoPrimitiveType)))" true="When multicore is enabled (number of ECUC references configured in 'CryptoGeneral/CryptoEcucPartitionRef' is not zero), a maximum of 2 Crypto Driver Objects can be configured to use the same MU instance to communicate with HSE: one Crypto Driver Object having symmetric algorithms and one having asymmetric algorithms."/>
                                    </a:da>
                                </v:var>
                                <v:var name="CryptoPrimitiveType" type="ENUMERATION">
                                    <a:a name="LABEL" value="Algorithms Type"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Determines if the crypto algorithms (primitives) associated with the Crypto Driver Object are symmetric or asymmetric."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:ba685378-f161-4115-9ad1-c88211978e9d"/>
                                    <a:da name="RANGE" type="XPath">
                                        <a:tst expr="0 = 0" true="CRYPTO_SYMMETRIC_ALGORITHMS"/>
                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.', string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON') or
                                                     ((ecu:get(concat('Crypto.HseSptEcc.', string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ASYMMETRIC_ALGORITHMS"/>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="num:i(count(../../../../CryptoGeneral/CryptoEcucPartitionRef/*)) = 0 and not(text:uniq(../../*/CryptoPrimitiveType, .))" true="When multicore is not enabled (number of ECUC references configured in 'CryptoGeneral/CryptoEcucPartitionRef' is zero), the configured Crypto Driver Objects should use distinct algorithm types."/>
                                    </a:da>
                                    <a:da name="DEFAULT" value="CRYPTO_SYMMETRIC_ALGORITHMS"/>
                                </v:var>
                                <!-- @implements CryptoPrimitiveRef_Object -->
                                <v:lst name="CryptoPrimitiveRef">
                                    <a:da name="MIN" value="1"/>

                                    <v:ref name="CryptoPrimitiveRef" type="REFERENCE">
                                        <a:a name="DESC" value="EN: Refers to primitive in the CRYPTO."/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:81edadac-11b4-4eea-1aa6-2da3e02c4c9f"/>
                                        <a:da name="REF"
                                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Crypto/CryptoPrimitives/CryptoPrimitive"/>
                                        <a:da name="RANGE" type="XPath">
                                            <a:tst expr="node:paths(../../../../../CryptoPrimitives/*/CryptoPrimitive/*)"/> <!-- Select for reference only the options available inside the CryptoPrimitives -->
                                        </a:da>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="text:uniq(../*, .)" false="Duplicated value, 'CryptoPrimitiveRef' must be unique!"/>
                                            <a:tst expr="node:refvalid(.)" false="The configured node does not exist or may not be referenced."/>
                                            <a:tst expr="(
                                                            (node:fallback(../../CryptoPrimitiveType, 'CRYPTO_SYMMETRIC_ALGORITHMS') = 'CRYPTO_ASYMMETRIC_ALGORITHMS')
                                                            and
                                                            (
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_BRAINPOOL' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_ECCNIST' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_ECIES' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_ED25519' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_ED448' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_RSA' )
                                                              )
                                                         )"
                                                         true="This reference points to a Crypto primitive with an incorrect algorithm family for the current Crypto Driver Object. As the 'Algorithms Type' of the current Crypto Driver Object is set to CRYPTO_ASYMMETRIC_ALGORITHMS, the references to the Crypto primitives that are added should have the algorithm family in the list: BRAINPOOL, ECCNIST, ECIES, ED25519, ED448, RSA."/>
                                            <a:tst expr="(
                                                            (node:fallback(../../CryptoPrimitiveType, 'CRYPTO_SYMMETRIC_ALGORITHMS') = 'CRYPTO_SYMMETRIC_ALGORITHMS')
                                                            and
                                                            (
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_3DES' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_AES' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_BLAKE_1_256' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_BLAKE_1_512' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_BLAKE_2s_256' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_BLAKE_2s_512' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_CHACHA' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_RIPEMD160' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_RNG' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA1' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA2_224' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA2_256' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA2_384' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA2_512' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA2_512_224' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA2_512_256' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA3_224' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA3_256' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA3_384' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHA3_512' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHAKE128' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SHAKE256' ) and
                                                                ( (node:refs(node:value(.))/CryptoPrimitiveAlgorithmFamily)!='CRYPTO_ALGOFAM_SIPHASH' )
                                                            )
                                                         )"
                                                         true="This reference points to a Crypto primitive with an incorrect algorithm family for the current Crypto Driver Object. As the 'Algorithms Type' of the current Crypto Driver Object is set to CRYPTO_SYMMETRIC_ALGORITHMS, the references to the Crypto primitives that are added should have the algorithm family in the list: 3DES, AES, BLAKE, CHACHA, RIPEMD160, RNG, SHA, SHAKE, SIPHASH."/>
                                        </a:da>
                                    </v:ref>
                                </v:lst>

                                <v:lst name="CryptoDriverObjectEcucPartitionRef">
                                    <v:ref name="CryptoDriverObjectEcucPartitionRef" type="REFERENCE">
                                        <a:a name="DESC">
                                          <a:v>EN: Maps the Crypto Driver Object to zero a multiple ECUC partitions. The ECUC partitions referenced are a subset of the ECUC partitions where the Crypto Driver Object is mapped to.</a:v>
                                          <a:v>EN: Tags: atp.Status=draft</a:v>
                                        </a:a>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                        <a:a name="SCOPE" value="ECU"/>
                                        <a:a name="UUID" value="ECUC:14cc88hh-619e-4019-a793-3535990384ad"/>
                                        <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPartitionCollection/EcucPartition"/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="count(text:grep(../../../../../CryptoGeneral/CryptoEcucPartitionRef/*,.))>0"
                                                false="The ECUC partition must be one of the partitions defined in the CryptoEcucPartitionRef."/>
                                        </a:da>
                                    </v:ref>
                                </v:lst>
                            </v:ctr>
                        </v:lst>
                    </v:ctr>

                    <!-- @implements CryptoGeneral_Object -->
                    <v:ctr name="CryptoGeneral" type="IDENTIFIABLE">
                        <a:a name="DESC" value="EN: Container for common configuration options"/>
                        <a:a name="UUID" value="ECUC:22ae2270-3711-410d-108a-8aedfedf64e6"/>

                        <!-- @implements CryptoDevErrorDetect_Object -->
                        <v:var name="CryptoDevErrorDetect" type="BOOLEAN">
                            <a:a name="DESC" value="EN: Switches the development error detection and notification on or off."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:1a0fef6b-ff21-1fa8-b2db-0ac159b82c59"/>
                            <a:da name="DEFAULT" value="false"/>
                        </v:var>
                        <!-- @implements CryptoVersionInfoApi_Object -->
                        <v:var name="CryptoVersionInfoApi" type="BOOLEAN">
                            <a:a name="DESC" value="EN: Pre-processor switch to enable and disable availability of the API Crypto_GetVersionInfo()."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:1c156a69-253a-a6b7-ae2a-b353923b722b"/>
                            <a:da name="DEFAULT" value="false"/>
                        </v:var>
                        <!-- @implements CryptoInstanceId_Object -->
                        <v:var name="CryptoInstanceId" type="INTEGER">
                          <a:a name="DESC" value="EN: Instance ID of the Crypto driver. This ID is used to discern several crypto drivers in case more than one driver is used in the same ECU."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:1e5e98b2-25e7-3e3d-b1fc-d43ba3722b81"/>
                          <a:da name="DEFAULT" value="0"/>
                          <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=255"/>
                                <a:tst expr="&gt;=0"/>
                          </a:da>
                        </v:var>
                        <!-- @implements CryptoMainFunctionPeriod_Object -->
                        <v:var name="CryptoMainFunctionPeriod" type="FLOAT">
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="DESC" value="EN: Specifies the period of main function Crypto_MainFunction in seconds."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:17196c6e-2bbd-a28d-ca75-fb2584f18fc1"/>
                            <a:da name="DEFAULT" value="0.2"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;99999999"/>
                                <a:tst expr="&gt;0.0"/>
                            </a:da>
                        </v:var>
                        <v:var name="CryptoMulticoreSupport" type="BOOLEAN">
                            <a:a name="LABEL" value="Crypto Multicore Support"/>
                            <a:a name="EDITABLE" type="XPath" expr="ecu:get('Crypto.Multicore') = 'STD_ON'"/>
                            <a:a name="DESC">
                                <a:v><![CDATA[EN:
                                    <html>
                                        Vendor specific: Enables/Disables Multicore Support.
                                    </html>
                                ]]></a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:dde77254-fdc0-4af6-a0ae-3963c88e9c98"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:da name="INVALID" type="XPath">
                                <a:tst expr="(node:value(.) = 'false') and (num:i(count(../CryptoEcucPartitionRef/*)) &gt; 0)" true="When Crypto Multicore Support is disabled, no CryptoEcucPartitionRef should be configured."/>
                                <a:tst expr="(node:value(.) = 'true')  and (num:i(count(../CryptoEcucPartitionRef/*)) &lt; 1)" true="When Crypto Multicore Support is enabled, at least one CryptoEcucPartitionRef need be configured."/>
                            </a:da>
                        </v:var>
                        <v:var name="HseFwType" type="ENUMERATION">
                            <a:a name="LABEL" value="Hse Firmware Type"/>
                            <a:a name="DESC" value="EN: Vendor specific: Selects the version of the HSE Firmware the Crypto driver will run on."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:dacb2411-32e3-493f-8e05-3716f0464317"/>
                            <a:da name="DEFAULT" type="XPath" expr="ecu:list('Crypto.HseFwTypes.List')[1]"/>
                            <a:da name="RANGE" type="XPath" expr="ecu:list('Crypto.HseFwTypes.List')"/>
                        </v:var>
                        <v:var name="HseIpDevErrorDetect" type="BOOLEAN">
                            <a:a name="LABEL" value="HseIp DevErrorDetect"/>
                            <a:a name="DESC" value="EN: Vendor specific: Switches the Hse Ip layer development error detection on or off."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:1a0fef6b-ff21-1fa8-b2db-0ac159b82c69"/>
                            <a:da name="DEFAULT" value="false"/>
                        </v:var>
                        <v:var name="CryptoTimeoutMethod" type="ENUMERATION">
                            <a:a name="LABEL" value="Timeout Counter Type"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                            Vendor specific: Counter type used in timeout detection for HSE service request.<br>
                                            Based on selected counter type the timeout value will be interpreted as follows:<br>
                                            OSIF_COUNTER_DUMMY  - Ticks.<br>
                                            OSIF_COUNTER_SYSTEM - Microseconds.<br>
                                            OSIF_COUNTER_CUSTOM - Defined by user implementation of timing services<br>
                                            Note: If OSIF_COUNTER_SYSTEM or OSIF_COUNTER_CUSTOM are selected make sure the corresponding timer is enabled in OsIf General configuration.
                                        </p></html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:2b1fef6b-ff21-1fa8-b2db-0ac159b82c69"/>
                            <a:da name="DEFAULT" value="OSIF_COUNTER_DUMMY"/>
                            <a:da name="INVALID" type="XPath">
                                <a:tst expr="node:refs('ASPathDataOfSchema:/TS_T40D34M30I0R0/BaseNXP/OsIfGeneral/OsIfUseCustomTimer') = 'false' and node:fallback(.,'OSIF_COUNTER_DUMMY') = 'OSIF_COUNTER_CUSTOM'" true="Custom Timer is not enabled in OsIf (OsIfGeneral/OsIfUseCustomTimer checkbox)"/>
                                <a:tst expr="node:refs('ASPathDataOfSchema:/TS_T40D34M30I0R0/BaseNXP/OsIfGeneral/OsIfUseSystemTimer') = 'false' and node:fallback(.,'OSIF_COUNTER_DUMMY') = 'OSIF_COUNTER_SYSTEM'" true="System Timer is not enabled in OsIf (OsIfGeneral/OsIfUseSystemTimer checkbox)"/>
                            </a:da>
                            <a:da name="RANGE">
                                <a:v>OSIF_COUNTER_DUMMY</a:v>
                                <a:v>OSIF_COUNTER_SYSTEM</a:v>
                                <a:v>OSIF_COUNTER_CUSTOM</a:v>
                            </a:da>
                        </v:var>
                        <v:var name="CryptoTimeoutDuration" type="INTEGER">
                            <a:a name="LABEL" value="Crypto Timeout"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                            Vendor specific: Timeout duration defines the waiting period for HSE to respond to a synchronous request initiated by Crypto driver.<br>
                                            Based on selected counter type (Timeout Counter Type) the measuring unit will be determined as shown below:<br>
                                            OSIF_COUNTER_DUMMY  - Crypto Timeout is interpreted as ticks.<br>
                                            OSIF_COUNTER_SYSTEM - Crypto Timeout is interpreted as microseconds.<br>
                                            OSIF_COUNTER_CUSTOM - Crypto Timeout is interpreted as defined by user implementation of timing services<br>
                                        </p></html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:89cf6b41-1e18-4786-9376-e471db9a4f66"/>
                            <a:da name="DEFAULT" value="1000000000"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=4294967295"/>
                                <a:tst expr="&gt;0"/>
                            </a:da>
                        </v:var>

                        <v:var name="CryptoJobKeyManagement" type="BOOLEAN">
                            <a:a name="LABEL" value="Enable Job Key Management Support"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                            Vendor specific: Switch for enabling/disabling the support in Crypto driver for the Crypto_ProcessJob() service to process key management related primitives.
                                                             The key management services that can be processed by Cypto_ProcessJob() when this switch is enabled are:
                                            <ul>
                                                <li>RandomSeed</li>
                                                <li>KeyGenerate</li>
                                                <li>KeyDerive</li>
                                                <li>KeyExchangeCalcPubVal</li>
                                                <li>KeyExchangeCalcSecret</li>
                                                <li>CertificateParse</li>
                                                <li>CertificateVerify</li>
                                                <li>KeySetValid</li>
                                             </ul>
                                            </p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:2b0fef6b-ff21-1fa8-b2db-0ac159b82c59"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:a name="EDITABLE" type="XPath" expr="node:exists(../../CryptoKeys)"/>
                        </v:var>
                        <v:var name="CryptoEnableRedirection" type="BOOLEAN">
                            <a:a name="LABEL" value="Enable Redirection Support"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                                Vendor specific: The input and/or output data of a job can be re-directed to a key element.
                                              </p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="UUID" value="ECUC:af010ef6c-e42e-48af-82d8-5ac85f682c5f"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:a name="EDITABLE" type="XPath" expr="node:exists(../../CryptoKeys)"/>
                        </v:var>
                        <v:var name="CryptoEnableFeedHseDesc" type="BOOLEAN">
                            <a:a name="LABEL" value="Enable Feeding Hse Descriptors Support"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                                Vendor specific: Switch for enabling/disabling the support in Crypto driver for feeding the Hse Firmware with descriptors requesting Hse services using the Crypto_KeyElementGet() API defined by Autosar Crypto spec.<br>
                                                When enabled, the layer on top of Crypto driver can request any of the services supported by Hse Firmware, if the following conditions are met:
                                                <ul>
                                                    <li>CryptoKeyElement container in the Crypto configuration tool contains a key element with the following properties:
                                                        <ul>
                                                            <li>CryptoKeyElementId set to 0xFEEDDE5C</li>
                                                            <li>CryptoKeyElementSize set to 1</li>
                                                            <li>Use Hse Key set to false</li>
                                                        </ul>
                                                    </li>
                                                    <li>CryptoKeyType container in the Crypto configuration tool contains an element referring only the key element described one step above</li>
                                                    <li>CryptoKey container in the Crypto configuration tool contains an element referring only the key type described one step above</li>
                                                    <li>The Crypto_KeyElementGet() API is called with the following parameters:
                                                        <ul>
                                                            <li>cryptoKeyId parameter set to the id of the Crypto Key configured above</li>
                                                            <li>keyElementId parameter set to the value 0xFEEDDE5C</li>
                                                            <li>resultPtr set to the address of a Hse descriptor filled with all the information needed for the request</li>
                                                            <li>resultLengthPtr set to the address of a uint32 variable which will contain the value of the status response received from Hse after the call</li>
                                                        </ul>
                                                    </li>
                                                </ul>
                                                When Crypto driver receives a Crypto_KeyElementGet() API call with the parameters for feeding the Hse Firwmare with a Hse descriptor, it will perform a synchronous request to Hse Firmware to process the descriptor.
                                              </p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="UUID" value="ECUC:ab010ef6c-e42e-48af-82d8-5ac85f682c50"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:a name="EDITABLE" type="XPath" expr="node:exists(../../CryptoKeys)"/>
                        </v:var>

                        <v:var name="CryptoEnableTLS12KeyDeriveSupport" type="BOOLEAN">
                            <a:a name="LABEL" value="Enable TLS 1.2 Key Derive Support"/>
                            <a:a name="DESC" value="EN: Vendor specific: Enables/Disables support in driver for TLS12 key derivation when using the Crypto_KeyDerive() API."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:3a37b26f-6ab3-4635-b20b-b616fg579f1c"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:da name="VISIBLE" value="false"/>
                        </v:var>
                        <!--  @implements CryptoEnableUserModeSupport_Object  -->
                        <v:var name="CryptoEnableUserModeSupport" type="BOOLEAN">
                            <a:a name="LABEL" value="Enable User Mode Support"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:<html>
                                        Vendor specific: When this parameter is enabled, the Crypto module will adapt to run from User Mode, with the following measures:<p/>
                                        Using 'call trusted function' stubs for all internal function calls that access registers requiring supervisor mode.<p/>
                                        for more information, please see chapter User Mode Support in IM <p/>
                                    </html>]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:2d37b26f-6ab3-4635-b20b-b616fg579f1c"/>
                            <a:da name="DEFAULT" value="false"/>
                        </v:var>
                        <v:var name="CryptoAlternateJobKeyMapping" type="BOOLEAN">
                            <a:a name="LABEL" value="Enable Alternate Mapping of Crypto Job Key"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                            Vendor specific: Switch for enabling/disabling the support in Crypto driver for reading the key related information of Csm jobs from an alternate location.<br><br>
                                            When enabled, the Crypto driver will read the key related information of Csm jobs from an alternate location which is the cryptoKeyId member of the Crypto_JobType structure. The presence of the cryptoKeyId member in the Crypto_JobType structure is not reqeusted by Autosar 4.4. Because of this reason, care must be taken to enable this boolean only if the CSM layer that is part of the same crypto stack with the current Crypto driver declares the cryptoKeyId as member of Crypto_JobType structure.<br><br>
                                            When disabled, the Crypto driver will read the key related information of Csm jobs from the cryIfKeyId member of Crypto_JobPrimitiveInfoType substructure of the Crypto_JobType structure, following the specification of Autosar 4.4 standard.<br>
                                        </p></html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="UUID" value="ECUC:bb010ef6c-e42e-48af-82d8-5ac85f682c51"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:a name="EDITABLE" type="XPath" expr="node:exists(../../CryptoKeys)"/>
                        </v:var>
                        <v:var name="CryptoSecondaryInputLengthForMacVerifyJobsUsesBits" type="BOOLEAN">
                            <a:a name="LABEL" value="SecondaryInputLength For MacVerify Jobs Uses Bits"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                                Vendor specific: Switch for configuring the measure unit the Crypto driver will use for processing the secondaryInputLength parameter of a received MacVerify job, when a Crypto_ProcessJob() API is called.<br>
                                                The need for the presence of this switch comes from an incoherence in the ASR 4.4 CSM spec. On one hand, the ASR 4.4 CSM spec declares in SWS_Csm_01009 that the secondaryInputLength is always measured in bytes. On the other hand, the same ASR 4.4 CSM spec states in SWS_Csm_01050 that the macLength parameter (which is mapped in the end on the secondaryInputLength member of the job that will be sent down to CryIf and then Crypto) contains 'the MAC length in BITS to be verified'. <br>
                                                This switch was added in order to support in the Crypto driver both cases when the secondaryInputLength parameter of a received MacVerify job is measured in bytes or bits.<br><br>
                                                When enabled, the Crypto driver will consider that the secondaryInputLength parameter of a received MacVerify job is measured in bits.<br><br>
                                                When disabled, the Crypto driver will consider that the secondaryInputLength parameter of a received MacVerify job is measured in bytes.
                                              </p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="UUID" value="ECUC:ab010ef6c-c421-48af-82d8-5bc85f682c50"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:a name="EDITABLE" type="XPath" expr="node:exists(../../CryptoKeys)"/>
                        </v:var>
                        <v:var name="CryptoInputLengthAndResultLengthForFastCmacJobsUseBytes" type="BOOLEAN">
                            <a:a name="LABEL" value="InputLength And ResultLength For FastCmac Jobs Use Bytes"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                                Vendor specific: Switch for configuring the measure unit the Crypto driver will use for processing the inputLength and resultLength parameters of a received FastCmac job, when a Crypto_ProcessJob() API is called.<br>
                                                The need for the presence of this switch comes from the fact that the FastCmac service is designed in HSE FW to work with lengths measured in bits and the initial implementation of the FastCmac support in Crypto driver was considering that being a custom CSM service, the inputLength and resultLength parameters in a FastCmac job will also be measured in bits. The ASR 4.4 CSM spec states in SWS_Csm_01009 that the inputLength is measured in bytes and in SWS_Csm_01011 that also resultLength is measured in bytes. <br>
                                                This switch was added in order to support in the Crypto driver both cases when the inputLength and resultLength parameters of a received FastCmac job are measured in bytes or bits.<br><br>
                                                When enabled, the Crypto driver will consider that the inputLength and resultLength parameters of a received FastCmac job are measured in bytes.<br><br>
                                                When disabled, the Crypto driver will consider that the inputLength and resultLength parameters of a received FastCmac job are measured in bits.
                                              </p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="UUID" value="ECUC:ab010ef6c-c421-48af-82d8-5bc85f682c57"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:a name="EDITABLE" type="XPath" expr="node:exists(../../CryptoKeys)"/>
                        </v:var>
                        <v:var name="CryptoEnableTCMSupport" type="BOOLEAN">
                            <a:a name="LABEL" value="Enable TCM support for Crypto operations"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                            Vendor specific: Switch for enabling/disabling the support in Crypto driver to allow the HSE to access memory locations in DTCM and ITCM.<br><br>
                                        </p></html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="UUID" value="ECUC:ba018ef6c-e4df-4faf-82d8-5a685f683c51"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:a name="EDITABLE" type="XPath" expr="(ecu:get('Crypto.TcmSupport') = 'STD_ON')"/>
                        </v:var>
                        <v:var name="CryptoAsyncJobProcessMethod" type="ENUMERATION">
                            <a:a name="LABEL" value="Asynchronous Process Method"/>
                            <a:a name="DESC" value="EN: Vendor specific: Selects one of the process methods for asynchronous jobs."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="UUID" value="ECUC:3acf241f-a1e0-1932-3f05-1b161c464317"/>
                            <a:da name="DEFAULT" value="POLLING"/>
                            <a:da name="RANGE">
                                <a:v>INTERRUPT</a:v>
                                <a:v>POLLING</a:v>
                            </a:da>
                        </v:var>
                        <v:var name="CryptoUpdateNvramBlobHandler" type="FUNCTION-NAME">
                            <a:a name="LABEL" value="Update Nvram Blob Handler"/>
                            <a:a name="EDITABLE" type="XPath" expr="node:exists(../../CryptoKeyElements) = 'true'"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                            Vendor specific: Crypto driver works with 2 blobs of information that should be kept persistent across resets. One blob contains information about key validity flags, while the second contains information about lengths of key elements and actual values of the ones marked as persistent. There are 2 cases for handling this information:
                                            <ol>
                                                <li>The blobs are stored inside Crypto driver.</li>
                                                <li>The blobs are stored in the upper layer.</li>
                                             </ol>
                                            </p>
                                            <p>1. In order to use this option, do not enable the optional attribute 'Update Nvram Blob Handler'.
                                            <br>Given the fact that Crypto driver has no support for working with non volatile memory, in this case the information in the blobs will not be persistent across resets.</p>
                                            <p>2. In order to use this option, please enable the optional attribute 'Update Nvram Blob Handler' and set it's value to a valid C function name.
                                            <br>When using this option, the upper layer will have to:</p>
                                            <ul>
                                                <li>Declare a variable: uint8 Crypto_au8NvramBlob0[CRYPTO_SIZEOF_NVRAM_BLOB_0];</li>
                                                <li>Declare a variable: uint8 Crypto_au8NvramBlob1[CRYPTO_SIZEOF_NVRAM_BLOB_1];</li>
                                                <li>Implement in the code the body of a function having:
                                                    <ul>
                                                        <li>The name given in the attribute 'Update Nvram Blob Handler'.</li>
                                                        <li>The following prototype: Std_ReturnType <Function name>(uint32 u32BlobId, uint32 u32BlobLength)</li>
                                                     </ul>
                                                </li>
                                                <li>Add code in the body of the function above that will save in non volatile memory the content of either Crypto_au8NvramBlob0[] or Crypto_au8NvramBlob1[] arrays, depending on the value of the u32BlobId received parameter, CRYPTO_NVRAM_BLOB_0_ID for the keyValid blob or CRYPTO_NVRAM_BLOB_1_ID for persistent Crypto Key Elements. The function should return E_OK if the Nvram save operation was successful and E_NOT_OK otherwise.</li>
                                             </ul>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:0811922f-0a7a-45c8-a83d-46c8b88425e2"/>
                            <a:da name="DEFAULT" value="Crypto_UpdateNvramBlob"/>
                            <a:da name="INVALID" type="XPath">
                                <a:tst expr="(text:toupper(normalize-space(node:fallback(., ''))) = '&quot;NULL_PTR&quot;') or
                                             (text:toupper(normalize-space(node:fallback(., ''))) = 'NULL_PTR') or
                                             (text:toupper(normalize-space(node:fallback(., ''))) = '&quot;NULL&quot;') or
                                             (text:toupper(normalize-space(node:fallback(., ''))) = 'NULL') or not
                                             (text:match(normalize-space(.),'^[_a-zA-Z]+[_0-9a-zA-Z]*$'))"
                                   true="Invalid identifier. The field must specify a valid C function identifier (i.e. an arbitrarily long sequence of digits, underscores, lowercase and uppercase Latin letters, that must begin with a non-digit character)"/>
                            </a:da>
                        </v:var>

                        <v:lst name="CryptoEcucPartitionRef">
                            <v:ref name="CryptoEcucPartitionRef" type="REFERENCE">
                                <a:a name="DESC">
                                    <a:v>
                                        <![CDATA[EN:
                                        <html>
                                        <p>Maps the Crypto driver to zero a multiple ECUC partitions to make the modules API available in this partition.</p>
                                        </html>
                                        ]]>
                                    </a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="ECU"/>
                                <a:a name="UUID" value="ECUC:d25b8f2d-8e45-474a-a99a-0ff567bb5a9b"/>
                                <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPartitionCollection/EcucPartition"/>
                                <a:da name="INVALID" type="XPath">
                                    <a:tst expr="text:uniq(../*,.)" false="Duplicated CryptoEcucPartitionRef, each partition reference must be unique!"/>
                                </a:da>
                            </v:ref>
                        </v:lst>

                        <a:da name="INVALID" type="XPath">
                            <a:tst expr="(
                                     ( node:exists(../CryptoKeyElements) and node:exists(../CryptoKeyTypes) and node:exists(../CryptoKeys) )
                                     )
                                     or
                                     (
                                     (not(node:exists(../CryptoKeyElements)) and not( node:exists(../CryptoKeyTypes) ) and not(node:exists(../CryptoKeys) ) )
                                      )"
                                false="Containers CryptoKeys, CryptoKeyTypes and CryptoKeyElements must be simultaneously enabled or disabled."/>
                            <a:tst expr="node:exists(./CryptoUpdateNvramBlobHandler) and not(node:exists(../CryptoKeys))"
                                true="Attribute 'Update Nvram Blob Handler' can only be enabled when containers CryptoKeys, CryptoKeyTypes and CryptoKeyElements are simultaneously enabled."/>
                        </a:da>
                    </v:ctr>

                    <!-- @implements CryptoKeyElements_Object -->
                    <v:ctr name="CryptoKeyElements" type="IDENTIFIABLE">
                        <a:a name="DESC" value="EN: Container for Crypto key elements"/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="UUID" value="ECUC:12e782b3-2472-35c3-ab7c-af0d09a76f7c"/>

                        <v:lst name="CryptoKeyElement" type="MAP">
                            <a:da name="MIN" value="1"/>

                            <!-- @implements CryptoKeyElement_Object -->
                            <v:ctr name="CryptoKeyElement" type="IDENTIFIABLE">
                                <a:a name="DESC" value="EN: Configuration of a CryptoKeyElement"/>
                                <a:a name="REQUIRES-INDEX" value="true"/>
                                <a:a name="UUID" value="ECUC:4f141b28-1b14-ac92-307a-af95a3ab604b"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                </a:a>

                                <!-- @implements CryptoKeyElementAllowPartialAccess_Object -->
                                <v:var name="CryptoKeyElementAllowPartialAccess" type="BOOLEAN">
                                    <a:a name="DESC" value="EN: Enable or disable writing and reading the key element with data smaller than the size of the element."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:f546ad2f-2663-ccdc-c688-c056e29c4f51"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>
                                <!-- @implements CryptoKeyElementFormat_Object -->
                                <v:var name="CryptoKeyElementFormat" type="ENUMERATION">
                                    <a:a name="DESC" value="EN: Defines the format for the key element. This is the format used to provide or extract the key data from the driver."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:4f151295-ba3b-562c-a95f-634a72bd71f4"/>
                                    <a:da name="RANGE" type="XPath">
                                        <a:tst expr="((ecu:get(concat('Crypto.SptCertificates.', string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_KE_FORMAT_BIN_CERT_CVC"/>
                                        <a:tst expr="((ecu:get(concat('Crypto.SptCertificates.', string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_KE_FORMAT_BIN_CERT_X509_V3"/>
                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_KE_FORMAT_BIN_IDENT_PRIVATEKEY_PKCS8"/>
                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_KE_FORMAT_BIN_IDENT_PUBLICKEY"/>
                                        <a:tst expr="0 = 0" true="CRYPTO_KE_FORMAT_BIN_OCTET"/>
                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_KE_FORMAT_BIN_RSA_PRIVATEKEY"/>
                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_KE_FORMAT_BIN_RSA_PUBLICKEY"/>
                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptShe.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_KE_FORMAT_BIN_SHEKEYS"/>
                                    </a:da>
                                    <a:da name="DEFAULT" type="XPath">
                                        <a:tst expr="(node:when(((ecu:get(concat('Crypto.HseSptAesKeys.', string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON'), 'CRYPTO_KE_FORMAT_BIN_OCTET' ,'CRYPTO_KE_FORMAT_BIN_SHEKEYS'))"/>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(node:value(../UseHseKey) = 'true') and (noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'SHE') and (node:value(.) != 'CRYPTO_KE_FORMAT_BIN_SHEKEYS')"
                                               true="The Crypto Key Element uses a HSE key and points to a SHE key in one of the HSE key catalogs. CryptoKeyElementFormat field should be set to 'CRYPTO_KE_FORMAT_BIN_SHEKEYS'"/>
                                    </a:da>
                                </v:var>
                                <!-- @implements CryptoKeyElementId_Object -->
                                <v:var name="CryptoKeyElementId" type="INTEGER">
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:
                                            <html>
                                            <p>
                                                Vendor specific: Identifier of the CRYPTO key element.<br><br>
                                                CryptoKeyElementId set to CRYPTO_KE_EXPORT_AUTHENTICATION with value equal to 99 requires the following setup:<br>
                                                <li>Empty Initialization Value</li>
                                                <li>This element is not persistent</li>
                                                <li>Read Acces options:CRYPTO_RA_ALLOWED/CRYPTO_RA_DENIED</li>
                                                <li>Key Element Size must be equal or bigger than the size of the tag or signature, for ECDSA and EDDSA a size bigger than the sum of the signatures sizes must be specfied</li>
                                                <li>Element size can be bigger or smaller than the output generated by the authentication</li>
                                                <li>No need for HSE key</li>
                                            </p>
                                            </html>
                                            ]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                    <a:a name="UUID" value="ECUC:a2b13c50-2cf0-680d-a7f4-aa61605e57eb"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=4294967295"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'false' and (node:value(.) = 1 or node:value(.) = 9 or node:value(.) = 10 or node:value(.) = 98 or node:value(.) = 101)"
                                               true="Crypto Key Elements with CryptoKeyElementId set to 1 (KeyMaterial), 9 (PrivateKey), 10 (OwnPubKey), 98(PartnerPubKey) or 101 (KeyDerivationMaster) can only be stored inside HSE, so the checkbox 'Use HSE Key' should be checked."/>
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(.) != 1 and node:value(.) != 9 and node:value(.) != 10 and node:value(.) != 98 and node:value(.) != 101"
                                               true="Only Crypto Key Elements with CryptoKeyElementId set to 1 (KeyMaterial), 9 (PrivateKey), 10 (OwnPubKey), 98(PartnerPubKey) or 101 (KeyDerivationMaster) can be stored inside HSE, so the checkbox 'Use HSE Key' should be unchecked."/>
                                    </a:da>
                                    <a:da name="DEFAULT" value="1"/>
                                </v:var>
                                <!-- @implements CryptoKeyElementInitValue_Object -->
                                <v:var name="CryptoKeyElementInitValue" type="STRING">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'false'"/>
                                    <a:a name="DESC" value="EN: Value which will be used to fill the element during initialization. This node is a hexadecimal string. Please use an even number of 0-9 a-f A-F characters, without spaces. If this field is configured, it should have a number of bytes smaller or equal to CryptoKeyElementSize field."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:67b3490e-235a-4b88-be20-a306c57fd0b9"/>
                                    <a:da name="DEFAULT" value=""/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(
                                               (text:match(normalize-space(.),'^[0-9a-fA-F]*$')) and
                                               (num:i(string-length(node:current())) &lt; ((2 * num:i(node:value(../CryptoKeyElementSize)))) + 1) and
                                               (num:i(string-length(node:current())) mod 2 = 0)
                                              )"
                                                false="This node is a hexadecimal string. Please use an even number of 0-9 a-f A-F characters, without spaces. If this field is configured, it should have a number of bytes smaller or equal to CryptoKeyElementSize field."/>
                                        <a:tst expr="(node:value(../CryptoKeyElementId) = 99 and num:i(string-length(../CryptoKeyElementInitValue)) > 0)"
                                                true="CryptoKeyElementId value is set to CRYPTO_KE_EXPORT_AUTHENTICATION = 99, after an export this CryptoKeyElement will contain the tag or signatures generated so no CryptoKeyElementInitValue is required."/>
                                        <a:tst expr="(node:value(../UseHseKey) = 'true') and (num:i(string-length(../CryptoKeyElementInitValue)) > 0)"
                                                true="Vendor specific: When UseHseKey is enabled CryptoKeyElementInitValue must be empty."/>
                                    </a:da>
                                </v:var>
                                <!-- @implements CryptoKeyElementPersist_Object -->
                                <v:var name="CryptoKeyElementPersist" type="BOOLEAN">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'false'"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:
                                                <html><p>
                                                    Enables or disables the storage of the key element value in the non-volatile memory. This functionality behaves like described below:
                                                    <ul>
                                                        <li>If the checkbox 'Use HSE key' is checked, the value in the checkbox 'CryptoKeyElementPersist' is ignored and:</li>
                                                        <ul>
                                                            <li>If the HSE key is part of a NVM key catalog group, the key element will be persistent, stored inside HSE.</li>
                                                            <li>If the HSE key is part of a RAM key catalog group, the key element will be non-persistent.</li>
                                                        </ul>
                                                        <li>If the checkbox 'Use HSE key' is not checked, the value in the checkbox 'CryptoKeyElementPersist' is considered and:</li>
                                                        <ul>
                                                            <li>If the checkbox 'CryptoKeyElementPersist' is checked, the key element will be persistent, stored in a Crypto driver blob.</li>
                                                            <li>If the checkbox 'CryptoKeyElementPersist' is not checked, the key element will be non-persistent, stored in an internal Crypto driver RAM buffer.</li>
                                                        </ul>
                                                     </ul>
                                                    </p>
                                                </html>
                                            ]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:ffe529e1-83f5-ada2-5253-6d657b86c37e"/>
                                    <a:da name="DEFAULT" value="false"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(.) = 'true' and node:value(../CryptoKeyElementId) = 99"
                                               true="The storage of the key element with CryptoKeyElementId value = 99 (CRYPTO_KE_EXPORT_AUTHENTICATION) must be in internal Crypto driver RAM buffer."/>
                                    </a:da>
                                </v:var>
                                <!-- @implements CryptoKeyElementReadAccess_Object -->
                                <v:var name="CryptoKeyElementReadAccess" type="ENUMERATION">
                                    <a:a name="DESC" value="EN: Define the reading access rights of the key element."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:afe552f0-72a8-9627-3c61-27a0c5f1598e"/>
                                    <a:da name="DEFAULT" value="CRYPTO_RA_ALLOWED"/>
                                    <a:da name="RANGE">
                                        <a:v>CRYPTO_RA_ALLOWED</a:v>
                                        <a:v>CRYPTO_RA_DENIED</a:v>
                                        <a:v>CRYPTO_RA_ENCRYPTED</a:v>
                                        <a:v>CRYPTO_RA_INTERNAL_COPY</a:v>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="(node:value(.) = 'CRYPTO_RA_ENCRYPTED' or node:value(.) = 'CRYPTO_RA_INTERNAL_COPY') and node:value(../CryptoKeyElementId) = 99"
                                               true="Read access for an element with CryptoKeyElementId equal to 99 (CRYPTO_KE_EXPORT_AUTHENTICATION) must be CRYPTO_RA_ALLOWED if the data will be read or CRYPTO_RA_DENIED if the data must not leave Crypto Driver."/>
                                    </a:da>
                                </v:var>
                                <!-- @implements CryptoKeyElementSize_Object -->
                                <v:var name="CryptoKeyElementSize" type="INTEGER">
                                    <a:a name="DESC" value="EN: Maximum size of the Crypto Key Element value, in bytes. Will be used by Crypto driver to reserve internal memory for those Crypto Key Elements that do not use a HSE key."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:2e48d0b6-3cea-b4db-a525-317aba2b4f1f"/>
                                    <a:da name="DEFAULT" value="16"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=4294967295"/>
                                        <a:tst expr="&gt;=1"/>
                                    </a:da>
                                </v:var>
                                <!-- @implements CryptoKeyElementWriteAccess_Object -->
                                <v:var name="CryptoKeyElementWriteAccess" type="ENUMERATION">
                                    <a:a name="DESC" value="EN: Defines the writing access rights of the key element"/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:da name="DEFAULT" type="XPath">
                                        <a:tst expr="(node:when(((ecu:get(concat('Crypto.HseSptAesKeys.', string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON'), 'CRYPTO_WA_ALLOWED' ,'CRYPTO_WA_ENCRYPTED'))"/>
                                    </a:da>
                                    <a:a name="UUID" value="ECUC:22f68509-a888-5612-bf42-b1d511d98213"/>
                                    <a:da name="RANGE">
                                        <a:v>CRYPTO_WA_ALLOWED</a:v>
                                        <a:v>CRYPTO_WA_DENIED</a:v>
                                        <a:v>CRYPTO_WA_ENCRYPTED</a:v>
                                        <a:v>CRYPTO_WA_INTERNAL_COPY</a:v>
                                    </a:da>

                                </v:var>
                                <!-- @implements CryptoKeyElementVirtualTargetRef_Object -->
                                <v:ref name="CryptoKeyElementVirtualTargetRef" type="REFERENCE">
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="READONLY" value="true"/>
                                    <a:a name="DESC" value="EN: Refers to a key element which will contain the actual data. If the Reference is configured, the key element will be a virtual key element. Functionality not implemented in the current release."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:f128b1ba-d5af-fef2-12f6-fd2cbbf852ae"/>
                                    <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Crypto/CryptoKeyElements/CryptoKeyElement"/>
                                </v:ref>
                                <v:var name="UseHseKey" type="BOOLEAN">
                                    <a:a name="LABEL" value="Use HSE Key"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Enables or disables the usage of a HSE key."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:ffe529e2-83f5-ada2-5253-6d657b86a37e"/>
                                    <a:da name="DEFAULT" value="true"/>
                                </v:var>
                                <v:ref name="HseKeyCatalogGroupRef" type="CHOICE-REFERENCE">
                                    <a:a name="LABEL" value="HSE Key Catalog Group Ref"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' "/>
                                    <a:a name="DESC" value="EN: Vendor specific: The 'HSE Key Catalog Group Ref' identifies the key group where the key is located in the NVM or RAM key catalog."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="UUID" value="ECUC:d75de224-dc2e-4f5f-a4f8-214f7576b234"/>
                                    <a:da name="REF">
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/NvmKeyCatalog</a:v>
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/RamKeyCatalog</a:v>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true'  and not(node:refexists(.))"
                                               true="Invalid value of the 'HSE Key Catalog Group Ref'. Please select a valid KeyCatalog group from list of already configured NVM or RAM key catalogs. If the list is empty, please configure a KeyCatalog group first by browsing in tab Crypto/KeyCatalogs."/>
                                        <a:tst expr="node:value(../UseHseKey) = 'true'  and not(node:refvalid(.))" true="Invalid or empty reference."/>
                                    </a:da>
                                </v:ref>
                                <v:var name="HseKeySlot" type="INTEGER">
                                    <a:a name="LABEL" value="HSE Key Slot"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' "/>
                                    <a:a name="DESC" value="EN: Vendor specific: Slot of the key inside the key group selected above in the 'HSE Key Catalog Group Ref'."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:BA2FBBA7-857D-1014-84FC-E405D4ED91DA"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=255"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true'  and num:i(.) &gt; num:i(noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)), '/NumOfKeySlots')) -1)"
                                              true="Maximum number of slots available in the selected key group was exceeded."/>
                                    </a:da>
                                </v:var>

                                <v:var name="EncryptedKeyImport" type="BOOLEAN">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' "/>
                                    <a:a name="LABEL" value="HSE Encrypted Key Import"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Enables or disables the encrypted import of the HSE key. When enabled, all the parameters related to encrypted key import can be configured in the 'Encrypted Key Import' tab."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:ffe529e1-83f5-ada2-5253-6d657b86a37f"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../CryptoKeyElementWriteAccess) != 'CRYPTO_WA_ENCRYPTED' and node:value(.) = 'true'"
                                               true="The check-box 'EncryptedKeyImport' is enabled so the WriteAccess attribute of this keyElement should be set to 'CRYPTO_WA_ENCRYPTED'."/>
                                    </a:da>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>
                                <v:var name="AuthenticatedKeyImport" type="BOOLEAN">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' "/>
                                    <a:a name="LABEL" value="HSE Authenticated Key Import"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Enables or disables the authenticated import of the HSE key. When enabled, all the parameters related to authenticated key import can be configured in the 'Authenticated Import' tab."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:ffe529e1-83f5-ada3-5253-6d657b86a37f"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>
                                <v:var name="EncryptedKeyExport" type="BOOLEAN">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' "/>
                                    <a:a name="LABEL" value="HSE Encrypted Key Export"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:
                                            <html><p>
                                                Vendor specific: Enables or disables encrypted export of the HSE key.<br>
                                                When enabled, two types of keys can be exported, symmetric keys and public keys from key pair or public key slots.<br>
                                                Symmetric keys require that export is made encrypted, all the parameters related to this operation can be configured in the 'Encrypted Key Export' tab.
                                                Public keys can be exported in plain and optionally can be authenticated.
                                                To export an encrypted/authenticated NVM key, the provided provision key must have the same group owner as the exported NVM key (not applicable for RAM keys).
                                            </p></html>
                                            ]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:0fe529e1-83f5-ada2-5253-6d657b86a37f"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../CryptoKeyElementReadAccess) = 'CRYPTO_RA_DENIED' and node:value(.) = 'true'"
                                               true="The check-box 'HSE Encrypted Key Export' is enabled so the ReadAccess attribute of this keyElement should be set to 'CRYPTO_RA_ENCRYPTED'."/>
                                        <a:tst expr="(noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'SHE' or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'AES'  or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'HMAC' or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'TDES')and
                                                      node:value(../CryptoKeyElementReadAccess) = 'CRYPTO_RA_ALLOWED' and node:value(.) = 'true'"
                                               true="The check-box 'HSE Encrypted Key Export' is enabled for a symmetric key or SHE key so the ReadAccess attribute of this keyElement should be set to 'CRYPTO_RA_ENCRYPTED' because the exported key will be encrypted."/>
                                        <a:tst expr="(noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'ECC_PAIR' or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'ECC_PUB'  or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'RSA_PAIR' or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'RSA_PUB') and
                                                      node:value(.) = 'true'"
                                               true="The check-box 'HSE Encrypted Key Export' is enabled for an asymmetric key which can not be exported encrypted(the private part of the asymmetric key can not be exported in any form, only the public part of the key can be exported in plain format)."/>
                                        <a:tst expr="(noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'SHARED_SECRET' or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'ECC_PUB_EXT'   or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'RSA_PUB_EXT'   or
                                                     (noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'SHE'           and
                                                      node:name(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/../.')) = 'NvmKeyCatalog'))  and
                                                      node:value(.) = 'true'"
                                               true="The check-box 'HSE Encrypted Key Export' is enabled for a key that can not be exported."/>
                                    </a:da>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>
                                <v:var name="AuthenticatedKeyExport" type="BOOLEAN">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' "/>
                                    <a:a name="LABEL" value="HSE Authenticated Key Export"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:
                                            <html><p>
                                                Vendor specific: Enables or disables authenticated export of the HSE key.<br>
                                                When enabled, two types of keys can be exported authenticated, symmetric keys and public keys from key pair or public key slots.<br>
                                                Symmetric keys state that export is optionally authenticated, all the parameters related to this operation can be configured in the 'Authenticated Key Export' tab.
                                                Public keys can be exported in plain and optionally can be authenticated.
                                                To export an encrypted/authenticated NVM key, the provided provision key must have the same group owner as the exported NVM key (not applicable for RAM keys).
                                            </p></html>
                                            ]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:0fe829ac-26f9-fda7-556e-ac130f35a37f"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../CryptoKeyElementReadAccess) = 'CRYPTO_RA_DENIED' and node:value(.) = 'true'"
                                               true="The check-box 'HSE Authenticated Key Export' is enabled so the ReadAccess attribute of this keyElement should be set to 'CRYPTO_RA_ALLOWED' or 'CRYPTO_RA_ENCRYPTED'."/>
                                        <a:tst expr="(noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'ECC_PAIR' or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'ECC_PUB'  or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'RSA_PAIR' or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'RSA_PUB') and
                                                      node:value(../CryptoKeyElementReadAccess) = 'CRYPTO_RA_ENCRYPTED' and node:value(.) = 'true'"
                                               true="The check-box 'HSE Authenticated Key Export' is enabled for a public key so the ReadAccess attribute of this keyElement should be set to 'CRYPTO_RA_ALLOWED' because the exported key will be in plain."/>
                                        <a:tst expr="(noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'SHARED_SECRET' or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'ECC_PUB_EXT'   or
                                                      noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'RSA_PUB_EXT'   or
                                                     (noderef:value(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/KeyType')) = 'SHE'           and
                                                      node:name(concat(noderef:ref(node:fallback(../HseKeyCatalogGroupRef, .)),'/../.')) = 'NvmKeyCatalog'))  and
                                                      node:value(.) = 'true'"
                                               true="The check-box 'HSE Authenticated Key Export' is enabled for a key that can not be exported."/>
                                    </a:da>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>                             
                                <v:var name="HseKeyCounter" type="INTEGER">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' "/>
                                    <a:a name="LABEL" value="HSE Key Counter"/>
                                    <a:a name="DESC" value="EN: Vendor specific: 28 bits counter used to prevent the rollback attacks on key. When updating a key value and attributes the new counter value must be greater than the current counter value. At counter saturation(0xFFFFFFF)the key cannot be updated anymore."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:2e48d2b2-2ce2-74d5-6725-718ab82b4f3f"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                      <a:tst expr="&lt;=268435455"/>
                                      <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>
                                <v:var name="HseSMRFlags" type="INTEGER">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' "/>
                                    <a:a name="LABEL" value="HSE SMR Flags"/>
                                    <a:a name="DESC" value="EN: Vendor specific: A map of bits that define which Secure Memory Region (SMR), indexed from 0 to 31, should be verified before the key can be used. Set to zero means not used."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:1e48d2bf-ace2-b4db-c725-c18a282b423f"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                      <a:tst expr="&lt;=4294967295"/>
                                      <a:tst expr="&gt;=0"/>
                                    </a:da>
                                    <a:a name="DEFAULT_RADIX" value="HEX" />
                                </v:var>
                                <v:var name="HseEccCurveId" type="ENUMERATION">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true'  and (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'ECC_PAIR' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'ECC_PUB')"/>
                                    <a:a name="LABEL" value="HSE ECC Curve Id"/>
                                    <a:a name="DESC" value="EN: The curve on which the ECC key is set. This parameter is configurable only when the key element is linked to a catalog group of type HSE_KEY_TYPE_ECC_PAIR or HSE_KEY_TYPE_ECC_PUB."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:1e28d3b3-3c32-243b-ca25-a18a232b3233"/>
                                    <a:da name="RANGE" type="XPath">
                                      <a:tst expr="0 = 0" true="ECC_CURVE_NONE"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEcSecSecp256R1.',          string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_SEC_SECP256R1"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEcSecSecp384R1.',          string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_SEC_SECP384R1"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEcSecSecp521R1.',          string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_SEC_SECP521R1"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEcBrainpoolP256R1.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_BRAINPOOL_BRAINPOOLP256R1"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEcBrainpoolP320R1.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_BRAINPOOL_BRAINPOOLP320R1"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEcBrainpoolP384R1.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_BRAINPOOL_BRAINPOOLP384R1"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEcBrainpoolP512R1.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_BRAINPOOL_BRAINPOOLP512R1"/>
                                      <a:tst expr="((num:i(ecu:get(concat('Crypto.HseNumOfUserEccCurves.',   string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1])))))) > num:i(0))"    true="ECC_USER_CURVE1"/>
                                      <a:tst expr="((num:i(ecu:get(concat('Crypto.HseNumOfUserEccCurves.',   string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1])))))) > num:i(1))"    true="ECC_USER_CURVE2"/>
                                      <a:tst expr="((num:i(ecu:get(concat('Crypto.HseNumOfUserEccCurves.',   string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1])))))) > num:i(2))"    true="ECC_USER_CURVE3"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEc25519Ed25519.',          string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_25519_ED25519"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEc25519Curve25519.',       string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_25519_CURVE25519"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEc448Ed448.',              string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_448_ED448"/>
                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptEc448Curve448.',           string(node:fallback(./../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"     true="ECC_448_CURVE448"/>
                                    </a:da>
                                    <a:da name="DEFAULT" value="ECC_CURVE_NONE"/>
                                </v:var>
                                <v:lst name="HseKeyFlags" type="MAP">
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' "/>
                                    <a:a name="ROWS" value="6"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true'  and num:i(count(node:current()/*)) = num:i(0) and node:ref(../HseKeyCatalogGroupRef)/KeyType != 'SHE'" true="The 'HseKeyFlags' list should contain at least one entry!"/>
                                    </a:da>
                                    <v:ctr name="HseKeyFlags" type="IDENTIFIABLE">
                                        <a:a name="UUID" value="ECUC:125ff4fa-52f1-314a-1a61-1ca1115297227"/>
                                        <a:a name="DESC" value="EN: Vendor specific: Configuration of HSE key flags"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="NAME_PATTERN" value="HseKeyFlag_?"/>

                                        <v:var name="HseKeyFlag" type="ENUMERATION">
                                            <a:a name="LABEL" value="HSE Key Flag"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: The key flag specifies the operations or restrictions that can be applied to a key."/>
                                            <a:a name="UUID" value="ECUC:3e48d2bf-ace2-b4db-c725-c18a282b423f"/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="text:uniq(../../*/HseKeyFlag, .)" false="Duplicated value, 'HSE Key Flag' must be unique."/>
                                            </a:da>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:da name="RANGE" type="XPath" expr="ecu:list('Crypto.HseKeyMask.List')"/>
                                            <a:da name="DEFAULT" type="XPath"
                                                  expr="(ecu:list('Crypto.HseKeyMask.List'))[position()-1=node:fallback(node:current()/../@index,'0')]">
                                            </a:da>
                                        </v:var>
                                    </v:ctr>
                                </v:lst>
                                <!-- The next attributes will appear on the 'Encrypted Key Import' tab -->
                                <v:ref name="EncryptedImportHseKeyCatalogGroupRef" type="CHOICE-REFERENCE">
                                    <a:a name="TAB" value="Encrypted Key Import"/>
                                    <a:a name="LABEL" value="Encryption HSE Key Catalog Group Ref"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyImport)='true'"/>
                                    <a:a name="DESC" value="EN: Vendor specific: The 'Encryption HSE Key Catalog Group Ref' identifies the key group where the key is located in the NVM or RAM key catalog."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="UUID" value="ECUC:BA3061E1-857D-1014-A13E-D1E72BE16407"/>
                                    <a:da name="REF">
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/NvmKeyCatalog</a:v>
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/RamKeyCatalog</a:v>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyImport)='true' and not(node:refexists(.))" true="Invalid value of the 'Encryption HSE Key Catalog Group Ref'. Please select a valid KeyCatalog group from list of already configured NVM or RAM key catalogs. If the list is empty, please configure a KeyCatalog group first by browsing in tab Crypto/KeyCatalogs."/>
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyImport)='true' and not(node:refvalid(.))" true="Invalid or empty reference."/>
                                    </a:da>
                                </v:ref>
                                <v:var name="EncryptedImportHseKeySlot" type="INTEGER">
                                    <a:a name="TAB" value="Encrypted Key Import"/>
                                    <a:a name="LABEL" value="Encryption HSE Key Slot"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyImport)='true'"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Slot of the key inside the key group selected above in the 'Encryption HSE Key Catalog Group Ref'."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:BA2FDF7C-857D-1014-A232-889A478976A8"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=255"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyImport)='true' and num:i(.) &gt; num:i(noderef:value(concat(noderef:ref(node:fallback(../EncryptedImportHseKeyCatalogGroupRef, .)), '/NumOfKeySlots'))-1)"
                                              true="Maximum number of slots available in the selected key group was exceeded."/>
                                    </a:da>
                                </v:var>
                                <v:var name="EncryptedHseKeyBitLen" type="INTEGER">
                                    <a:a name="TAB" value="Encrypted Key Import"/>
                                    <a:a name="LABEL" value="Encrypted HSE Key Bit Length"/>
                                    <a:a name="DESC" value="EN: Vendor specific: The bit length of the encrypted key."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ab82b4f91"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=4294967295"/>
                                        <a:tst expr="&gt;=1"/>
                                    </a:da>
                                    <a:da name="DEFAULT" value="128"/>
                                </v:var>

                                <v:chc name="CipherScheme" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="Encrypted Key Import"/>
                                    <a:a name="LABEL" value="Cipher Scheme"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyImport)='true'"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Symmetric or asymmetric cipher scheme."/>
                                    <a:a name="UUID" value="ECUC:342c36f5-eb69-4346-9de8-243298941dad"/>

                                    <v:ctr name="SymmetricCipher" type="IDENTIFIABLE">
                                        <a:a name="DESC" value="EN: Vendor specific: Symmetric cipher scheme."/>
                                        <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a121302"/>

                                        <v:var name="HseCipherAlgo" type="ENUMERATION">
                                            <a:a name="LABEL" value="Cipher Algorithm"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyImport)='true'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Selects a symmetric cipher algorithm."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c18a282b4231"/>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAes.',  string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_AES"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptTdes.', string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_3DES"/>
                                            </a:da>
                                            <a:da name="DEFAULT" value="ALGO_NULL"/>
                                        </v:var>
                                        <v:var name="HseCipherBlockMode" type="ENUMERATION">
                                            <a:a name="LABEL" value="Cipher Block Mode"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyImport)='true'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Defines the cipher block mode."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c18a282b4230"/>
                                            <a:da name="RANGE" type="XPath">
                                              <a:tst expr="0 = 0" true="BLOCK_MODE_NULL"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesCbc.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_CBC"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesCfb.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_CFB"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesCtr.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_CTR"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesEcb.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_ECB"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesOfb.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_OFB"/>
                                            </a:da>
                                            <a:da name="DEFAULT" value="BLOCK_MODE_NULL"/>
                                        </v:var>
                                        <v:var name="InitializationVector" type="STRING">
                                            <a:a name="LABEL" value="Initialization Vector"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyImport)='true'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Initialization Vector. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ab82b4f92"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            </a:da>
                                        </v:var>
                                    </v:ctr>

                                    <v:ctr name="AeadCipherScheme" type="IDENTIFIABLE">
                                        <a:a name="DESC" value="EN: Vendor specific: Authenticated encryption scheme."/>
                                        <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acde8a121302"/>

                                        <v:var name="HseAeadCipherMode" type="ENUMERATION">
                                            <a:a name="LABEL" value="Authenticated cipher mode"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyImport)='true' and node:ref(../../EncryptedImportHseKeyCatalogGroupRef)/KeyType = 'AES'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Selects a authenticated cipher mode."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c18a282a4312"/>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF') and
                                                ((ecu:get(concat('Crypto.HseSptAeadCcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF')" true="CIPHER_MODE_NOT_SET"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CIPHER_MODE_GCM"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadCcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CIPHER_MODE_CCM"/>
                                            </a:da>
                                            <a:da name="DEFAULT" type="XPath">
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF') and
                                                ((ecu:get(concat('Crypto.HseSptAeadCcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF')" true="CIPHER_MODE_NOT_SET"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CIPHER_MODE_GCM"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF') and
                                                ((ecu:get(concat('Crypto.HseSptAeadCcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CIPHER_MODE_CCM"/>
                                            </a:da>
                                        </v:var>
                                        <v:var name="Tag" type="STRING">
                                            <a:a name="LABEL" value="Tag Value"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyImport)='true' and node:ref(../../EncryptedImportHseKeyCatalogGroupRef)/KeyType = 'AES'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Tag pointer. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717cb82f4f92"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            </a:da>
                                        </v:var>
                                        <v:var name="AeadInitializationVector" type="STRING">
                                            <a:a name="LABEL" value="Initialization Vector"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyImport)='true' and node:ref(../../EncryptedImportHseKeyCatalogGroupRef)/KeyType = 'AES'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Initialization Vector. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ad82f4f92"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            </a:da>
                                        </v:var>
                                        <v:var name="AadHeaderData" type="STRING">
                                            <a:a name="LABEL" value="AAD Header data"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyImport)='true' and node:ref(../../EncryptedImportHseKeyCatalogGroupRef)/KeyType = 'AES'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: AAD Header data. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces. To import an encrypted and authenticated symmetric key using AEAD, the key info (hseKeyInfo_t) must be placed at the beginning of the additional data."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ae82b4f92"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            </a:da>
                                        </v:var>
                                    </v:ctr>

                                    <v:ctr name="RSACipherScheme" type="IDENTIFIABLE">
                                        <a:a name="DESC" value="EN: Vendor specific: RSA cipher scheme." />
                                        <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a121102"/>

                                        <v:chc name="RsaScheme" type="IDENTIFIABLE">
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyImport)='true'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: RSA cipher scheme." />
                                            <a:a name="UUID" value="ECUC:342236f5-eb69-4346-9de8-243298941dad"/>

                                            <v:ctr name="RSAES_OAEP" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: RSA-OAEP scheme." />
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a121303"/>

                                                <v:var name="HseCipherAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Cipher Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../EncryptedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: RSA algorithm."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c18a282b4232"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NO_PADDING"/>
                                                        <a:tst expr="0 = 0" true="ALGO_RSAES_OAEP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NO_PADDING"/>
                                                </v:var>
                                                <v:var name="HseHashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Hash Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../EncryptedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The Hash algorithm for RSA OAEP padding."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c18a282b422a"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                        <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                                <v:var name="Label" type="STRING">
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../EncryptedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Optional OAEP label. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ab82b4f93"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                        false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value=""/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="RSAES_PKCS1_V15" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: RSA-PKCS1V15"/>
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a1213a3"/>

                                                <v:var name="HseCipherAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Cipher Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../EncryptedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: RSA algorithm."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c18a282b4233"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NO_PADDING"/>
                                                        <a:tst expr="0 = 0" true="ALGO_RSAES_PKCS1_V15"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NO_PADDING"/>
                                                </v:var>
                                            </v:ctr>
                                        </v:chc>
                                    </v:ctr>
                                </v:chc>

                                <!-- The next attributes will appear on the 'Authenticated Key Import' tab -->
                                <v:ref name="AuthenticatedImportHseKeyCatalogGroupRef" type="CHOICE-REFERENCE">
                                    <a:a name="TAB" value="Authenticated Key Import"/>
                                    <a:a name="LABEL" value="Authentication HSE Key Catalog Group Ref"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../AuthenticatedKeyImport)='true'"/>
                                    <a:a name="DESC" value="EN: Vendor specific: The 'Authentication HSE Key Catalog Group Ref' identifies the key group where the key is located in the NVM or RAM key catalog."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="UUID" value="ECUC:BA3093D0-857D-1014-BC56-DAD78B2B0247"/>
                                    <a:da name="REF">
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/NvmKeyCatalog</a:v>
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/RamKeyCatalog</a:v>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(../AuthenticatedKeyImport)='true' and not(node:refexists(.))" true="Invalid value of the 'Authentication HSE Key Catalog Group Ref'. Please select a valid KeyCatalog group from list of already configured NVM or RAM key catalogs. If the list is empty, please configure a KeyCatalog group first by browsing in tab Crypto/KeyCatalogs."/>
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(../AuthenticatedKeyImport)='true' and not(node:refvalid(.))" true="Invalid or empty reference."/>
                                    </a:da>
                                </v:ref>
                                <v:var name="AuthenticatedImportHseKeySlot" type="INTEGER">
                                    <a:a name="TAB" value="Authenticated Key Import"/>
                                    <a:a name="LABEL" value="Authentication HSE Key Slot"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../AuthenticatedKeyImport)='true'"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Slot of the key inside the key group selected above in the 'Authentication HSE Key Catalog Group Ref'."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:BA301769-857D-1014-AE33-9E0F41E139C5"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=255"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(../AuthenticatedKeyImport)='true' and num:i(.) &gt; num:i(noderef:value(concat(noderef:ref(node:fallback(../AuthenticatedImportHseKeyCatalogGroupRef, .)), '/NumOfKeySlots'))-1)"
                                              true="Maximum number of slots available in the selected key group was exceeded."/>
                                    </a:da>
                                </v:var>

                                <v:chc name="AuthenticationScheme" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="Authenticated Key Import"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../AuthenticatedKeyImport)='true'"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Authentication Scheme."/>
                                    <a:a name="UUID" value="ECUC:342c36f5-eb69-4346-9de8-24329894ada1"/>

                                    <v:ctr name="MacScheme" type="IDENTIFIABLE">
                                        <a:a name="DESC" value="EN: Vendor specific: Mac Scheme."/>
                                        <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122302"/>

                                        <v:chc name="Scheme" type="IDENTIFIABLE">
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../AuthenticatedKeyImport)='true'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Selects a MAC scheme."/>
                                            <a:a name="UUID" value="ECUC:342c36f5-eb69-4346-9de8-24329894ada2"/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="node:value(node:current()) = 'XCBC_MAC' and ((ecu:get(concat('Crypto.HseSptXCbcmac.', string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF')" true="XCBC_MAC is not supported by this platform"/>
                                            </a:da>

                                            <v:ctr name="CMAC" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: CMAC scheme."/>
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122312"/>

                                                <v:var name="CipherAlgorithm" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../AuthenticatedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: Selects a cipher algorithm for CMAC."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c18a282b4235"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptAes.',  string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_AES"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptTdes.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_3DES"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="HMAC" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: HMAC scheme."/>
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122322"/>

                                                <v:var name="HashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../AuthenticatedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: Defines the hash algorithm for HMAC."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID"
                                                         value="ECUC:fe48d2bf-ace2-b4db-c726-c18a282b422a"/>
                                                    <a:da name="RANGE" type="XPath">
                                                      <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                      <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                      <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="GMAC" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: GMAC scheme."/>
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122332"/>

                                                <v:var name="InitializationVector" type="STRING">
                                                    <a:a name="LABEL" value="Initialization Vector"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../AuthenticatedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: Initialization Vector. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ab82b4f94"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                        false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value=""/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="XCBC_MAC" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: No scheme parameters, supports only AES128."/>
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122342"/>
                                            </v:ctr>
                                        </v:chc>
                                    </v:ctr>

                                    <v:ctr name="SignatureScheme" type="IDENTIFIABLE">
                                        <a:a name="DESC" value="EN: Vendor specific: Includes parameters needed for signature authentication scheme."/>
                                        <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122352"/>

                                        <v:chc name="SchemeInfo" type="IDENTIFIABLE">
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey)='true' and node:value(../../AuthenticatedKeyImport)='true'"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Additional information for selected signature scheme."/>
                                            <a:a name="UUID" value="ECUC:342c36f5-eb69-4346-9de8-24329894ada3"/>

                                            <v:ctr name="ECDSA" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: No scheme for ECDSA."/>
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122362"/>

                                                <v:var name="HashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Hash Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey)='true' and node:value(../../../AuthenticatedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The hash algorithm used to hash the input before applying the ECDSA operation. Must not be ALGO_NULL."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c38a282b4221"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                        <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="EDDSA" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: EDDSA signature scheme."/>
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122372"/>

                                                <v:var name="HashEddsa" type="BOOLEAN">
                                                    <a:a name="LABEL" value="Hash EDDSA"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="((ecu:get(concat('Crypto.HseSptEddsa.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON') and node:value(../../../UseHseKey)='true' and node:value(../../../AuthenticatedKeyImport)='true'"/>
                                                    <a:a name="UUID" value="ECUC:a13a21f1-f1a3-a8af-a729-2ca9f2f599221"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: When checked, it requires the HSE to pre-hash the input and perform a HashEddsa signature."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>
                                                <v:var name="Context" type="STRING">
                                                    <a:a name="LABEL" value="Context"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="((ecu:get(concat('Crypto.HseSptEddsa.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON') and node:value(../../../UseHseKey)='true' and node:value(../../../AuthenticatedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The EDDSA context. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ab82b4f95"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0) and (num:i(string-length(node:current())) &lt;= 510)"
                                                        false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces. A maximum of 510 characters are allowed."/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value=""/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="RSASSA_PSS" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: RSA PSS signature scheme."/>
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122382"/>

                                                <v:var name="HashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Hash Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey)='true' and node:value(../../../AuthenticatedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The hash algorithm used to hash the input before applying the RSA operation. Must not be ALGO_NULL or ALGO_MD5."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c38a282b4222"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                        <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>

                                                <v:var name="SaltLength" type="INTEGER">
                                                    <a:a name="LABEL" value="Salt Length"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey)='true' and node:value(../../../AuthenticatedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The length of the salt. It is recommended for this to be set to MAX length."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID"
                                                        value="ECUC:fe48d2bf-ace2-b4db-c725-a18a282b433a"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=4294967295"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="0"/>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="RSASSA_PKCS1_V15" type="IDENTIFIABLE">
                                                <a:a name="DESC" value="EN: Vendor specific: No scheme for RSASSA_PKC."/>
                                                <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-acbe8a122392"/>

                                                <v:var name="HashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Hash Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey)='true' and node:value(../../../AuthenticatedKeyImport)='true'"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The hash algorithm used to hash the input before applying the RSA operation. Must not be ALGO_NULL or ALGO_MD5."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c38a282b4223"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                        <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                            </v:ctr>
                                        </v:chc>
                                    </v:ctr>
                                </v:chc>

                                <v:ctr name="KeyContainer" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="Authenticated Key Import"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey)='true' and node:value(../AuthenticatedKeyImport)='true'"/>
                                    <a:a name="DESC" value="EN: Vendor specific: The Key Container parameters should be used if the key comes in a signed key container."/>
                                    <a:a name="UUID" value="ECUC:342c36f5-eb69-4346-9de8-24329894acad"/>

                                    <v:var name="KeyContainerLength" type="INTEGER">
                                        <a:a name="LABEL" value="Key Container Length"/>
                                        <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey)='true' and node:value(../../AuthenticatedKeyImport)='true'"/>
                                        <a:a name="UUID" value="ECUC:1253f1f1-af96-54ea-a7e9-cca9f70599727"/>
                                        <a:a name="DESC" value="EN: Vendor specific: The container length in bytes."/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:da name="INVALID" type="Range">
                                          <a:tst expr="&lt;=65535"/>
                                          <a:tst expr="&gt;=0"/>
                                        </a:da>
                                        <a:da name="DEFAULT" value="0"/>
                                    </v:var>
                                    <v:var name="pKeyContainer" type="INTEGER">
                                        <a:a name="LABEL" value="Key Container Address"/>
                                        <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey)='true' and node:value(../../AuthenticatedKeyImport)='true'"/>
                                        <a:a name="DESC" value="EN: Vendor specific: Address of the key container, includes the key value(s) and other information used to authenticate the key."/>
                                        <a:a name="UUID" value="ECUC:1253f1f2-af96-55ea-a7e9-cca9f70599727"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:da name="INVALID" type="Range">
                                            <a:tst expr="&lt;=4294967295"/>
                                            <a:tst expr="&gt;=0"/>
                                        </a:da>
                                        <a:da name="DEFAULT" value="0"/>
                                        <a:a name="DEFAULT_RADIX" value="HEX" />
                                    </v:var>
                                    <v:var name="AuthenticationTag0" type="STRING">
                                        <a:a name="LABEL" value="Authentication Tag"/>
                                        <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey)='true' and node:value(../../AuthenticatedKeyImport)='true'"/>
                                        <a:a name="DESC" value="EN: Authentication tag containing MAC, RSA signature, first part of the signature (r) for ECDSA or EDDSA with the second part (s) of the signature placed in AuthenticationTag1. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ab82b4f96"/>
                                        <a:da name="DEFAULT" value=""/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                            false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                        </a:da>
                                    </v:var>
                                    <v:var name="AuthenticationTag1" type="STRING">
                                        <a:a name="LABEL" value="Second Authentication Tag"/>
                                        <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey)='true' and node:value(../../AuthenticatedKeyImport)='true' and node:fallback(../../AuthenticationScheme,.)='SignatureScheme' and (node:fallback(../../AuthenticationScheme/SchemeInfo,.)='EDDSA' or node:fallback(../../AuthenticationScheme/SchemeInfo,.)='ECDSA')"/>
                                        <a:a name="DESC" value="EN: Authentication tag containing the second part of the signature (s) for ECDSA or EDDSA. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ab82b4f97"/>
                                        <a:da name="DEFAULT" value=""/>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                            false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                        </a:da>
                                    </v:var>
                                </v:ctr>
                                <!-- The next attributes will appear on the 'Encrypted Key Export' tab -->
                                <v:ref name="EncryptedExportHseKeyCatalogGroupRef" type="CHOICE-REFERENCE">
                                    <a:a name="TAB" value="Encrypted Key Export"/>
                                    <a:a name="LABEL" value="Encryption HSE Key Catalog Group Ref"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyExport)='true' and (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                    <a:a name="DESC" value="EN: Vendor specific: The 'Encryption HSE Key Catalog Group Ref' identifies the key group where the key is located in the NVM or RAM key catalog."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="UUID" value="ECUC:176de224-dc2e-4f5f-a4f8-214f7576b234"/>
                                    <a:da name="REF">
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/NvmKeyCatalog</a:v>
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/RamKeyCatalog</a:v>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyExport)='true' and not(node:refexists(.)) and (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES')" true="Invalid value of the 'Encryption HSE Key Catalog Group Ref'. Please select a valid KeyCatalog group from list of already configured NVM or RAM key catalogs. If the list is empty, please configure a KeyCatalog group first by browsing in tab Crypto/KeyCatalogs."/>
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyExport)='true' and not(node:refvalid(.)) and (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES')" true="Invalid or empty reference."/>
                                    </a:da>
                                </v:ref>
                                <v:var name="EncryptedExportHseKeySlot" type="INTEGER">
                                    <a:a name="TAB" value="Encrypted Key Export"/>
                                    <a:a name="LABEL" value="Encryption HSE Key Slot"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyExport)='true' and (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Slot of the key inside the key group selected above in the 'Encryption HSE Key Catalog Group Ref'."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:3f2c8b6b-1ce1-2f13-5672-ffa8b12682f2"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=255"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyExport)='true' and (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES') and num:i(.) &gt; num:i(noderef:value(concat(noderef:ref(node:fallback(../EncryptedExportHseKeyCatalogGroupRef, .)), '/NumOfKeySlots'))-1)"
                                              true="Maximum number of slots available in the selected key group was exceeded."/>
                                    </a:da>
                                </v:var>
                                <v:chc name="ExportCipherScheme" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="Encrypted Key Export"/>
                                    <a:a name="LABEL" value="Cipher Scheme"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../EncryptedKeyExport)='true' and (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Symmetric or asymmetric cipher scheme."/>
                                    <a:a name="UUID" value="ECUC:442c36f5-eb69-4346-9de8-243298941dad"/>

                                     <v:ctr name="ExportSymmetricCipher" type="IDENTIFIABLE">
                                        <a:a name="LABEL" value="Symmetric Cipher Scheme"/>
                                        <a:a name="DESC" value="EN: Vendor specific: Symmetric cipher scheme."/>
                                        <a:a name="UUID" value="ECUC:5f50a061-e114-4cb1-837b-acbe8a121302"/>

                                        <v:var name="ExportHseCipherAlgo" type="ENUMERATION">
                                            <a:a name="LABEL" value="Cipher Algorithm"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyExport)='true' and (node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Selects a symmetric cipher algorithm."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:de48d2bf-ace2-b4db-c725-c18a282b4231"/>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAes.',  string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_AES"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptTdes.', string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_3DES"/>
                                            </a:da>
                                            <a:da name="DEFAULT" value="ALGO_NULL"/>
                                        </v:var>
                                        <v:var name="ExportHseCipherBlockMode" type="ENUMERATION">
                                            <a:a name="LABEL" value="Cipher Block Mode"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyExport)='true' and (node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Defines the cipher block mode."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:ae48d2bf-ace2-b4db-c725-c18a282b4230"/>
                                            <a:da name="RANGE" type="XPath">
                                              <a:tst expr="0 = 0" true="BLOCK_MODE_NULL"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesCbc.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_CBC"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesCfb.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_CFB"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesCtr.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_CTR"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesEcb.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_ECB"/>
                                              <a:tst expr="((ecu:get(concat('Crypto.HseSptAesOfb.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="BLOCK_MODE_OFB"/>
                                            </a:da>
                                            <a:da name="DEFAULT" value="BLOCK_MODE_NULL"/>
                                        </v:var>
                                        <v:var name="ExportInitializationVector" type="STRING">
                                            <a:a name="LABEL" value="Initialization Vector"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyExport)='true' and (node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Initialization Vector. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:ae48d2b6-4cea-54d5-6525-717ab82b4f92"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            </a:da>
                                        </v:var>
                                    </v:ctr>

                                    <v:ctr name="ExportAeadCipherScheme" type="IDENTIFIABLE">
                                        <a:a name="DESC" value="EN: Vendor specific: Authenticated encryption scheme."/>
                                        <a:a name="UUID" value="ECUC:4f50a061-e114-4cb1-837b-afbe8b121302"/>

                                        <v:var name="ExportHseAeadCipherMode" type="ENUMERATION">
                                            <a:a name="LABEL" value="Authenticated cipher mode"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyExport)='true' and node:ref(../../EncryptedExportHseKeyCatalogGroupRef)/KeyType = 'AES' and (node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Selects a authenticated cipher mode."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c18b282e4231"/>
                                            <a:da name="RANGE" type="XPath">
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF') and
                                                ((ecu:get(concat('Crypto.HseSptAeadCcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF')" true="CIPHER_MODE_NOT_SET"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CIPHER_MODE_GCM"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadCcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CIPHER_MODE_CCM"/>
                                            </a:da>
                                            <a:da name="DEFAULT" type="XPath">
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF') and
                                                ((ecu:get(concat('Crypto.HseSptAeadCcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF')" true="CIPHER_MODE_NOT_SET"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CIPHER_MODE_GCM"/>
                                                <a:tst expr="((ecu:get(concat('Crypto.HseSptAeadGcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF') and
                                                ((ecu:get(concat('Crypto.HseSptAeadCcm.',      string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CIPHER_MODE_CCM"/>
                                            </a:da>

                                        </v:var>
                                        <v:var name="ExportAeadInitializationVector" type="STRING">
                                            <a:a name="LABEL" value="Initialization Vector"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyExport)='true' and node:ref(../../EncryptedExportHseKeyCatalogGroupRef)/KeyType = 'AES' and (node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Initialization Vector. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717cd82b4f92"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            </a:da>
                                        </v:var>
                                        <v:var name="ExportAadHeaderData" type="STRING">
                                            <a:a name="LABEL" value="AAD Header data"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyExport)='true' and node:ref(../../EncryptedExportHseKeyCatalogGroupRef)/KeyType = 'AES' and (node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                            <a:a name="DESC" value="EN: Vendor specific: AAD Header data. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces. For symmetric keys exported authenticated with AEAD, key information MUST be part of AAD (see hseAeadScheme_t). The firmware will write the key info (hseKeyInfo_t) at the beginning of the AAD."/>
                                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                            </a:a>
                                            <a:a name="ORIGIN" value="NXP"/>
                                            <a:a name="SCOPE" value="LOCAL"/>
                                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                            <a:a name="UUID" value="ECUC:1e48d2b6-4cea-54d5-6525-717ef82b4f92"/>
                                            <a:da name="DEFAULT" value=""/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                            </a:da>
                                        </v:var>
                                    </v:ctr>

                                    <v:ctr name="ExportRSACipherScheme" type="IDENTIFIABLE">
                                        <a:a name="LABEL" value="RSA Cipher Scheme"/>
                                        <a:a name="DESC" value="EN: Vendor specific: RSA cipher scheme." />
                                        <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a121102"/>

                                        <v:chc name="ExportRsaScheme" type="IDENTIFIABLE">
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and node:value(../../EncryptedKeyExport)='true' and (node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                            <a:a name="DESC" value="EN: Vendor specific: RSA cipher scheme." />
                                            <a:a name="UUID" value="ECUC:a42236f5-eb69-4346-9de8-243298941dad"/>

                                            <v:ctr name="ExportRsaesOaep" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="RSAES OAEP Scheme"/>
                                                <a:a name="DESC" value="EN: Vendor specific: RSA-OAEP scheme." />
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a121303"/>

                                                <v:var name="ExportHseCipherAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Cipher Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../EncryptedKeyExport)='true' and (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: RSA algorithm."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:ae48d2bf-ace2-b4db-c725-c18a282b4232"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NO_PADDING"/>
                                                        <a:tst expr="0 = 0" true="ALGO_RSAES_OAEP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NO_PADDING"/>
                                                </v:var>
                                                <v:var name="ExportHseHashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Hash Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../EncryptedKeyExport)='true' and (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The Hash algorithm for RSA OAEP padding."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:ae48d2bf-ace2-b4db-c725-c18a282b422a"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                        <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                                <v:var name="ExportLabel" type="STRING">
                                                    <a:a name="LABEL" value="Label"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../EncryptedKeyExport)='true' and (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                                    <a:a name="DESC" value="EN: Optional OAEP label. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:ae48d2b6-4cea-54d5-6525-717ab82b4f93"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                        false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value=""/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="ExportRsaesPkcs1V15" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="RSAES PKCS1V15 Scheme"/>
                                                <a:a name="DESC" value="EN: Vendor specific: RSA-PKCS1V15"/>
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a1213a3"/>

                                                <v:var name="ExportHseCipherAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Cipher Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and node:value(../../../EncryptedKeyExport)='true' and (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: RSA algorithm."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:ae48d2bf-ace2-b4db-c725-c18a282b4233"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NO_PADDING"/>
                                                        <a:tst expr="0 = 0" true="ALGO_RSAES_PKCS1_V15"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NO_PADDING"/>
                                                </v:var>
                                            </v:ctr>
                                        </v:chc>
                                    </v:ctr>
                                </v:chc>
                                <!-- The end of attributes that will appear on the 'Encrypted Key Export' tab -->

                                <!-- The next attributes will appear on the 'Authenticated Key Export' tab -->
                                <v:var name="AuthenticatedExportPublicKey" type="BOOLEAN">
                                    <a:a name="TAB" value="Authenticated Key Export"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey)='true' and 
                                        node:value(../AuthenticatedKeyExport)='true' and 
                                        ((node:value(../EncryptedKeyExport)='true' and node:name(../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../EncryptedKeyExport)='false') and 
                                        not(node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or  node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES')"/>
                                    <a:a name="LABEL" value="Authenticated Public Key Export"/>
                                    <a:a name="DESC">
                                        <a:v>
                                            <![CDATA[EN:
                                            <html><p>
                                                Vendor specific: Enables or disables authencticated export of the public HSE key.<br>
                                                Public keys can be exported in plain and optionally can be authenticated.
                                            </p></html>
                                            ]]>
                                        </a:v>
                                    </a:a>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:a name="UUID" value="ECUC:9fe529e1-83f5-ada2-5253-6d657b86a37f"/>
                                    <a:da name="DEFAULT" value="false"/>
                                </v:var>
                                <v:ref name="AuthenticatedExportHseKeyCatalogGroupRef" type="CHOICE-REFERENCE">
                                    <a:a name="TAB" value="Authenticated Key Export"/>
                                    <a:a name="LABEL" value="Authentication HSE Key Catalog Group Ref"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and node:value(../AuthenticatedKeyExport)='true' and 
                                        (
                                            (node:value(../EncryptedKeyExport)='true' and node:name(../ExportCipherScheme)!='ExportAeadCipherScheme') 
                                            or node:value(../EncryptedKeyExport)='false'
                                        )   
                                        and 
                                        (
                                            node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                            or ../AuthenticatedExportPublicKey = 'true'
                                        )"/> 
                                    <a:a name="DESC" value="EN: Vendor specific: The 'Authentication HSE Key Catalog Group Ref' identifies the key group where the key is located in the NVM or RAM key catalog."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="UUID" value="ECUC:a76de224-dc2e-4f5f-a4f8-214f7576b234"/>
                                    <a:da name="REF">
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/NvmKeyCatalog</a:v>
                                        <a:v>ASPathDataOfSchema:/TS_T40D34M30I0R0/Crypto/RamKeyCatalog</a:v>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                    <a:tst expr="node:value(../UseHseKey) = 'true' and
                                        node:value(../AuthenticatedKeyExport)='true' and
                                        ((node:value(../EncryptedKeyExport)='true' and node:name(../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../EncryptedKeyExport)='false') and
                                        (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES' or ../AuthenticatedExportPublicKey = 'true') and
                                        not(node:refexists(.))" true="Invalid value of the 'Authentication HSE Key Catalog Group Ref'. Please select a valid KeyCatalog group from list of already configured NVM or RAM key catalogs. If the list is empty, please configure a KeyCatalog group first by browsing in tab Crypto/KeyCatalogs."/>
                                    <a:tst expr="node:value(../UseHseKey) = 'true' and
                                        node:value(../AuthenticatedKeyExport)='true' and
                                        ((node:value(../EncryptedKeyExport)='true' and node:name(../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../EncryptedKeyExport)='false') and
                                        (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES' or ../AuthenticatedExportPublicKey = 'true') and
                                        not(node:refvalid(.))" true="Invalid or empty reference."/>
                                    </a:da>
                                </v:ref>
                                <v:var name="AuthenticatedExportHseKeySlot" type="INTEGER">
                                    <a:a name="TAB" value="Authenticated Key Export"/>
                                    <a:a name="LABEL" value="Authentication HSE Key Slot"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and
                                        node:value(../AuthenticatedKeyExport)='true' and
                                        ((node:value(../EncryptedKeyExport)='true' and node:name(../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../EncryptedKeyExport)='false') and
                                        (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES' or ../AuthenticatedExportPublicKey = 'true')"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Slot of the key inside the key group selected above in the 'Authentication HSE Key Catalog Group Ref'."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="NXP"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:af2c8b6b-1ce1-2f13-5672-ffa8b12682f2"/>
                                    <a:da name="DEFAULT" value="0"/>
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=255"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:value(../UseHseKey) = 'true' and
                                              node:value(../AuthenticatedKeyExport)='true' and
                                              ((node:value(../EncryptedKeyExport)='true' and node:name(../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../EncryptedKeyExport)='false') and
                                              (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                              or ../AuthenticatedExportPublicKey = 'true') 
                                              and num:i(.) &gt; num:i(noderef:value(concat(noderef:ref(node:fallback(../AuthenticatedExportHseKeyCatalogGroupRef, .)), '/NumOfKeySlots'))-1)"
                                              true="Maximum number of slots available in the selected key group was exceeded."/>
                                    </a:da>
                                </v:var>

                                <v:chc name="ExportAuthenticationScheme" type="IDENTIFIABLE">
                                    <a:a name="TAB" value="Authenticated Key Export"/>
                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../UseHseKey) = 'true' and
                                        node:value(../AuthenticatedKeyExport)='true' and
                                        ((node:value(../EncryptedKeyExport)='true' and node:name(../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../EncryptedKeyExport)='false') and
                                        (node:ref(../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                        or ../AuthenticatedExportPublicKey = 'true')"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Authentication Scheme."/>
                                    <a:a name="UUID" value="ECUC:a42c36f5-eb69-4346-9de8-24329894ada1"/>

                                    <v:ctr name="ExportMacScheme" type="IDENTIFIABLE">
                                        <a:a name="LABEL" value="Mac Scheme"/>
                                        <a:a name="DESC" value="EN: Vendor specific: Mac Scheme."/>
                                        <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122302"/>

                                        <v:chc name="ExportScheme" type="IDENTIFIABLE">
                                            <a:a name="LABEL" value="Scheme"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and
                                                node:value(../../AuthenticatedKeyExport)='true' and
                                                ((node:value(../../EncryptedKeyExport)='true' and node:name(../../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../../EncryptedKeyExport)='false') and
                                                (node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                                or ../../AuthenticatedExportPublicKey = 'true')"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Selects a MAC scheme."/>
                                            <a:a name="UUID" value="ECUC:a42c36f5-eb69-4346-9de8-24329894ada2"/>
                                            <a:da name="INVALID" type="XPath">
                                                <a:tst expr="node:value(node:current()) = 'XCBC_MAC' and ((ecu:get(concat('Crypto.HseSptXCbcmac.', string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_OFF')" true="XCBC_MAC is not supported by this platform"/>
                                            </a:da>

                                            <v:ctr name="CMAC" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="CMAC"/>
                                                <a:a name="DESC" value="EN: Vendor specific: CMAC scheme."/>
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122312"/>

                                                <v:var name="ExportCipherAlgorithm" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and
                                                        node:value(../../../AuthenticatedKeyExport)='true' and
                                                        ((node:value(../../../EncryptedKeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../../../EncryptedKeyExport)='false') and
                                                        (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                                        or ../../../AuthenticatedExportPublicKey = 'true')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: Selects a cipher algorithm for CMAC."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:ae48d2bf-ace2-b4db-c725-c18a282b4235"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptAes.',  string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_AES"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptTdes.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_3DES"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="HMAC" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="HMAC"/>
                                                <a:a name="DESC" value="EN: Vendor specific: HMAC scheme."/>
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122322"/>

                                                <v:var name="ExportHashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and
                                                        node:value(../../../AuthenticatedKeyExport)='true' and
                                                        ((node:value(../../../EncryptedKeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../../../EncryptedKeyExport)='false') and
                                                        (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                                        or ../../../AuthenticatedExportPublicKey = 'true')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: Defines the hash algorithm for HMAC."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID"
                                                         value="ECUC:ae48d2bf-ace2-b4db-c726-c18a282b422a"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                        <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="GMAC" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="GMAC"/>
                                                <a:a name="DESC" value="EN: Vendor specific: GMAC scheme."/>
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122332"/>

                                                <v:var name="ExportInitializationVector" type="STRING">
                                                    <a:a name="LABEL" value="Initialization Vector"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and
                                                        node:value(../../../AuthenticatedKeyExport)='true' and
                                                        ((node:value(../../../EncryptedKeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../../../EncryptedKeyExport)='false') and
                                                        (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                                        or ../../../AuthenticatedExportPublicKey = 'true')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: Initialization Vector. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:ae48d2b6-4cea-54d5-6525-717ab82b4f94"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0)"
                                                        false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value=""/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="XCBC_MAC" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="XCBC_MAC"/>
                                                <a:a name="DESC" value="EN: Vendor specific: No scheme parameters, supports only AES128."/>
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122342"/>
                                            </v:ctr>
                                        </v:chc>
                                    </v:ctr>

                                    <v:ctr name="ExportSignatureScheme" type="IDENTIFIABLE">
                                        <a:a name="LABEL" value="Signature Scheme"/>
                                        <a:a name="DESC" value="EN: Vendor specific: Includes parameters needed for signature authentication scheme."/>
                                        <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122352"/>

                                        <v:chc name="ExportSchemeInfo" type="IDENTIFIABLE">
                                            <a:a name="LABEL" value="Scheme"/>
                                            <a:a name="EDITABLE" type="XPath" expr="node:value(../../UseHseKey) = 'true' and
                                                node:value(../../AuthenticatedKeyExport)='true' and
                                                ((node:value(../../EncryptedKeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../../EncryptedKeyExport)='false') and
                                                (node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                                or ../../AuthenticatedExportPublicKey = 'true')"/>
                                            <a:a name="DESC" value="EN: Vendor specific: Additional information for selected signature scheme."/>
                                            <a:a name="UUID" value="ECUC:a42c36f5-eb69-4346-9de8-24329894ada3"/>

                                            <v:ctr name="ECDSA" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="ECDSA"/>
                                                <a:a name="DESC" value="EN: Vendor specific: No scheme for ECDSA."/>
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122362"/>

                                                <v:var name="ExportHashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Hash Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and
                                                        node:value(../../../AuthenticatedKeyExport)='true' and
                                                        ((node:value(../../../EncryptedKeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../../../EncryptedKeyExport)='false') and
                                                        (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                                        or ../../../AuthenticatedExportPublicKey = 'true')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The hash algorithm used to hash the input before applying the ECDSA operation. Must not be ALGO_NULL."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c38a282b4224"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                        <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="EDDSA" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="EDDSA"/>
                                                <a:a name="DESC" value="EN: Vendor specific: EDDSA signature scheme."/>
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122372"/>

                                                <v:var name="ExportHashEddsa" type="BOOLEAN">
                                                    <a:a name="LABEL" value="Hash EDDSA"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="((ecu:get(concat('Crypto.HseSptEddsa.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON') and node:value(../../../UseHseKey)='true' and node:value(../../../KeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme' and (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES' or ../../../AuthenticatedExportPublicKey = 'true')"/>
                                                    <a:a name="UUID" value="ECUC:a13a21f1-f1a3-a8af-a729-2ca9f2f599222"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: When checked, it requires the HSE to pre-hash the input and perform a HashEddsa signature."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:da name="DEFAULT" value="false"/>
                                                </v:var>
                                                <v:var name="ExportContext" type="STRING">
                                                    <a:a name="LABEL" value="Context"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="((ecu:get(concat('Crypto.HseSptEddsa.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON') and node:value(../../../UseHseKey)='true' and node:value(../../../KeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme' and (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES' or ../../../AuthenticatedExportPublicKey = 'true')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The EDDSA context. This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:ae48d2b6-4cea-54d5-6525-717ab82b4f95"/>
                                                    <a:da name="INVALID" type="XPath">
                                                        <a:tst expr="text:match(normalize-space(.),'^[0-9a-fA-F]*$') and (num:i(string-length(.)) mod 2 = 0) and (num:i(string-length(node:current())) &lt;= 510)"
                                                        false="This node is a hexadecimal string. Please use an even number of characters in range [0-9 a-f A-F], without spaces. A maximum of 510 characters are allowed."/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value=""/>
                                                </v:var>
                                            </v:ctr>
                                            <v:ctr name="RSASSA_PSS" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="RSASSA PSS"/>
                                                <a:a name="DESC" value="EN: Vendor specific: RSA PSS signature scheme."/>
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122382"/>

                                                <v:var name="ExportHashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Hash Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and
                                                        node:value(../../../AuthenticatedKeyExport)='true' and
                                                        ((node:value(../../../EncryptedKeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../../../EncryptedKeyExport)='false') and
                                                        (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                                        or ../../../AuthenticatedExportPublicKey = 'true')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The hash algorithm used to hash the input before applying the RSA operation. Must not be ALGO_NULL or ALGO_MD5."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c38a282b4225"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                        <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                                <v:var name="ExportSaltLength" type="INTEGER">
                                                    <a:a name="LABEL" value="Salt Length"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and
                                                        node:value(../../../AuthenticatedKeyExport)='true' and
                                                        ((node:value(../../../EncryptedKeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../../../EncryptedKeyExport)='false') and
                                                        (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                                        or ../../../AuthenticatedExportPublicKey = 'true')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The length of the salt. It is recommended for this to be set to MAX length."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID"
                                                        value="ECUC:ae48d2bf-ace2-b4db-c725-a18a282b433a"/>
                                                    <a:da name="INVALID" type="Range">
                                                        <a:tst expr="&lt;=4294967295"/>
                                                        <a:tst expr="&gt;=0"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="0"/>
                                                </v:var>
                                            </v:ctr>

                                            <v:ctr name="RSASSA_PKCS1_V15" type="IDENTIFIABLE">
                                                <a:a name="LABEL" value="RSASSA PKCS1 V15"/>
                                                <a:a name="DESC" value="EN: Vendor specific: No scheme for RSASSA_PKC."/>
                                                <a:a name="UUID" value="ECUC:af50a061-e114-4cb1-837b-acbe8a122392"/>

                                                <v:var name="ExportHashAlgo" type="ENUMERATION">
                                                    <a:a name="LABEL" value="Hash Algorithm"/>
                                                    <a:a name="EDITABLE" type="XPath" expr="node:value(../../../UseHseKey) = 'true' and
                                                        node:value(../../../AuthenticatedKeyExport)='true' and
                                                        ((node:value(../../../EncryptedKeyExport)='true' and node:name(../../../ExportCipherScheme)!='ExportAeadCipherScheme') or node:value(../../../EncryptedKeyExport)='false') and
                                                        (node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'AES' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'HMAC' or node:ref(../../../HseKeyCatalogGroupRef)/KeyType = 'TDES' 
                                                        or ../../../AuthenticatedExportPublicKey = 'true')"/>
                                                    <a:a name="DESC" value="EN: Vendor specific: The hash algorithm used to hash the input before applying the RSA operation. Must not be ALGO_NULL or ALGO_MD5."/>
                                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                                    </a:a>
                                                    <a:a name="ORIGIN" value="NXP"/>
                                                    <a:a name="SCOPE" value="LOCAL"/>
                                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                                    <a:a name="UUID" value="ECUC:fe48d2bf-ace2-b4db-c725-c38a282b4226"/>
                                                    <a:da name="RANGE" type="XPath">
                                                        <a:tst expr="0 = 0" true="ALGO_NULL"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptMd5.',          string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_MD5"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA_1"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',     string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.', string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA2_512_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_224"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_256"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_384"/>
                                                        <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',         string(node:fallback(./../../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ALGO_SHA3_512"/>
                                                        <a:tst expr="0 = 0" true="ALGO_MP"/>
                                                    </a:da>
                                                    <a:da name="DEFAULT" value="ALGO_NULL"/>
                                                </v:var>
                                            </v:ctr>
                                        </v:chc>
                                    </v:ctr>
                                </v:chc>
                                <!-- The end of the attributes that will appear on the 'Authenticated Key Export' tab -->
                            </v:ctr>
                        </v:lst>
                    </v:ctr>

                    <!-- @implements CryptoKeyTypes_Object -->
                    <v:ctr name="CryptoKeyTypes" type="IDENTIFIABLE">
                        <a:a name="DESC" value="EN: Container for CRYPTO key types"/>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="UUID" value="ECUC:f4aad910-a3a3-bede-caa2-73b26564c5d6"/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>

                        <v:lst name="CryptoKeyType" type="MAP">
                            <a:da name="MIN" value="1"/>

                            <!-- @implements CryptoKeyType_Object -->
                            <v:ctr name="CryptoKeyType" type="IDENTIFIABLE">
                                <a:a name="DESC" value="EN: Configuration of a CryptoKeyType"/>
                                <a:a name="UUID" value="ECUC:a0a54a5d-02b5-4370-94bf-5cgea7a083a9"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                                </a:a>

                                <v:lst name="CryptoKeyElementRef">
                                    <a:da name="MIN" value="1"/>

                                    <!-- @implements CryptoKeyElementRef_Object -->
                                    <v:ref name="CryptoKeyElementRef" type="REFERENCE">
                                        <a:a name="DESC" value="EN: Refers to a Crypto Key Element, which holds the data of the Crypto Key Element."/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="UUID" value="ECUC:2346dd86-a467-263a-aa0c-0ad997b5c7d2"/>
                                        <a:da name="REF"
                                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Crypto/CryptoKeyElements/CryptoKeyElement"/>
                                        <a:da name="RANGE" type="XPath">
                                            <a:tst expr="node:paths(../../../../../CryptoKeyElements/CryptoKeyElement/*)"/>
                                        </a:da>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="node:refvalid(.)" false="The configured node does not exist or may not be referenced."/>
                                            <a:tst expr="text:uniq(../*, .)" false="Duplicated value, 'CryptoKeyElementRef' must be unique!"/>
                                            <a:tst expr="text:uniq(text:split(node:refs(../../CryptoKeyElementRef/*)/CryptoKeyElementId),node:ref(.)/CryptoKeyElementId)"
                                                   false="A reference to a CryptoKeyElement with the same CryptoKeyElementId already exists in the reference list"/>
                                            <a:tst expr="(node:ref(.)/EncryptedKeyExport = 'true' or
                                                        node:ref(.)/AuthenticatedKeyExport = 'true') and
                                                        (
                                                            node:value(node:ref(node:ref(node:fallback(.,.))/HseKeyCatalogGroupRef)/KeyType) = 'AES'  or
                                                            node:value(node:ref(node:ref(node:fallback(.,.))/HseKeyCatalogGroupRef)/KeyType) = 'TDES' or
                                                            node:value(node:ref(node:ref(node:fallback(.,.))/HseKeyCatalogGroupRef)/KeyType) = 'HMAC' or
                                                            node:value(node:ref(node:fallback(.,.))/AuthenticatedExportPublicKey) = 'true'
                                                        ) and
                                                         not((node:refs(../../CryptoKeyElementRef/*)/CryptoKeyElementId = 99))"
                                                   true="HSE Key Export is enabled requiring CryptoKeyElement with CryptoKeyElementId = 99 (CRYPTO_KE_EXPORT_AUTHENTICATION)"/>
                                        </a:da>
                                    </v:ref>
                                </v:lst>
                            </v:ctr>
                        </v:lst>
                    </v:ctr>

                    <!-- @implements CryptoKeys_Object -->
                    <v:ctr name="CryptoKeys" type="IDENTIFIABLE">
                        <a:a name="DESC" value="EN: Container for CRYPTO keys"/>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="UUID" value="ECUC:f1a40c6f-c025-237f-fa5f-2930cf00860d"/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <v:lst name="CryptoKey" type="MAP">
                            <a:da name="MIN" value="1"/>

                            <!-- @implements CryptoKey_Object -->
                            <v:ctr name="CryptoKey" type="IDENTIFIABLE">
                                <a:a name="DESC" value="EN: Configuration of a CryptoKey"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:1d39e0f2-fa70-1f0f-f2b9-f291a72100f5"/>

                                <!-- @implements CryptoKeyId_Object -->
                                <v:var name="CryptoKeyId" type="INTEGER">
                                    <a:a name="DESC" value="EN: Identifier of the Crypto Driver key."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                    <a:a name="UUID" value="ECUC:f2278a6b-aced-df17-e676-1f68b1a68cf6"/>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="text:uniq(../../*/CryptoKeyId, .)" false="Duplicated value, CryptoKeyId must be unique."/>
                                        <a:tst expr="(node:value(.) > num:i(count(../../*/.)) - 1)" true="CryptoKeyId is out of range. Maximum value is given by the number of keys in the list minus 1."/>
                                    </a:da>
                                    <a:da name="DEFAULT" type="XPath" expr="num:i(node:fallback(node:current()/../@index, num:i(0)))" />
                                    <a:da name="INVALID" type="Range">
                                        <a:tst expr="&lt;=4294967295"/>
                                        <a:tst expr="&gt;=0"/>
                                    </a:da>
                                </v:var>
                                <!-- @implements CryptoKeyTypeRef_Object -->
                                <v:ref name="CryptoKeyTypeRef" type="REFERENCE">
                                    <a:a name="DESC" value="EN: Refers to a pointer in the CRYPTO to a CryptoKeyType. The CryptoKeyType provides the information about which key elements are contained in a CryptoKey."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="UUID" value="ECUC:a18f7fcd-cb36-f8c7-a08e-7b1bd421bf18"/>
                                    <a:da name="REF"
                                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Crypto/CryptoKeyTypes/CryptoKeyType"/>
                                    <a:da name="RANGE" type="XPath">
                                        <a:tst expr="node:paths(../../../../CryptoKeyTypes/CryptoKeyType/*)"/> <!-- Select for reference only the options available inside the CryptoKeyType -->
                                    </a:da>
                                    <a:da name="INVALID" type="XPath">
                                        <a:tst expr="node:refvalid(.)" false="The configured node does not exist or may not be referenced."/>
                                    </a:da>
                                </v:ref>
                            </v:ctr>
                        </v:lst>
                    </v:ctr>

                    <v:lst name="CryptoPrimitives" type="MAP">

                        <!-- @implements CryptoPrimitives_Object -->
                        <v:ctr name="CryptoPrimitives" type="IDENTIFIABLE">
                            <a:a name="DESC" value="EN: Container for CRYPTO primitives"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="UUID" value="ECUC:108c731d-26b3-f933-ff9d-111ccf980357"/>

                            <v:lst name="CryptoPrimitive" type="MAP">

                                <!-- @implements CryptoPrimitive_Object -->
                                <v:ctr name="CryptoPrimitive" type="IDENTIFIABLE">
                                    <a:a name="DESC" value="EN: Configuration of a CryptoPrimitive"/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>
                                    <a:a name="UUID" value="ECUC:f11cd06f-daa9-c291-bb05-9c25d08d52f3"/>

                                    <!-- @implements CryptoPrimitiveAlgorithmFamily_Object -->
                                    <v:var name="CryptoPrimitiveAlgorithmFamily" type="ENUMERATION">
                                        <a:a name="DESC" value="EN: Determines the algorithm family used for the crypto service"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:91a3ac29-c9cf-fe7c-d722-16334b01c1f9"/>
                                        <a:da name="RANGE" type="XPath">
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAes.',                  string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_AES"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptBlake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BLAKE_1_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptBlake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BLAKE_1_512"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptBlake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BLAKE_2s_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptBlake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BLAKE_2s_512"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEcBrainpoolP256R1.',    string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BRAINPOOL"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptChacha.',               string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_CHACHA"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEcc.',                  string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_ECCNIST"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEcies.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_ECIES"/>
                                            <a:tst expr="0 = 0" true="CRYPTO_ALGOFAM_NOT_SET"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRipemd.',               string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_RIPEMD160"/>
                                            <a:tst expr="0 = 0" true="CRYPTO_ALGOFAM_RNG"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',                  string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_RSA"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA1"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',             string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_224"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',             string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',             string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_384"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',             string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_512"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.',         string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_512_224"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.',         string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_512_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptShake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHAKE128"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptShake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHAKE256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSiphash.',              string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SIPHASH"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptTdes.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_3DES"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEc25519Ed25519.',       string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_ED25519"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEc448Ed448.',           string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_ED448"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA3_224"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA3_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA3_384"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA3_512"/>
                                        </a:da>
                                        <a:da name="DEFAULT" value="CRYPTO_ALGOFAM_RNG"/>
                                    </v:var>
                                    <!-- @implements CryptoPrimitiveAlgorithmMode_Object -->
                                    <v:var name="CryptoPrimitiveAlgorithmMode" type="ENUMERATION">
                                        <a:a name="DESC" value="EN: Determines the algorithm mode used for the crypto service"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:f1fbbf040-2c0b-c95a-dde3-1f9341102e40"/>
                                        <a:da name="RANGE" type="XPath">
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptChacha.',          string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_12ROUNDS"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptChacha.',          string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_20ROUNDS"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptChacha.',          string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_8ROUNDS"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAesCbc.',          string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_CBC"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAesCfb.',          string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_CFB"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptCmac.',            string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_CMAC"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptFastCmac.',        string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_CUSTOM_FAST_CMAC"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAesCtr.',          string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_CTR"/>
                                            <a:tst expr="0 = 0" true="CRYPTO_ALGOMODE_CTRDRBG"/>
                                            <a:tst expr="0 = 0" true="CRYPTO_ALGOMODE_CUSTOM_DRBG_PR"/>
                                            <a:tst expr="0 = 0" true="CRYPTO_ALGOMODE_CUSTOM_DRBG_RS"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAesEcb.',          string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_ECB"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAead.',            string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_GCM"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptGmac.',            string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_GMAC"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptHmac.',            string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_HMAC"/>
                                            <a:tst expr="0 = 0" true="CRYPTO_ALGOMODE_NOT_SET"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAesOfb.',          string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_OFB"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRsaesOaep.',       string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_RSAES_OAEP"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRsaesPkcs1V15.',   string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_RSAES_PKCS1_v1_5"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRsassaPss.',       string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_RSASSA_PKCS1_v1_5"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRsassaPkcs1V15.',  string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_RSASSA_PSS"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSiphash.',         string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_SIPHASH_2_4"/>
                                            <a:tst expr="0 = 1" true="CRYPTO_ALGOMODE_SIPHASH_4_8"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSiphash.',         string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_CUSTOM_SIPHASH_2_4_128"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptXtsAes.',          string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOMODE_XTS"/>
                                        </a:da>
                                        <a:da name="DEFAULT" value="CRYPTO_ALGOMODE_CUSTOM_DRBG_PR"/>
                                    </v:var>
                                    <!-- @implements CryptoPrimitiveAlgorithmSecondaryFamily_Object -->
                                    <v:var name="CryptoPrimitiveAlgorithmSecondaryFamily" type="ENUMERATION">
                                        <a:a name="DESC" value="EN: Determines the algorithm secondary family used for the crypto service"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:1a685378-2161-c115-fadf-288284948e9d"/>
                                        <a:da name="RANGE" type="XPath">
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAes.',                  string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_AES"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptBlake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BLAKE_1_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptBlake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BLAKE_1_512"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptBlake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BLAKE_2s_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptBlake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BLAKE_2s_512"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEcBrainpoolP256R1.',    string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_BRAINPOOL"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptChacha.',               string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_CHACHA"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEcc.',                  string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_ECCNIST"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEcies.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_ECIES"/>
                                            <a:tst expr="0 = 0" true="CRYPTO_ALGOFAM_NOT_SET"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRipemd.',               string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_RIPEMD160"/>
                                            <a:tst expr="0 = 0" true="CRYPTO_ALGOFAM_RNG"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',                  string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_RSA"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha1.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA1"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_224.',             string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_224"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_256.',             string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_384.',             string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_384"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512.',             string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_512"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_224.',         string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_512_224"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha2_512_256.',         string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA2_512_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptShake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHAKE128"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptShake.',                string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHAKE256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSiphash.',              string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SIPHASH"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptTdes.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_3DES"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEc25519Ed25519.',       string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_ED25519"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptEc448Ed448.',           string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_ED448"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA3_224"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA3_256"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA3_384"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptSha3.',                 string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="CRYPTO_ALGOFAM_SHA3_512"/>
                                        </a:da>
                                        <a:da name="DEFAULT" value="CRYPTO_ALGOFAM_NOT_SET"/>
                                    </v:var>
                                    <!-- @implements CryptoPrimitiveService_Object -->
                                    <v:var name="CryptoPrimitiveService" type="ENUMERATION">
                                        <a:a name="DESC" value="EN: Determines the crypto service used for defining the capabilities"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                        <a:a name="SCOPE" value="LOCAL"/>
                                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                        <a:a name="UUID" value="ECUC:15750a2c-a208-f203-fc10-202a104e0bbe"/>
                                        <a:da name="DEFAULT" value="RANDOM"/>
                                        <a:da name="RANGE" type="XPath">
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptHash.',           string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="HASH"/>
                                            <a:tst expr="0 = 0" true="MAC_GENERATE"/>
                                            <a:tst expr="0 = 0" true="MAC_VERIFY"/>
                                            <a:tst expr="0 = 0" true="ENCRYPT"/>
                                            <a:tst expr="0 = 0" true="DECRYPT"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAead.',           string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="AEAD_ENCRYPT"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptAead.',           string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="AEAD_DECRYPT"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',            string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON') or
                                                         ((ecu:get(concat('Crypto.HseSptEcc.',            string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"
                                                         true="SIGNATURE_GENERATE"/>
                                            <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',            string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON') or
                                                         ((ecu:get(concat('Crypto.HseSptEcc.',            string(node:fallback(./../../../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')"
                                                         true="SIGNATURE_VERIFY"/>
                                            <a:tst expr="0 = 0" true="RANDOM"/>
                                        </a:da>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="(
                                                            num:i(number(count(text:grep
                                                            (
                                                                ecu:list
                                                                (
                                                                    concat('Crypto.SupportedPrimitives.', string(node:fallback(./../../../../../CryptoGeneral/HseFwType, ecu:list('Crypto.HseFwTypes.List')[1])), '.List')
                                                                ),
                                                                concat
                                                                (
                                                                    node:fallback(., 'HASH'), '_',
                                                                    text:replace(node:fallback(../CryptoPrimitiveAlgorithmFamily, 'CRYPTO_ALGOFAM_NOT_SET'), 'CRYPTO.*_ALGOFAM_', ''), '_',
                                                                    text:replace(node:fallback(../CryptoPrimitiveAlgorithmMode, 'CRYPTO_ALGOMODE_NOT_SET'), 'CRYPTO.*_ALGOMODE_', ''), '_',
                                                                    text:replace(node:fallback(../CryptoPrimitiveAlgorithmSecondaryFamily,'CRYPTO_ALGOFAM_NOT_SET'), 'CRYPTO.*_ALGOFAM_', '')
                                                                )
                                                            )))) = 0
                                                         )"
                                                  true="The configured primitive is not in the list of primitives supported by the Crypto driver. When adding the Crypto driver in the configurator, you can choose to use one of the available recommended configurations which will automatically fill the CryptoPrimitives list with all primitives supported by Crypto driver."/>
                                        </a:da>
                                    </v:var>
                                </v:ctr>
                            </v:lst>
                        </v:ctr>
                    </v:lst>

                    <!-- @implements CommonPublishedInformation_Object -->
                    <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                        <a:a name="LABEL" value="Common Published Information"/>
                        <a:a name="DESC">
                            <a:v>
                                <![CDATA[EN:
                                    <html>
                                    <p>Common container, aggregated by all modules. It contains published information about vendor and versions.</p>
                                    </html>
                                ]]>
                            </a:v>
                        </a:a>
                        <a:a name="UUID" value="ECUC:9956f1f1-bff6-45ea-a7e9-ccaa70599727"/>

                        <v:var name="ArReleaseMajorVersion" type="INTEGER_LABEL">
                            <a:a name="LABEL" value="AUTOSAR Major Version"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html>
                                        <p>Vendor specific: Major version number of AUTOSAR specification on which the appropriate implementation is based on.</p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PublishedInformation">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:66b8f123-9bf5-4365-a866-6c1beaaa2a9f"/>
                            <a:da name="DEFAULT" value="4"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&gt;=4"/>
                                <a:tst expr="&lt;=4"/>
                            </a:da>
                        </v:var>
                        <v:var name="ArReleaseMinorVersion" type="INTEGER_LABEL">
                            <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html>
                                        <p>Vendor specific: Minor version number of AUTOSAR specification on which the appropriate implementation is based on.</p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PublishedInformation">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:d21a16d5-553c-4da2-893d-11edcc80e3f2"/>
                            <a:da name="DEFAULT" value="7"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&gt;=7"/>
                                <a:tst expr="&lt;=7"/>
                            </a:da>
                        </v:var>
                        <v:var name="ArReleaseRevisionVersion" type="INTEGER_LABEL">
                            <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html>
                                        <p>Vendor specific: Patch version number of AUTOSAR specification on which the appropriate implementation is based on.</p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PublishedInformation">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:b676214d-048d-4372-9e45-1120274094e9"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&gt;=0"/>
                                <a:tst expr="&lt;=0"/>
                            </a:da>
                        </v:var>
                        <v:var name="ModuleId" type="INTEGER_LABEL">
                            <a:a name="LABEL" value="Numeric Module ID"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html>
                                        <p>Vendor specific: Module ID of this module.</p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PublishedInformation">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:81e50058-1c3a-464f-88c2-14534833f201"/>
                            <a:da name="DEFAULT" value="114"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&gt;=114"/>
                                <a:tst expr="&lt;=114"/>
                            </a:da>
                        </v:var>
                        <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                            <a:a name="LABEL" value="Software Major Version"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html>
                                        <p>Major version number of the vendor specific implementation of the module. The numbering is vendor specific.</p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PublishedInformation">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:f7e52441-a341-495d-a311-56319dbe48ab"/>
                            <a:da name="DEFAULT" value="3"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&gt;=3"/>
                                <a:tst expr="&lt;=3"/>
                            </a:da>
                        </v:var>
                        <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                            <a:a name="LABEL" value="Software Minor Version"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html>
                                        <p>Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.</p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PublishedInformation">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:9023bc4f-82f2-4011-bc46-6228805c7e78"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&gt;=0"/>
                                <a:tst expr="&lt;=0"/>
                            </a:da>
                        </v:var>
                        <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                            <a:a name="LABEL" value="Software Patch Version"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html>
                                        <p>Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.</p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PublishedInformation">VariantPreCompile</icc:v>
                           </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:16c1307a-4de3-4609-82f6-7e1100f78160"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&gt;=0"/>
                                <a:tst expr="&lt;=0"/>
                            </a:da>
                        </v:var>
                        <v:var name="VendorApiInfix" type="STRING_LABEL">
                            <a:a name="LABEL" value="Vendor Api Infix"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html>
                                        <p>In driver modules which can be instantiated several times on a single ECU, BSW00347 requires that the name of APIs is extended by the VendorId and a vendor specific name.
                                        This parameter is used to specify the vendor specific name. In total, the implementation specific name is generated as follows:
                                        &lt;ModuleName&gt;_&gt;VendorId&gt;_&lt;VendorApiInfix&gt;&lt;Api name from SWS&gt;.
                                        E.g.  assuming that the VendorId of the implementor is 123 and the implementer chose a VendorApiInfix of &quot;v11r456&quot; a api name Can_Write defined in the SWS will translate to Can_123_v11r456Write.
                                        This parameter is mandatory for all modules with upper multiplicity &gt; 1. It shall not be used for modules with upper multiplicity =1.
                                        </p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                               <icc:v class="PublishedInformation">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:c2017351-3b3d-4fb6-b504-7792754b1fc2"/>
                            <a:da name="DEFAULT" value=""/>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:da name="READONLY" value="true"/>
                        </v:var>
                        <v:var name="VendorId" type="INTEGER_LABEL">
                            <a:a name="LABEL" value="Vendor ID"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html>
                                        <p>Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list.</p>
                                        </html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PublishedInformation">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:6e8602ce-59d0-4f63-924d-3411dd0fbe7f"/>
                            <a:da name="DEFAULT" value="43"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&gt;=43"/>
                                <a:tst expr="&lt;=43"/>
                            </a:da>
                        </v:var>
                    </v:ctr>

                    <v:lst name="NvmKeyCatalog" type="MAP">
                        <a:a name="TAB" value="KeyCatalogs"/>
                        <a:a name="ROWS" value="6"/>
                        <a:da name="MIN" value="1"/>
                        <a:da name="MAX" value="256"/>
                        <a:da name="INVALID" type="XPath">
                            <a:tst expr="(num:i(count(*/.)) + num:i(count(../RamKeyCatalog/*/.))) > num:i(ecu:get(concat('Crypto.HseMaxNumOfKeyGroups.', string(node:fallback(./../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1])))))" true="The maximum allowed number of configured groups in both Nvm and Ram key catalogs has been exceeded."/>
                            <a:tst expr="sum(*[KeyType='SHE' or KeyType='AES' or KeyType='HMAC' or KeyType='TDES']/NumOfKeySlots) > num:i(ecu:get(concat('Crypto.HseMaxNvmSymKeys.', string(node:fallback(./../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1])))))" true="The maximum allowed number of symmetric keys in the NVM catalog has been exceeded."/>
                            <a:tst expr="sum(*[KeyType!='SHE' and KeyType!='AES' and KeyType!='HMAC' and KeyType!='TDES']/NumOfKeySlots) > num:i(ecu:get(concat('Crypto.HseMaxNvmAsymKeys.', string(node:fallback(./../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1])))))" true="The maximum allowed number of asymmetric keys in the NVM catalog has been exceeded."/>
                            <a:tst expr="num:i(var:set('totalKey',0) and var:set('storeSize','totalKey')) * num:max(node:foreach(node:paths(./*), 'eachKeyCatalog', 'num:i(var:set($storeSize,$totalKey + (num:i(node:ref($eachKeyCatalog)/NumOfKeySlots * node:ref($eachKeyCatalog)/MaxKeyBitLen div 8)))) * $totalKey')) > num:i(ecu:get(concat('Crypto.HseMaxNvmStoreSize.', string(node:fallback(./../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1])))))" true="The maximum allowed size of keys in the NVM catalog has been exceeded."/>
                        </a:da>
                        <v:ctr name="NvmKeyCatalog" type="IDENTIFIABLE">
                            <a:a name="REQUIRES-INDEX" value="true"/>
                            <a:a name="UUID" value="ECUC:BA2ED86B-857D-1014-B001-9E0F9D2AD19C"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                            Vendor specific: Configuration of NVM Keys Catalog.<br>
                                            SHE:<br>
                                              &nbsp;&nbsp;- NVM SHE keys shall be mapped on key group 0 in NVM key Catalog.<br>
                                              &nbsp;&nbsp;- In addition to the SHE keys KEY_1 to KEY_10 (key ID 0x4 to 0x0D), the HSE firmware allows extended NVM SHE key groups maped to the key groups 1 to 4 in the NVM key catalogs, and shall contain 10 keys.<br>
                                              &nbsp;&nbsp;- Maximum 5 NVM SHE groups are allowed.<br>
                                              &nbsp;&nbsp;- The owner for SHE key group shall be set to HSE_KEY_OWNER_ANY.<br>
                                              &nbsp;&nbsp;- Any other non-SHE key group can be added after SHE key groups.<br>
                                        </p></html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="NAME_PATTERN" value="NvmKeyGroup_?"/>

                            <v:var name="KeyType" type="ENUMERATION">
                                <a:a name="LABEL" value="Key Type"/>
                                <a:a name="DESC" value="EN: Vendor specific: Specifies the key type. It provides information about the interpretation of key data"/>
                                <a:a name="ORIGIN" value="NXP"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:BA31623A-857D-1014-81CF-8BC2C16F333E"/>
                                <a:da name="RANGE" type="XPath">
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptShe.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="SHE"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptAesKeys.',  string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="AES"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptHmac.',     string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="HMAC"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptSiphash.',  string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="SIPHASH"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptTdes.',     string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="TDES"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptEcc.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ECC_PAIR"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptEcc.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ECC_PUB"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptEcc.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ECC_PUB_EXT"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="RSA_PAIR"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="RSA_PUB"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="RSA_PUB_EXT"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptClassicDHKeyPairGen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="DH_PAIR"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptClassicDHKeyPairGen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="DH_PUB"/>
                                </a:da>
                                <a:da name="DEFAULT" type="XPath">
                                    <a:tst expr="(node:when(((ecu:get(concat('Crypto.HseSptAesKeys.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON'), 'AES' ,'SHE'))"/>
                                </a:da>
                            </v:var>
                            <v:var name="NumOfKeySlots" type="INTEGER">
                                <a:a name="LABEL" value="Number of key slots"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="DESC" value="EN: Vendor specific: The number of key slots in the current key group."/>
                                <a:da name="INVALID" type="Range">
                                    <a:tst expr="&lt;=256"/>
                                    <a:tst expr="&gt;=1"/>
                                </a:da>
                                <a:a name="ORIGIN" value="NXP"/>
                                <a:a name="UUID" value="ECUC:BA2DB27B-857D-1014-939C-943DC661C6BE"/>
                                <a:da name="DEFAULT" value="10"/>
                            </v:var>
                            <v:var name="MaxKeyBitLen" type="INTEGER">
                                <a:a name="LABEL" value="Max key length in bits"/>
                                <a:a name="ORIGIN" value="NXP"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="DESC" value="EN: Vendor specific: The maximum length of the key (in bits). All stored keys can have keyBitLen lower or equal to MaxKeyBitLen"/>
                                <a:da name="INVALID" type="Range">
                                    <a:tst expr="&lt;=65535"/>
                                    <a:tst expr="&gt;=1"/>
                                </a:da>
                                <a:a name="UUID" value="ECUC:BA2E52BB-857D-1014-8BA3-E53E24B10AAD"/>
                                <a:da name="DEFAULT" value="128"/>
                                <a:da name="WARNING" type="XPath">
                                      <a:tst expr="((node:fallback(../KeyType, 'KeyType') = 'SHE')
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) != num:i(128))
                                                    )"
                                             true="128 bit storage is enough for SHE keys. Using a larger value for MaxKeyBitLen results in not optimal use of memory in the key catalog."/>
                                </a:da>
                                <a:da name="INVALID" type="XPath">
                                      <a:tst expr="(
                                                    (node:fallback(../KeyType, 'KeyType') = 'HMAC')
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &gt; num:i(ecu:list(concat('Crypto.HseMaxHmacKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is greater than the maximum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PUB')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PUB_EXT')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &lt; num:i(ecu:list(concat('Crypto.HseMinEccKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is lower than the minimum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PUB')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PUB_EXT')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &gt; num:i(ecu:list(concat('Crypto.HseMaxEccKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is greater than the maximum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PUB')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PUB_EXT')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &lt; num:i(ecu:list(concat('Crypto.HseMinRsaKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is lower than the minimum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PUB')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PUB_EXT')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &gt; num:i(ecu:list(concat('Crypto.HseMaxRsaKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is greater than the maximum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'DH_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'DH_PUB')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &lt; num:i(ecu:list(concat('Crypto.HseMinClassicDhBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is lower than the minimum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'DH_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'DH_PUB')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &gt; num:i(ecu:list(concat('Crypto.HseMaxClassicDhBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is greater than the maximum value allowed by HSE for this key type."/>
                                </a:da>
                            </v:var>
                            <v:var name="KeyOwner" type="ENUMERATION">
                                <a:a name="LABEL" value="Key Owner"/>
                                <a:a name="ORIGIN" value="NXP"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="DESC" value="EN: Vendor specific: Specifies the key group owner."/>
                                <a:a name="UUID" value="ECUC:BA30E7BF-857D-1014-AF4F-CE2945867920"/>
                                <a:da name="RANGE">
                                    <a:v>OWNER_ANY</a:v>
                                    <a:v>OWNER_CUST</a:v>
                                    <a:v>OWNER_OEM</a:v>
                                </a:da>
                                <a:da name="DEFAULT" value="OWNER_CUST"/>
                            </v:var>
                            <v:lst name="MuMask" type="MAP">
                                <a:da name="MIN" value="1"/>
                                <v:ctr name="MuMask" type="IDENTIFIABLE">
                                    <a:a name="UUID" value="ECUC:BA2F54E5-857D-1014-A4AA-8A318B0312F2"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Specifies the MU instance(s) where the keys in the key group are allowed to be used on. The keys in a key group can be allowed to be used on one or more MUs."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>

                                    <v:var name="MU" type="ENUMERATION">
                                        <a:a name="DESC" value="EN: Vendor specific: Specifies one MU instance where the keys in the key group are allowed to be used on. The keys in a key group can be allowed to be used on one or more MUs."/>
                                        <a:a name="UUID" value="ECUC:BA2D0968-857D-1014-AAD6-9E933A19509B"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="text:uniq(../../*/MU, .)"
                                            false="Duplicated value, the messaging unit mask list must contain unique values."/>
                                        </a:da>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:da name="RANGE" type="XPath" expr="ecu:list('Crypto.MuInstances.List')"/>
                                        <a:da name="DEFAULT" type="XPath"
                                              expr="(ecu:list('Crypto.MuInstances.List'))[position()-1=node:fallback(node:current()/../@index,'0')]">
                                        </a:da>
                                    </v:var>
                                  </v:ctr>
                            </v:lst>
                        </v:ctr>
                    </v:lst>

                    <v:lst name="RamKeyCatalog" type="MAP">
                        <a:a name="TAB" value="KeyCatalogs"/>
                        <a:a name="ROWS" value="6"/>
                        <a:da name="MIN" value="1"/>
                        <a:da name="MAX" value="256"/>
                        <a:da name="INVALID" type="XPath">
                            <a:tst expr="(num:i(count(*/.)) + num:i(count(../NvmKeyCatalog/*/.))) > num:i(ecu:get(concat('Crypto.HseMaxNumOfKeyGroups.', string(node:fallback(./../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1])))))" true="The maximum allowed number of configured groups in both Nvm and Ram key catalogs has been exceeded."/>
                            <a:tst expr="sum(./*/NumOfKeySlots) > (num:i(ecu:get(concat('Crypto.HseMaxRamKeys.', string(node:fallback(./../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))" true="The maximum allowed number of keys in the RAM catalog has been exceeded."/>
                            <a:tst expr="num:i(var:set('totalKey',0) and var:set('storeSize','totalKey')) * num:max(node:foreach(node:paths(./*), 'eachKeyCatalog', 'num:i(var:set($storeSize,$totalKey + num:i(node:ref($eachKeyCatalog)/NumOfKeySlots * node:ref($eachKeyCatalog)/MaxKeyBitLen div 8))) * $totalKey')) > (num:i(ecu:get(concat('Crypto.HseMaxRamStoreSize.', string(node:fallback(./../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))" true="The maximum allowed size of keys in the RAM catalog has been exceeded."/>
                        </a:da>

                        <v:ctr name="RamKeyCatalog" type="IDENTIFIABLE">
                            <a:a name="REQUIRES-INDEX" value="true"/>
                            <a:a name="UUID" value="ECUC:BA2EFA1D-857D-1014-8023-815B61F9BEFD"/>
                            <a:a name="DESC">
                                <a:v>
                                    <![CDATA[EN:
                                        <html><p>
                                            Vendor specific: Configuration of RAM Keys Catalog.<br>
                                            SHE:<br>
                                              &nbsp;&nbsp;- RAM SHE key shall be mapped on key group 0 in RAM key Catalog.<br>
                                              &nbsp;&nbsp;- The owner for SHE key group shall be set to HSE_KEY_OWNER_ANY.<br>
                                              &nbsp;&nbsp;- Any other non-SHE key group can be added after SHE key groups.<br>
                                        </p></html>
                                    ]]>
                                </a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="NAME_PATTERN" value="RamKeyGroup_?"/>

                            <v:var name="KeyType" type="ENUMERATION">
                                <a:a name="LABEL" value="Key Type"/>
                                <a:a name="DESC" value="EN: Vendor specific: Specifies the key type. It provides information about the interpretation of key data"/>
                                <a:a name="ORIGIN" value="NXP"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="UUID" value="ECUC:BA3187E8-857D-1014-97AF-DB0540ABCDEE"/>
                                <a:da name="RANGE" type="XPath">
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptShe.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="SHE"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptAesKeys.',  string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="AES"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptHmac.',     string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="HMAC"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptSiphash.',  string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="SIPHASH"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptTdes.',     string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="TDES"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptEcc.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="SHARED_SECRET"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptEcc.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ECC_PAIR"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptEcc.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ECC_PUB"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptEcc.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="ECC_PUB_EXT"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="RSA_PUB"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptRsa.',      string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="RSA_PUB_EXT"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptClassicDHKeyPairGen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="DH_PAIR"/>
                                    <a:tst expr="((ecu:get(concat('Crypto.HseSptClassicDHKeyPairGen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON')" true="DH_PUB"/>
                                </a:da>
                                <a:da name="DEFAULT" type="XPath">
                                    <a:tst expr="(node:when(((ecu:get(concat('Crypto.HseSptAesKeys.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))) = 'STD_ON'), 'AES' ,'SHE'))"/>
                                </a:da>
                            </v:var>
                            <v:var name="NumOfKeySlots" type="INTEGER">
                                <a:a name="LABEL" value="Number of key slots"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="DESC" value="EN: Vendor specific: The number of key slots in the current key group."/>
                                <a:da name="INVALID" type="Range">
                                    <a:tst expr="&lt;=256"/>
                                    <a:tst expr="&gt;=1"/>
                                </a:da>
                                <a:a name="ORIGIN" value="NXP"/>
                                <a:a name="UUID" value="ECUC:BA2DE865-857D-1014-9795-F4714C7765E0"/>
                                <a:da name="DEFAULT" value="10"/>
                            </v:var>
                            <v:var name="MaxKeyBitLen" type="INTEGER">
                                <a:a name="LABEL" value="Max key length in bits"/>
                                <a:a name="ORIGIN" value="NXP"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="DESC" value="EN: Vendor specific: The maximum length of the key (in bits). All stored keys can have keyBitLen lower or equal to MaxKeyBitLen"/>
                                <a:da name="INVALID" type="Range">
                                    <a:tst expr="&lt;=65535"/>
                                    <a:tst expr="&gt;=1"/>
                                </a:da>
                                <a:a name="UUID" value="ECUC:BA2E9176-857D-1014-9B3A-F37A02738321"/>
                                <a:da name="DEFAULT" value="128"/>
                                <a:da name="WARNING" type="XPath">
                                      <a:tst expr="((node:fallback(../KeyType, 'KeyType') = 'SHE')
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) != num:i(128))
                                                    )"
                                             true="128 bit storage is enough for SHE keys. Using a larger value for MaxKeyBitLen results in not optimal use of memory in the key catalog."/>
                                </a:da>
                                <a:da name="INVALID" type="XPath">
                                      <a:tst expr="(
                                                    (node:fallback(../KeyType, 'KeyType') = 'HMAC')
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &gt; num:i(ecu:list(concat('Crypto.HseMaxHmacKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is greater than the maximum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PUB')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PUB_EXT')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &lt; num:i(ecu:list(concat('Crypto.HseMinEccKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is lower than the minimum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PUB')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'ECC_PUB_EXT')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &gt; num:i(ecu:list(concat('Crypto.HseMaxEccKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is greater than the maximum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PUB')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PUB_EXT')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &lt; num:i(ecu:list(concat('Crypto.HseMinRsaKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is lower than the minimum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PUB')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'RSA_PUB_EXT')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &gt; num:i(ecu:list(concat('Crypto.HseMaxRsaKeyBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is greater than the maximum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'DH_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'DH_PUB')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &lt; num:i(ecu:list(concat('Crypto.HseMinClassicDhBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is lower than the minimum value allowed by HSE for this key type."/>
                                      <a:tst expr="(
                                                    (
                                                        (node:fallback(../KeyType, 'KeyType') = 'DH_PAIR')
                                                        or
                                                        (node:fallback(../KeyType, 'KeyType') = 'DH_PUB')
                                                    )
                                                    and
                                                    (num:i(node:fallback(../MaxKeyBitLen, num:i(128))) &gt; num:i(ecu:list(concat('Crypto.HseMaxClassicDhBitsLen.', string(node:fallback(./../../../CryptoGeneral/HseFwType,ecu:list('Crypto.HseFwTypes.List')[1]))))))
                                                    )"
                                             true="The max key length in bits is greater than the maximum value allowed by HSE for this key type."/>
                                </a:da>
                            </v:var>
                            <v:var name="KeyOwner" type="ENUMERATION">
                                <a:a name="LABEL" value="Key Owner"/>
                                <a:a name="ORIGIN" value="NXP"/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="DESC" value="EN: Vendor specific: Specifies the key group owner."/>
                                <a:a name="UUID" value="ECUC:BA310BB4-857D-1014-965A-BFFE37F6D19E"/>
                                <a:da name="RANGE">
                                    <a:v>OWNER_ANY</a:v>
                                    <a:v>OWNER_CUST</a:v>
                                    <a:v>OWNER_OEM</a:v>
                                </a:da>
                                <a:da name="DEFAULT" value="OWNER_ANY"/>
                            </v:var>
                            <v:lst name="MuMask" type="MAP">
                                <a:da name="MIN" value="1"/>
                                <v:ctr name="MuMask" type="IDENTIFIABLE">
                                    <a:a name="UUID" value="ECUC:BA2F779A-857D-1014-8F2A-EDD407782568"/>
                                    <a:a name="DESC" value="EN: Vendor specific: Specifies the MU instance(s) where the keys in the key group are allowed to be used on. The keys in a key group can be allowed to be used on one or more MUs."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                                    </a:a>

                                    <v:var name="MU" type="ENUMERATION">
                                        <a:a name="DESC" value="EN: Vendor specific: Specifies one MU instance where the keys in the key group are allowed to be used on. The keys in a key group can be allowed to be used on one or more MUs."/>
                                        <a:a name="UUID" value="ECUC:BA2D3E15-857D-1014-A756-C7C3BDFC269D"/>
                                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                        </a:a>
                                        <a:da name="INVALID" type="XPath">
                                            <a:tst expr="text:uniq(../../*/MU, .)"
                                            false="Duplicated value, the messaging unit mask list must contain unique values."/>
                                        </a:da>
                                        <a:a name="ORIGIN" value="NXP"/>
                                        <a:da name="RANGE" type="XPath" expr="ecu:list('Crypto.MuInstances.List')"/>
                                        <a:da name="DEFAULT" type="XPath"
                                              expr="(ecu:list('Crypto.MuInstances.List'))[position()-1=node:fallback(node:current()/../@index,'0')]">
                                        </a:da>
                                    </v:var>
                                  </v:ctr>
                            </v:lst>
                        </v:ctr>
                    </v:lst>
                    <d:ref type="REFINED_MODULE_DEF" value="ASPath:/AUTOSAR/EcucDefs/Crypto"/>
                </v:ctr>
            </d:chc>
        <d:chc name="Crypto_EcuParameterDefinition"
             type="AR-ELEMENT" value="ECU_PARAMETER_DEFINITION">
        <d:ctr type="AR-ELEMENT">
          <a:a name="UUID" value="ECUC:f23762d6-4749-4f48-a7b5-c2cb915659ca"/>
          <a:a name="DEF"
               value="ASPath:/AR_PACKAGE_SCHEMA/ECU_PARAMETER_DEFINITION"/>
          <d:lst name="MODULE_REF">
            <d:ref type="MODULE_REF" value="ASPath:/TS_T40D34M30I0R0/Crypto"/>
          </d:lst>
        </d:ctr>
        </d:chc>
          <d:chc name="Crypto_ModuleDescription" type="AR-ELEMENT" value="BSW_MODULE_DESCRIPTION">
            <d:ctr type="AR-ELEMENT">
                <a:a name="DEF"
                    value="ASPath:/AR_PACKAGE_SCHEMA/BSW_MODULE_DESCRIPTION"/>
                <d:var name="MODULE_ID" type="INTEGER" >
                    <a:a name="EDITABLE" value="false"/>
                    <a:a name="IMPORTER_INFO" value="@DEF"/>
                </d:var>
                <d:ref type="RECOMMENDED_CONFIGURATION" >
                    <a:a name="EDITABLE" value="false"/>
                    <a:a name="IMPORTER_INFO" value="@DEF"/>
                </d:ref>
                <d:ref type="PRE_CONFIGURED_CONF" >
                    <a:a name="EDITABLE" value="false"/>
                    <a:a name="IMPORTER_INFO" value="@DEF"/>
                </d:ref>
                <d:ref type="VENDOR_SPECIFIC_MODULE_DEF"
                    value="ASPath:/TS_T40D34M30I0R0/Crypto"/>
            </d:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>
</datamodel>

