1. Example Description
        The example application showcases the usage of 2 features offered by HSE Firmware:
         - Generate/verify CMAC with counter
         - Key generation using ECC variant Burmester-Desmedt to compute a shared secret. The Burmester-Desmedt Protocol protocol is an extension to the Diffie-Hellman key-agreement protocol.
           It allows establishing a shared secret key for a number of participants organized in a "ring". There are 3 nodes in the ring used by this example, numbered as node 1, node 2 and node 3.
           The example goes through all the steps needed to get the shared secret on node 1, assuming that the public keys and the second public keys of the other 2 nodes are known.

    1.1 The application software functionality
        The example application code sections are split into 2 subsections, one for each of the 2 shown features.
        The Crypto_KeyElementGet() API is used with a magic number for the CryptoKeyElementId in order to feed pre-configured HSE descriptors to the HSE Firmware. More details about this functionality of the Crypto driver can be found in the User Manual, chapter 'Driver usage and configuration tips', paragraph 'ASR Extension services offered through 'Crypto_KeyElementGet' API'.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - DB: XS32K3X8CVB-Q289 PCB 53108 RevX3 SCH RevA1
            - MB: X-S32K3XXX-MB PCB 47386 RevA SCH RevA
            - MB: X-S32K2XX-MB PCB 31431 RevX3 SCH RevB
        2.1.2 Connections
            No special wiring connections are needed for this example.
        2.1.3 Debugger
            If DB 'XS32K3X8CVB-Q289 PCB 53108 RevX3 SCH RevA1' is used, the debugger must be connected to J205 20-pin ARM Standard JTAG connector.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.

3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: RAM (Debug_RAM) or FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board
        To run the example application follow the steps:
          - Go to Run and select Debug Configurations. There will be a debug configuration for this project:
            Configuration Name                    Description
            -------------------------------       --------------------------------------
            $(example)_Debug_RAM_PNE              Debug the RAM configuration using PEmicro debugger
            $(example)_Debug_FLASH_PNE            Debug the FLASH configuration using PEmicro debugger

          - If the debug configuration is set to Debug_FLASH, go to the PEmicro Debugger Tab => click Advanced Options button => at the Flash Algorithm Selection => select the HSE enabled flash algorithm => click OK button to close Advanced Options dialog.
          - Click Debug button at the Debug Configuration dialog. Now the perspective will change to the Debug Perspective.
          - Use the controls to control the program flow.
