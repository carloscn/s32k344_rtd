1. Example Description
    Checks that HSE FW is up and running, formats the key catalogs, imports an AES key and sends synchronous and asynchronous encryption requests to HSE on one MU instance

    1.1 The application software functionality
        The code in the main function of the application performs the following steps:
         - Initializes the OsiIf component. It is used by Hse_Ip layer to determine the timeout while waiting for responses from HSE for synchronous requests
         - Installs the handler for treating OredRx interrupt for MU0 instance
         - Checks the status of the HSE FW by calling the Hse_Ip_GetHseStatus() API and checking the returned value
         - Initializes the Hse Ip layer to work with MU0 instance
         - Sends a synchronous request over MU0 to read the HSE FW capabilities and checks that the RANDOM and SHE capabilities are enabled
         - Sends a synchronous request to enable the other MU instances, such that HSE will listen to requests sent over all MU instances
         - Formats the HSE Nvm and Ram key catalogs in order for each to contain a group of AES128 keys. Only one key in Ram key catalog will be used by the example
         - Imports the material of the ASE128 key in the slot 0 of group 0 in the Hse Nvm key catalog
         - Initiates a synchronous AES128 encryption request and checks that the cipherText is the expected one
         - Initiates a bulk of asynchronous using interrupts AES128 encryption requests and checks that the cipherTexts are the expected ones

        The configuration of the drivers used by this example are done like below:
         - Hse component
            - Timeout Counter Type set to OSIF_COUNTER_DUMMY, such that the time passed, from the moment a request is made from Hse Ip layer to HSE FW till
              the response is received, is measured in ticks

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - DB: XS32K3XXCVB-Q257 PCB 47020 RevA1 SCH RevX2
            - MB: X-S32K3XXX-MB PCB 47386 RevA SCH RevA
            - MB: X-S32K2XX-MB PCB 31431 RevX3 SCH RevB
        2.1.2 Connections
            No special wiring connections are needed for this example.
        2.1.3 Debugger
            If DB board 'XS32K3XXCVB-Q257 PCB 47020 RevA1 SCH RevX2' is used, the debugger must be connected to J68 20-pin ARM Standard JTAG connector.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.

3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: RAM (Debug_RAM) or FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board
        To run the example application follow the steps:
          - Go to Run and select Debug Configurations. There will be a debug configuration for this project:
            Configuration Name                    Description
            -------------------------------       --------------------------------------
            $(example)_Debug_RAM_PNE              Debug the RAM configuration using PEmicro debugger
            $(example)_Debug_FLASH_PNE            Debug the FLASH configuration using PEmicro debugger

          - If the debug configuration is set to Debug_FLASH, go to the PEmicro Debugger Tab => click Advanced Options button => at the Flash Algorithm Selection => select nxp_s32k344_1x32x980k_hse_enabled => click OK button to close Advanced Options dialog.
          - Click Debug button at the Debug Configuration dialog. Now the perspective will change to the Debug Perspective.
          - Use the controls to control the program flow.
