1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers that are included in this release.
    1.1 The application software functionality
            - Mcu_Init, Mcu_InitClock, Mcu_DistributePllClock, Mcu_SetMode
                    Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
                    The clock configuration that is used will enable and use the PLL as source clock.
            - Platform_Init
                    Initialize the interrupt controller and to apply the interrupt configuration according to the Platform configuration.
            - Platform_InstallIrqHandler
                    Install the ISR for the STM timer used by the Gpt driver and the SWT used by the Wdg driver
            - Gpt_Init, Gpt_EnableNotification
                    Initialize the Gpt driver, to start the selected timer and to enable its notification that will be used for periodically servicing Wdg.
            - Wdg_43_Instance0_Init, Wdg_43_Instance0_SetTriggerCondition, Wdg_43_Instance0_SetMode
                    Initialize the Wdg driver, service the Wdg in order to avoid a timeout and change the mode of operation
            - If the result is correct, the program will go to the end of code without getting stuck in the loop.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K3X4EVB-Q257 47827 PCB RevX1 SCH RevA. Silicon: P32K344EHVMMS 0P55A CTSK2038A 
            - S32K3X4EVB-Q172 51972 PCB RevA SCH RevA. Silicon: P32K344EHVPBS 1P55A CTZX2128B 
        2.2.2 Connections
            - Powered board through power Adapter 12V
        2.2.3 Debugger
            The debugger must be connected to a J12 20 pin JTAG Cortex Debug connector(172) / J365 20 pin JTAG Cortex Debug connector(257) or J55 for openSDA.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.
         
3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse. 
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:
        
        Configuration Name                  Description
        -------------------------------     -----------------------
        Wdg_Example_S32K344_Debug_FLASH_PNE    Debug the FLASH configuration using PEmicro probe        
        
        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.