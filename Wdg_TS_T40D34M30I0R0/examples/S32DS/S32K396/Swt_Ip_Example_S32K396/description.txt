1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers that are included in this code drop. It is not part of the production code deliverables.
    The application includes a Design Studio project, that uses predefined configurations for the IP layer only (Clock, IntCtrl and Swt).
    The application uses the IP layer functionality to trigger a timer interrupt every 1s.
    1.1 The application software functionality
            - Clock_Ip_Init
                    Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
                    The clock configuration that is used will enable and use the PLL as source clock.
            - IntCtrl_Ip_EnableIrq & IntCtrl_Ip_InstallHandler
                    Enable the interrupt used by the application and set the correct handler for it.
            - Swt_Ip_Init, Swt_Ip_Service & Swt_Ip_Deinit
                    The examples use SWT timeout interrupt to feed itself.
                    Each 1 second, the SWT timeout expired and the SWT interrupt will reset the counter by writing the service sequence.
                    SWT will be de-initialized after performing 5 times SWT service.
            - The status of execution running the example is successful if there is no dev assert error detected.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - Mini-module: XS32K396-BGA-DC PCB 54614 RevX1 SCH RevA
            - Mother-board: 
                - X-S32X-MB version A PCB 54935 RevX1 SCH RevA
            - Silicon: E5 sample, 289MBGA: P32K396EHMJBS OP40E QAD2222F
        2.2.2 Connections
            - Powered board through power Adapter 12V
        2.2.3 Debugger
            The debugger must be connected to J20 20-pin JTAG Cortex Debug connector.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select "Swt_Ip_Example_S32K396". Then click on "Finish".
            The project should now be copied into you current workspace.

3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse. 
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:
        
        Configuration Name                  Description
        -------------------------------     -----------------------
        Swt_Ip_Example_S32K396_Debug_FLASH_PNE    Debug the FLASH configuration using PEmicro probe
        
        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.

        Due to the limitation of SWT not running in debug mode with PnE debugger, the Swt_Ip_Example_S32K396 enables WdgRunsInDebugMode = true; so that once enabled SWT to run, its counter will count continuously and pausing at breakpoint will cause SWT counter to overflow and reset request.
