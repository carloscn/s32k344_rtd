1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers that are included in this code drop. It is not part of the production code deliverables.
    The application includes an EB Tresos project that configures the Base Dem EcuC Lin EcuM Platform Mcu Os and Resource.
    1.1 The aplication software functionality
    In this example, Master sends a complete LIN frame (header + response).
    1.2 In this example, some functionality is used:
        - Port_Init
                Initialize the pins used by the application using the Port driver.
        - Mcu_Init, Mcu_InitClock, Mcu_DistributePllClock, Mcu_SetMode
                Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
                The clock configuration that is used will enable and use the PLL as source clock.
        - Platform_Init
                Install the ISR for the Flexio and enables the interrupts.
        - Lin_Init
                Initialize the Lin driver
        - Lin_WakeupInternal
                Wakeup LIN channels for ASR 4.3.1
        - Lin_CheckWakeup
                Check Lin channel wakeup
        - Lin_SendFrame
                Send LIN frame            
        - Lin_GetStatus
                Get status of Lin
2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - Motherboard EVB:S32K3X4EVB-Q257 47827 PCB RevX1 SCH RevA or S32K3XXEVB-Q172 51972 PCB RevA SCH RevA
            - 1 S32Debugger: Lauterbach
        2.2.2 Connections 
            - S32K3X4EVB-Q257 47827 PCB RevX1 SCH RevA
                - Don't Connect J675.7 to J675.8
            - S32K3XXEVB-Q172 51972 PCB RevA SCH RevA
                - Don't Connect J23.7 to J23.8
        2.2.3 Debugger
            The debugger must be connected to JTAG Cortex Debug connector.
    2.2 Software installation
        2.2.1 Tresos Project Installation
            The following procedure requires that the user has EB Tresos Studio installed and it is only needed for viewing, updating and generating the driver's configuration.
            Procedure:
                1. Make sure that all RTD plugins are already installed in the Tresos Studio plugins directory
                2. Open Tresos Studio
                3. Import example application project
                    a. Click on "File" and select "Import"
                    b. Select "Existing Projects into Workspace" and click on "Next" button
                    c. Select "Select root directory" and click on "Browse"
                    d. Select the location of the [project] folder in the installed example application package folder
                    e. Optional* - Select "Copy projects into workspace" 
                    f. Click on "Finish" button
        2.2.2 Example configuration
            The following procedure requires that the user has EB Tresos Studio installed and the toolchains versions specified in the Release Notes.
            The toolchain that will be used needs to be installed for correct operation and the path to the installation location shall be added into the system environment variable(s):
            - TRESOS_DIR the installation path of Electrobit Tresos (used for generating the project from command line)
                Ex: TRESOS_DIR = C:/EB/tresos_27
            - GCC_DIR The path to the GCC instalation dir
                Ex: GCC_DIR = C:/NXP/S32DS.3.4/S32DS/build_tools/gcc_v10.2/gcc-10.2-arm32-eabi
            - PLUGINS_DIR The path to the RTD plugins directory
                Ex: PLUGINS_DIR = C:/NXP/SW32_RTD/eclipse/plugins
            Procedure:
                1. Open project_parameters.mk file in a text editor and update the variables mentioned above with the correct paths
                2. Open "Makefile" file in a text editor and add path to the Linif header directory to INCLUDE_DIRS+=
                    Ex: $(PLUGINS_DIR)/LinIf_$(AR_PKG_NAME)/include
3. Building the example application
    3.1 Compiling the application
        Procedure:
            1. Open the Windows command prompt window
            2. Change the current directory to the example application folder
            3. To build the example, execute the following command to build: make build
            4. The object files and linker output file (main.elf) shall be generated in the /out subdirectory
    3.2 Running the application on the board
        To execute the example application load the executable file to the evaluation board using the Lauterbach debugger and the s32k3xx.cmm script.
    3.3 Modifying the configuration in Tresos and generating the code
        Users may change the application configuration according to their needs.
        Procedure:
            1. Open the EB Tresos Studio GUI
            2. Open previously imported Example Application project
            3. Use the Tresos Studio GUI to modify configuration parameter values and save the changes.
            4. Select the Example Application project and click on "Generate" button to generate the configuration files.
