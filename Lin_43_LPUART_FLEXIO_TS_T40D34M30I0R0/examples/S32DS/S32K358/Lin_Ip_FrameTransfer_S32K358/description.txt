1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers that are included in this code drop. It is not part of the production code deliverables.
    This is a simple application which shows the usage of Lin driver on S32DS for S32K358 derivative.
    1.1 The aplication software functionality
        In this example, Master sends a complete LIN frame (header + response) using both Flexio and Lpuart.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - Mini-module:  XS32K3X8CVB-Q289 PCB 53108 RevX3 SCH RevA1
            - Mother-board: X-S32K3XXX-MB PCB 47386 RevA SCH RevA
            - 1 S32Debugger (PE micro debugger)
        2.2.2 Connections
            - Connect J59.1 to J59.2
            - Connect J63.1 to J63.2
            - Connect J63.3 to J63.4
            - Connect J69.5 to J69.6
            - Connect J69.7 to J69.8
            - Don't Connect J68.1 to J68.5
        2.2.3 Debugger
            The debugger must be connected to JTAG Cortex Debug connector.
    2.2 Software installation
        Make sure that all RTD plugins are already installed in the S32DS plugins directory
3. Generating, building and running the example application
    3.1 Importing the project into the workspace
        After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select "Lin_Ip_FrameTransfer_S32K358". Then click on "Finish".
        The project should now be copied into you current workspace.
        Wait for the S32 Configuration was initialized and ready.
    3.2 Generating the S32 configuration
        The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
        The initial configuration will have the same settings as the default example settings.
        Right click on the current project, then click "S32 Configuration Tool" choose "Open Peripherals".
        Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
        Make the desired changes (if any) then click "Update Code".
    3.3 Compiling the application
        Select the configuration to be built: RAM (Debug_RAM), or FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse. 
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.4 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:
        
        Configuration Name                  Description
        -------------------------------     -----------------------
        $Lin_Ip_FrameTransfer_S32K358_debug_ram_pemicro        Debug the RAM configuration using PEmicro probe
        $Lin_Ip_FrameTransfer_S32K358_debug_flash_pemicro      Debug the FLASH configuration using PEmicro probe
        
        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.